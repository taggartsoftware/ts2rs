// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl Duplex {
    pub fn new() -> Duplex {
        JsCast::unchecked_into(Object::new())
    }
}
impl DuplexOptions {
    pub fn new() -> DuplexOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl FinishedOptions {
    pub fn new() -> FinishedOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl PassThrough {
    pub fn new() -> PassThrough {
        JsCast::unchecked_into(Object::new())
    }
}
impl Pipe {
    pub fn new() -> Pipe {
        JsCast::unchecked_into(Object::new())
    }
}
impl Readable {
    pub fn new() -> Readable {
        JsCast::unchecked_into(Object::new())
    }
}
impl ReadableOptions {
    pub fn new() -> ReadableOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Stream {
    pub fn new() -> Stream {
        JsCast::unchecked_into(Object::new())
    }
}
impl Transform {
    pub fn new() -> Transform {
        JsCast::unchecked_into(Object::new())
    }
}
impl TransformOptions {
    pub fn new() -> TransformOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Writable {
    pub fn new() -> Writable {
        JsCast::unchecked_into(Object::new())
    }
}
impl WritableOptions {
    pub fn new() -> WritableOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<EventEmitter> for Duplex {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Duplex> for EventEmitter {
    fn from(child: Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for Duplex {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Duplex> for Readable {
    fn from(child: Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableStream> for Duplex {
    fn as_ref(&self) -> &ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Duplex> for ReadableStream {
    fn from(child: Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Duplex {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Duplex> for Stream {
    fn from(child: Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for Duplex {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Duplex> for Writable {
    fn from(child: Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableStream> for Duplex {
    fn as_ref(&self) -> &WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Duplex> for WritableStream {
    fn from(child: Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<internal> for Duplex {
    fn as_ref(&self) -> &internal {
        JsCast::unchecked_ref(self)
    }
}
impl From<Duplex> for internal {
    fn from(child: Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableOptions> for DuplexOptions {
    fn as_ref(&self) -> &ReadableOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<DuplexOptions> for ReadableOptions {
    fn from(child: DuplexOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableOptions> for DuplexOptions {
    fn as_ref(&self) -> &WritableOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<DuplexOptions> for WritableOptions {
    fn from(child: DuplexOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for PassThrough {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for Duplex {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for PassThrough {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for EventEmitter {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for PassThrough {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for Readable {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableStream> for PassThrough {
    fn as_ref(&self) -> &ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for ReadableStream {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for PassThrough {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for Stream {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Transform> for PassThrough {
    fn as_ref(&self) -> &Transform {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for Transform {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for PassThrough {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for Writable {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableStream> for PassThrough {
    fn as_ref(&self) -> &WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for WritableStream {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<internal> for PassThrough {
    fn as_ref(&self) -> &internal {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for internal {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Readable {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Readable> for EventEmitter {
    fn from(child: Readable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableStream> for Readable {
    fn as_ref(&self) -> &ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Readable> for ReadableStream {
    fn from(child: Readable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Readable {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Readable> for Stream {
    fn from(child: Readable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<internal> for Readable {
    fn as_ref(&self) -> &internal {
        JsCast::unchecked_ref(self)
    }
}
impl From<Readable> for internal {
    fn from(child: Readable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Stream {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Stream> for EventEmitter {
    fn from(child: Stream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<internal> for Stream {
    fn as_ref(&self) -> &internal {
        JsCast::unchecked_ref(self)
    }
}
impl From<Stream> for internal {
    fn from(child: Stream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for Transform {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<Transform> for Duplex {
    fn from(child: Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Transform {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Transform> for EventEmitter {
    fn from(child: Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for Transform {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Transform> for Readable {
    fn from(child: Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableStream> for Transform {
    fn as_ref(&self) -> &ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Transform> for ReadableStream {
    fn from(child: Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Transform {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Transform> for Stream {
    fn from(child: Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for Transform {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Transform> for Writable {
    fn from(child: Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableStream> for Transform {
    fn as_ref(&self) -> &WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Transform> for WritableStream {
    fn from(child: Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<internal> for Transform {
    fn as_ref(&self) -> &internal {
        JsCast::unchecked_ref(self)
    }
}
impl From<Transform> for internal {
    fn from(child: Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<DuplexOptions> for TransformOptions {
    fn as_ref(&self) -> &DuplexOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<TransformOptions> for DuplexOptions {
    fn from(child: TransformOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableOptions> for TransformOptions {
    fn as_ref(&self) -> &ReadableOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<TransformOptions> for ReadableOptions {
    fn from(child: TransformOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableOptions> for TransformOptions {
    fn as_ref(&self) -> &WritableOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<TransformOptions> for WritableOptions {
    fn from(child: TransformOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Writable {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Writable> for EventEmitter {
    fn from(child: Writable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Writable {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Writable> for Stream {
    fn from(child: Writable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableStream> for Writable {
    fn as_ref(&self) -> &WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Writable> for WritableStream {
    fn from(child: Writable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<internal> for Writable {
    fn as_ref(&self) -> &internal {
        JsCast::unchecked_ref(self)
    }
}
impl From<Writable> for internal {
    fn from(child: Writable) -> Self {
        JsCast::unchecked_into(child)
    }
}
