// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl Duplex {
    pub fn new() -> Duplex {
        JsCast::unchecked_into(Object::new())
    }
}
impl DuplexOptions {
    pub fn new() -> DuplexOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl FinishedOptions {
    pub fn new() -> FinishedOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl PassThrough {
    pub fn new() -> PassThrough {
        JsCast::unchecked_into(Object::new())
    }
}
impl Pipe {
    pub fn new() -> Pipe {
        JsCast::unchecked_into(Object::new())
    }
}
impl Readable {
    pub fn new() -> Readable {
        JsCast::unchecked_into(Object::new())
    }
}
impl ReadableOptions {
    pub fn new() -> ReadableOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Stream {
    pub fn new() -> Stream {
        JsCast::unchecked_into(Object::new())
    }
}
impl Transform {
    pub fn new() -> Transform {
        JsCast::unchecked_into(Object::new())
    }
}
impl TransformOptions {
    pub fn new() -> TransformOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Writable {
    pub fn new() -> Writable {
        JsCast::unchecked_into(Object::new())
    }
}
impl WritableOptions {
    pub fn new() -> WritableOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::internal::Duplex {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::Duplex> for crate::node_js::EventEmitter {
    fn from(child: crate::internal::Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::internal::Duplex {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::Duplex> for crate::node_js::ReadableStream {
    fn from(child: crate::internal::Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::internal::Duplex {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::Duplex> for crate::node_js::WritableStream {
    fn from(child: crate::internal::Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::internal::PassThrough {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::PassThrough> for crate::node_js::EventEmitter {
    fn from(child: crate::internal::PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::internal::PassThrough {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::PassThrough> for crate::node_js::ReadableStream {
    fn from(child: crate::internal::PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::internal::PassThrough {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::PassThrough> for crate::node_js::WritableStream {
    fn from(child: crate::internal::PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::internal::Readable {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::Readable> for crate::node_js::EventEmitter {
    fn from(child: crate::internal::Readable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::internal::Readable {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::Readable> for crate::node_js::ReadableStream {
    fn from(child: crate::internal::Readable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::internal::Stream {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::Stream> for crate::node_js::EventEmitter {
    fn from(child: crate::internal::Stream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::internal::Transform {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::Transform> for crate::node_js::EventEmitter {
    fn from(child: crate::internal::Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::internal::Transform {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::Transform> for crate::node_js::ReadableStream {
    fn from(child: crate::internal::Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::internal::Transform {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::Transform> for crate::node_js::WritableStream {
    fn from(child: crate::internal::Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::internal::Writable {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::Writable> for crate::node_js::EventEmitter {
    fn from(child: crate::internal::Writable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::internal::Writable {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::internal::Writable> for crate::node_js::WritableStream {
    fn from(child: crate::internal::Writable) -> Self {
        JsCast::unchecked_into(child)
    }
}
