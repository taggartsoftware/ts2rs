// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "cluster")]
extern "C" {
    pub type ClusterSettings;
    # [ wasm_bindgen ( method , getter , js_name = execArgv ) ]
    pub fn exec_argv(this: &ClusterSettings) -> Option<Array>;
    # [ wasm_bindgen ( method , setter , js_name = execArgv ) ]
    pub fn set_exec_argv(this: &ClusterSettings, value: Option<&Array>);
    #[wasm_bindgen(method, getter)]
    pub fn exec(this: &ClusterSettings) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_exec(this: &ClusterSettings, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn args(this: &ClusterSettings) -> Option<Array>;
    #[wasm_bindgen(method, setter)]
    pub fn set_args(this: &ClusterSettings, value: Option<&Array>);
    #[wasm_bindgen(method, getter)]
    pub fn silent(this: &ClusterSettings) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_silent(this: &ClusterSettings, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn stdio(this: &ClusterSettings) -> Option<Array>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdio(this: &ClusterSettings, value: Option<&Array>);
    #[wasm_bindgen(method, getter)]
    pub fn uid(this: &ClusterSettings) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_uid(this: &ClusterSettings, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn gid(this: &ClusterSettings) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_gid(this: &ClusterSettings, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = inspectPort ) ]
    pub fn inspect_port(this: &ClusterSettings) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = inspectPort ) ]
    pub fn set_inspect_port(this: &ClusterSettings, value: &JsValue);
    pub type Address;
    #[wasm_bindgen(method, getter)]
    pub fn address(this: &Address) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_address(this: &Address, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn port(this: &Address) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_port(this: &Address, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = addressType ) ]
    pub fn address_type(this: &Address) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = addressType ) ]
    pub fn set_address_type(this: &Address, value: &JsValue);
    pub type Worker;
    #[wasm_bindgen(method, getter)]
    pub fn id(this: &Worker) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_id(this: &Worker, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn process(this: &Worker) -> crate::child_process::ChildProcess;
    #[wasm_bindgen(method, setter)]
    pub fn set_process(this: &Worker, value: &crate::child_process::ChildProcess);
    #[wasm_bindgen(method)]
    pub fn send(
        this: &Worker,
        message: &JsValue,
        send_handle: &JsValue,
        callback: &JsValue,
    ) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_send(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn kill(this: &Worker, signal: Option<&str>);
    #[wasm_bindgen(method, setter)]
    pub fn set_kill(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn destroy(this: &Worker, signal: Option<&str>);
    #[wasm_bindgen(method, setter)]
    pub fn set_destroy(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn disconnect(this: &Worker);
    #[wasm_bindgen(method, setter)]
    pub fn set_disconnect(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = isConnected ) ]
    pub fn is_connected(this: &Worker) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isConnected ) ]
    pub fn set_is_connected(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = isDead ) ]
    pub fn is_dead(this: &Worker) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isDead ) ]
    pub fn set_is_dead(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = exitedAfterDisconnect ) ]
    pub fn exited_after_disconnect(this: &Worker) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = exitedAfterDisconnect ) ]
    pub fn set_exited_after_disconnect(this: &Worker, value: bool);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. error"]
    #[doc = "   3. exit"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Worker, event: &str, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Worker, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. error"]
    #[doc = "   3. exit"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener2(this: &Worker, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. error"]
    #[doc = "   3. exit"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener3(this: &Worker, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. error"]
    #[doc = "   3. exit"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener4(this: &Worker, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. error"]
    #[doc = "   3. exit"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener5(this: &Worker, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. error"]
    #[doc = "   3. exit"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener6(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener6(this: &Worker, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. error"]
    #[doc = "   3. exit"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener7(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener7(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Worker, event: &JsValue, args: &Array) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit2(this: &Worker, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit3(this: &Worker, event: &JsValue, error: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit4(this: &Worker, event: &JsValue, code: f64, signal: &str) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit5(this: &Worker, event: &JsValue, address: &crate::cluster::Address) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit5(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit6(this: &Worker, event: &JsValue, message: &JsValue, handle: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit6(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit7(this: &Worker, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit7(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Worker, event: &str, listener: &JsValue) -> Worker;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on5(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on6(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on6(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on7(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on7(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Worker, event: &str, listener: &JsValue) -> Worker;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once5(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once6(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once6(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once7(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once7(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &Worker, event: &str, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener5(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener6(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener6(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener7(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener7(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &Worker, event: &str, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener5(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener6(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener6(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener7(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener7(this: &Worker, value: &Function);
    pub type Cluster;
    # [ wasm_bindgen ( method , getter , js_name = Worker ) ]
    pub fn worker(this: &Cluster) -> crate::cluster::Worker;
    # [ wasm_bindgen ( method , setter , js_name = Worker ) ]
    pub fn set_worker(this: &Cluster, value: &crate::cluster::Worker);
    #[wasm_bindgen(method)]
    pub fn disconnect(this: &Cluster, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_disconnect(this: &Cluster, value: &Function);
    #[wasm_bindgen(method)]
    pub fn fork(this: &Cluster, env: &JsValue) -> crate::cluster::Worker;
    #[wasm_bindgen(method, setter)]
    pub fn set_fork(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = isMaster ) ]
    pub fn is_master(this: &Cluster) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isMaster ) ]
    pub fn set_is_master(this: &Cluster, value: bool);
    # [ wasm_bindgen ( method , getter , js_name = isWorker ) ]
    pub fn is_worker(this: &Cluster) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isWorker ) ]
    pub fn set_is_worker(this: &Cluster, value: bool);
    #[wasm_bindgen(method, getter)]
    pub fn settings(this: &Cluster) -> crate::cluster::ClusterSettings;
    #[wasm_bindgen(method, setter)]
    pub fn set_settings(this: &Cluster, value: &crate::cluster::ClusterSettings);
    # [ wasm_bindgen ( method , js_name = setupMaster ) ]
    pub fn setup_master(this: &Cluster, settings: Option<&crate::cluster::ClusterSettings>);
    # [ wasm_bindgen ( method , setter , js_name = setupMaster ) ]
    pub fn set_setup_master(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = worker ) ]
    pub fn worker2(this: &Cluster) -> Option<crate::cluster::Worker>;
    # [ wasm_bindgen ( method , setter , js_name = worker ) ]
    pub fn set_worker2(this: &Cluster, value: Option<&crate::cluster::Worker>);
    #[wasm_bindgen(method, getter)]
    pub fn workers(this: &Cluster) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_workers(this: &Cluster, value: &JsValue);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Cluster, event: &str, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Cluster, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener2(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener2(this: &Cluster, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener3(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener3(this: &Cluster, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener4(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener4(this: &Cluster, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener5(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener5(this: &Cluster, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener6(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener6(this: &Cluster, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener7(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener7(this: &Cluster, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener8(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener8(this: &Cluster, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Cluster, event: &JsValue, args: &Array) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit2(this: &Cluster, event: &JsValue, worker: &crate::cluster::Worker) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit2(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit3(
        this: &Cluster,
        event: &JsValue,
        worker: &crate::cluster::Worker,
        code: f64,
        signal: &str,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit3(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit4(this: &Cluster, event: &JsValue, worker: &crate::cluster::Worker) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit4(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit5(
        this: &Cluster,
        event: &JsValue,
        worker: &crate::cluster::Worker,
        address: &crate::cluster::Address,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit5(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit6(
        this: &Cluster,
        event: &JsValue,
        worker: &crate::cluster::Worker,
        message: &JsValue,
        handle: &JsValue,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit6(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit7(this: &Cluster, event: &JsValue, worker: &crate::cluster::Worker) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit7(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit8(
        this: &Cluster,
        event: &JsValue,
        settings: &crate::cluster::ClusterSettings,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit8(this: &Cluster, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Cluster, event: &str, listener: &JsValue) -> Cluster;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on2(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on2(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on3(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on3(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on4(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on4(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on5(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on5(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on6(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on6(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on7(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on7(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on8(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on8(this: &Cluster, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Cluster, event: &str, listener: &JsValue) -> Cluster;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once2(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once2(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once3(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once3(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once4(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once4(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once5(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once5(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once6(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once6(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once7(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once7(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once8(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once8(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &Cluster, event: &str, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener2(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener2(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener3(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener3(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener4(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener4(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener5(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener5(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener6(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener6(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener7(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener7(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener8(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener8(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &Cluster, event: &str, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener2(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener2(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener3(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener3(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener4(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener4(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener5(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener5(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener6(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener6(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener7(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener7(this: &Cluster, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener8(this: &Cluster, event: &JsValue, listener: &JsValue) -> Cluster;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener8(this: &Cluster, value: &Function);
    #[wasm_bindgen()]
    pub fn disconnect(callback: &JsValue);
    #[wasm_bindgen()]
    pub fn fork(env: &JsValue) -> crate::cluster::Worker;
    #[wasm_bindgen(js_name = "isMaster")]
    pub static IS_MASTER: String;
    #[wasm_bindgen(js_name = "isWorker")]
    pub static IS_WORKER: String;
    #[wasm_bindgen(js_name = "settings")]
    pub static SETTINGS: String;
    # [ wasm_bindgen ( js_name = setupMaster ) ]
    pub fn setup_master(settings: Option<&crate::cluster::ClusterSettings>);
    #[wasm_bindgen(js_name = "worker")]
    pub static WORKER: String;
    #[wasm_bindgen(js_name = "workers")]
    pub static WORKERS: String;
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( js_name = addListener ) ]
    pub fn add_listener(event: &str, listener: &JsValue) -> crate::cluster::Cluster;
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( js_name = addListener ) ]
    pub fn add_listener2(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( js_name = addListener ) ]
    pub fn add_listener3(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( js_name = addListener ) ]
    pub fn add_listener4(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( js_name = addListener ) ]
    pub fn add_listener5(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( js_name = addListener ) ]
    pub fn add_listener6(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( js_name = addListener ) ]
    pub fn add_listener7(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    #[doc = "events.EventEmitter"]
    #[doc = "   1. disconnect"]
    #[doc = "   2. exit"]
    #[doc = "   3. fork"]
    #[doc = "   4. listening"]
    #[doc = "   5. message"]
    #[doc = "   6. online"]
    #[doc = "   7. setup"]
    # [ wasm_bindgen ( js_name = addListener ) ]
    pub fn add_listener8(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    #[wasm_bindgen()]
    pub fn emit(event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( js_name = emit ) ]
    pub fn emit2(event: &JsValue, worker: &crate::cluster::Worker) -> bool;
    # [ wasm_bindgen ( js_name = emit ) ]
    pub fn emit3(event: &JsValue, worker: &crate::cluster::Worker, code: f64, signal: &str)
    -> bool;
    # [ wasm_bindgen ( js_name = emit ) ]
    pub fn emit4(event: &JsValue, worker: &crate::cluster::Worker) -> bool;
    # [ wasm_bindgen ( js_name = emit ) ]
    pub fn emit5(
        event: &JsValue,
        worker: &crate::cluster::Worker,
        address: &crate::cluster::Address,
    ) -> bool;
    # [ wasm_bindgen ( js_name = emit ) ]
    pub fn emit6(
        event: &JsValue,
        worker: &crate::cluster::Worker,
        message: &JsValue,
        handle: &JsValue,
    ) -> bool;
    # [ wasm_bindgen ( js_name = emit ) ]
    pub fn emit7(event: &JsValue, worker: &crate::cluster::Worker) -> bool;
    # [ wasm_bindgen ( js_name = emit ) ]
    pub fn emit8(event: &JsValue, settings: &crate::cluster::ClusterSettings) -> bool;
    #[wasm_bindgen()]
    pub fn on(event: &str, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = on ) ]
    pub fn on2(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = on ) ]
    pub fn on3(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = on ) ]
    pub fn on4(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = on ) ]
    pub fn on5(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = on ) ]
    pub fn on6(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = on ) ]
    pub fn on7(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = on ) ]
    pub fn on8(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    #[wasm_bindgen()]
    pub fn once(event: &str, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = once ) ]
    pub fn once2(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = once ) ]
    pub fn once3(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = once ) ]
    pub fn once4(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = once ) ]
    pub fn once5(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = once ) ]
    pub fn once6(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = once ) ]
    pub fn once7(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = once ) ]
    pub fn once8(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = removeListener ) ]
    pub fn remove_listener(event: &str, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = removeAllListeners ) ]
    pub fn remove_all_listeners(event: Option<&str>) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = setMaxListeners ) ]
    pub fn set_max_listeners(n: f64) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = getMaxListeners ) ]
    pub fn get_max_listeners() -> f64;
    #[wasm_bindgen()]
    pub fn listeners(event: &str) -> Array;
    # [ wasm_bindgen ( js_name = listenerCount ) ]
    pub fn listener_count(type_: &str) -> f64;
    # [ wasm_bindgen ( js_name = prependListener ) ]
    pub fn prepend_listener(event: &str, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependListener ) ]
    pub fn prepend_listener2(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependListener ) ]
    pub fn prepend_listener3(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependListener ) ]
    pub fn prepend_listener4(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependListener ) ]
    pub fn prepend_listener5(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependListener ) ]
    pub fn prepend_listener6(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependListener ) ]
    pub fn prepend_listener7(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependListener ) ]
    pub fn prepend_listener8(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(event: &str, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependOnceListener ) ]
    pub fn prepend_once_listener2(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependOnceListener ) ]
    pub fn prepend_once_listener3(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependOnceListener ) ]
    pub fn prepend_once_listener4(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependOnceListener ) ]
    pub fn prepend_once_listener5(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependOnceListener ) ]
    pub fn prepend_once_listener6(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependOnceListener ) ]
    pub fn prepend_once_listener7(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = prependOnceListener ) ]
    pub fn prepend_once_listener8(event: &JsValue, listener: &JsValue) -> crate::cluster::Cluster;
    # [ wasm_bindgen ( js_name = eventNames ) ]
    pub fn event_names() -> Array;
}
