// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl Certificate {
    pub fn new() -> Certificate {
        JsCast::unchecked_into(Object::new())
    }
}
impl CipherNameAndProtocol {
    pub fn new() -> CipherNameAndProtocol {
        JsCast::unchecked_into(Object::new())
    }
}
impl CommonConnectionOptions {
    pub fn new() -> CommonConnectionOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ConnectionOptions {
    pub fn new() -> ConnectionOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl DetailedPeerCertificate {
    pub fn new() -> DetailedPeerCertificate {
        JsCast::unchecked_into(Object::new())
    }
}
impl EphemeralKeyInfo {
    pub fn new() -> EphemeralKeyInfo {
        JsCast::unchecked_into(Object::new())
    }
}
impl KeyObject {
    pub fn new() -> KeyObject {
        JsCast::unchecked_into(Object::new())
    }
}
impl PeerCertificate {
    pub fn new() -> PeerCertificate {
        JsCast::unchecked_into(Object::new())
    }
}
impl PxfObject {
    pub fn new() -> PxfObject {
        JsCast::unchecked_into(Object::new())
    }
}
impl SecureContext {
    pub fn new() -> SecureContext {
        JsCast::unchecked_into(Object::new())
    }
}
impl SecureContextOptions {
    pub fn new() -> SecureContextOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl SecurePair {
    pub fn new() -> SecurePair {
        JsCast::unchecked_into(Object::new())
    }
}
impl Server {
    pub fn new() -> Server {
        JsCast::unchecked_into(Object::new())
    }
}
impl TLSSocket {
    pub fn new() -> TLSSocket {
        JsCast::unchecked_into(Object::new())
    }
}
impl TLSSocketOptions {
    pub fn new() -> TLSSocketOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl TlsOptions {
    pub fn new() -> TlsOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<crate::tls::CommonConnectionOptions> for crate::tls::ConnectionOptions {
    fn as_ref(&self) -> &crate::tls::CommonConnectionOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::ConnectionOptions> for crate::tls::CommonConnectionOptions {
    fn from(child: crate::tls::ConnectionOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::tls::SecureContextOptions> for crate::tls::ConnectionOptions {
    fn as_ref(&self) -> &crate::tls::SecureContextOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::ConnectionOptions> for crate::tls::SecureContextOptions {
    fn from(child: crate::tls::ConnectionOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::tls::PeerCertificate> for crate::tls::DetailedPeerCertificate {
    fn as_ref(&self) -> &crate::tls::PeerCertificate {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::DetailedPeerCertificate> for crate::tls::PeerCertificate {
    fn from(child: crate::tls::DetailedPeerCertificate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::tls::Server {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::Server> for crate::node_js::EventEmitter {
    fn from(child: crate::tls::Server) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::net::Server> for crate::tls::Server {
    fn as_ref(&self) -> &crate::net::Server {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::Server> for crate::net::Server {
    fn from(child: crate::tls::Server) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::tls::TLSSocket {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::TLSSocket> for crate::node_js::EventEmitter {
    fn from(child: crate::tls::TLSSocket) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::tls::TLSSocket {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::TLSSocket> for crate::node_js::ReadableStream {
    fn from(child: crate::tls::TLSSocket) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::tls::TLSSocket {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::TLSSocket> for crate::node_js::WritableStream {
    fn from(child: crate::tls::TLSSocket) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::net::Socket> for crate::tls::TLSSocket {
    fn as_ref(&self) -> &crate::net::Socket {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::TLSSocket> for crate::net::Socket {
    fn from(child: crate::tls::TLSSocket) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::tls::CommonConnectionOptions> for crate::tls::TLSSocketOptions {
    fn as_ref(&self) -> &crate::tls::CommonConnectionOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::TLSSocketOptions> for crate::tls::CommonConnectionOptions {
    fn from(child: crate::tls::TLSSocketOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::tls::SecureContextOptions> for crate::tls::TLSSocketOptions {
    fn as_ref(&self) -> &crate::tls::SecureContextOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::TLSSocketOptions> for crate::tls::SecureContextOptions {
    fn from(child: crate::tls::TLSSocketOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::tls::CommonConnectionOptions> for crate::tls::TlsOptions {
    fn as_ref(&self) -> &crate::tls::CommonConnectionOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::TlsOptions> for crate::tls::CommonConnectionOptions {
    fn from(child: crate::tls::TlsOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::tls::SecureContextOptions> for crate::tls::TlsOptions {
    fn as_ref(&self) -> &crate::tls::SecureContextOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::tls::TlsOptions> for crate::tls::SecureContextOptions {
    fn from(child: crate::tls::TlsOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
