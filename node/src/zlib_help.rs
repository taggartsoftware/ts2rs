// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl BrotliCompress {
    pub fn new() -> BrotliCompress {
        JsCast::unchecked_into(Object::new())
    }
}
impl BrotliDecompress {
    pub fn new() -> BrotliDecompress {
        JsCast::unchecked_into(Object::new())
    }
}
impl BrotliOptions {
    pub fn new() -> BrotliOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Deflate {
    pub fn new() -> Deflate {
        JsCast::unchecked_into(Object::new())
    }
}
impl DeflateRaw {
    pub fn new() -> DeflateRaw {
        JsCast::unchecked_into(Object::new())
    }
}
impl Gunzip {
    pub fn new() -> Gunzip {
        JsCast::unchecked_into(Object::new())
    }
}
impl Gzip {
    pub fn new() -> Gzip {
        JsCast::unchecked_into(Object::new())
    }
}
impl Inflate {
    pub fn new() -> Inflate {
        JsCast::unchecked_into(Object::new())
    }
}
impl InflateRaw {
    pub fn new() -> InflateRaw {
        JsCast::unchecked_into(Object::new())
    }
}
impl Unzip {
    pub fn new() -> Unzip {
        JsCast::unchecked_into(Object::new())
    }
}
impl Zlib {
    pub fn new() -> Zlib {
        JsCast::unchecked_into(Object::new())
    }
}
impl ZlibOptions {
    pub fn new() -> ZlibOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ZlibParams {
    pub fn new() -> ZlibParams {
        JsCast::unchecked_into(Object::new())
    }
}
impl ZlibReset {
    pub fn new() -> ZlibReset {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::zlib::BrotliCompress {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::BrotliCompress> for crate::node_js::EventEmitter {
    fn from(child: crate::zlib::BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::zlib::BrotliCompress {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::BrotliCompress> for crate::node_js::ReadableStream {
    fn from(child: crate::zlib::BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::zlib::BrotliCompress {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::BrotliCompress> for crate::node_js::WritableStream {
    fn from(child: crate::zlib::BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::Zlib> for crate::zlib::BrotliCompress {
    fn as_ref(&self) -> &crate::zlib::Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::BrotliCompress> for crate::zlib::Zlib {
    fn from(child: crate::zlib::BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::zlib::BrotliDecompress {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::BrotliDecompress> for crate::node_js::EventEmitter {
    fn from(child: crate::zlib::BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::zlib::BrotliDecompress {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::BrotliDecompress> for crate::node_js::ReadableStream {
    fn from(child: crate::zlib::BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::zlib::BrotliDecompress {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::BrotliDecompress> for crate::node_js::WritableStream {
    fn from(child: crate::zlib::BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::Zlib> for crate::zlib::BrotliDecompress {
    fn as_ref(&self) -> &crate::zlib::Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::BrotliDecompress> for crate::zlib::Zlib {
    fn from(child: crate::zlib::BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::zlib::Deflate {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Deflate> for crate::node_js::EventEmitter {
    fn from(child: crate::zlib::Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::zlib::Deflate {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Deflate> for crate::node_js::ReadableStream {
    fn from(child: crate::zlib::Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::zlib::Deflate {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Deflate> for crate::node_js::WritableStream {
    fn from(child: crate::zlib::Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::Zlib> for crate::zlib::Deflate {
    fn as_ref(&self) -> &crate::zlib::Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Deflate> for crate::zlib::Zlib {
    fn from(child: crate::zlib::Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::ZlibParams> for crate::zlib::Deflate {
    fn as_ref(&self) -> &crate::zlib::ZlibParams {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Deflate> for crate::zlib::ZlibParams {
    fn from(child: crate::zlib::Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::ZlibReset> for crate::zlib::Deflate {
    fn as_ref(&self) -> &crate::zlib::ZlibReset {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Deflate> for crate::zlib::ZlibReset {
    fn from(child: crate::zlib::Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::zlib::DeflateRaw {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::DeflateRaw> for crate::node_js::EventEmitter {
    fn from(child: crate::zlib::DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::zlib::DeflateRaw {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::DeflateRaw> for crate::node_js::ReadableStream {
    fn from(child: crate::zlib::DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::zlib::DeflateRaw {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::DeflateRaw> for crate::node_js::WritableStream {
    fn from(child: crate::zlib::DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::Zlib> for crate::zlib::DeflateRaw {
    fn as_ref(&self) -> &crate::zlib::Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::DeflateRaw> for crate::zlib::Zlib {
    fn from(child: crate::zlib::DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::ZlibParams> for crate::zlib::DeflateRaw {
    fn as_ref(&self) -> &crate::zlib::ZlibParams {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::DeflateRaw> for crate::zlib::ZlibParams {
    fn from(child: crate::zlib::DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::ZlibReset> for crate::zlib::DeflateRaw {
    fn as_ref(&self) -> &crate::zlib::ZlibReset {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::DeflateRaw> for crate::zlib::ZlibReset {
    fn from(child: crate::zlib::DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::zlib::Gunzip {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Gunzip> for crate::node_js::EventEmitter {
    fn from(child: crate::zlib::Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::zlib::Gunzip {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Gunzip> for crate::node_js::ReadableStream {
    fn from(child: crate::zlib::Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::zlib::Gunzip {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Gunzip> for crate::node_js::WritableStream {
    fn from(child: crate::zlib::Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::Zlib> for crate::zlib::Gunzip {
    fn as_ref(&self) -> &crate::zlib::Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Gunzip> for crate::zlib::Zlib {
    fn from(child: crate::zlib::Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::zlib::Gzip {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Gzip> for crate::node_js::EventEmitter {
    fn from(child: crate::zlib::Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::zlib::Gzip {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Gzip> for crate::node_js::ReadableStream {
    fn from(child: crate::zlib::Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::zlib::Gzip {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Gzip> for crate::node_js::WritableStream {
    fn from(child: crate::zlib::Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::Zlib> for crate::zlib::Gzip {
    fn as_ref(&self) -> &crate::zlib::Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Gzip> for crate::zlib::Zlib {
    fn from(child: crate::zlib::Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::zlib::Inflate {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Inflate> for crate::node_js::EventEmitter {
    fn from(child: crate::zlib::Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::zlib::Inflate {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Inflate> for crate::node_js::ReadableStream {
    fn from(child: crate::zlib::Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::zlib::Inflate {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Inflate> for crate::node_js::WritableStream {
    fn from(child: crate::zlib::Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::Zlib> for crate::zlib::Inflate {
    fn as_ref(&self) -> &crate::zlib::Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Inflate> for crate::zlib::Zlib {
    fn from(child: crate::zlib::Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::ZlibReset> for crate::zlib::Inflate {
    fn as_ref(&self) -> &crate::zlib::ZlibReset {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Inflate> for crate::zlib::ZlibReset {
    fn from(child: crate::zlib::Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::zlib::InflateRaw {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::InflateRaw> for crate::node_js::EventEmitter {
    fn from(child: crate::zlib::InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::zlib::InflateRaw {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::InflateRaw> for crate::node_js::ReadableStream {
    fn from(child: crate::zlib::InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::zlib::InflateRaw {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::InflateRaw> for crate::node_js::WritableStream {
    fn from(child: crate::zlib::InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::Zlib> for crate::zlib::InflateRaw {
    fn as_ref(&self) -> &crate::zlib::Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::InflateRaw> for crate::zlib::Zlib {
    fn from(child: crate::zlib::InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::ZlibReset> for crate::zlib::InflateRaw {
    fn as_ref(&self) -> &crate::zlib::ZlibReset {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::InflateRaw> for crate::zlib::ZlibReset {
    fn from(child: crate::zlib::InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::zlib::Unzip {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Unzip> for crate::node_js::EventEmitter {
    fn from(child: crate::zlib::Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::zlib::Unzip {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Unzip> for crate::node_js::ReadableStream {
    fn from(child: crate::zlib::Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::zlib::Unzip {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Unzip> for crate::node_js::WritableStream {
    fn from(child: crate::zlib::Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::zlib::Zlib> for crate::zlib::Unzip {
    fn as_ref(&self) -> &crate::zlib::Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::zlib::Unzip> for crate::zlib::Zlib {
    fn from(child: crate::zlib::Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
