// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl BrotliCompress {
    pub fn new() -> BrotliCompress {
        JsCast::unchecked_into(Object::new())
    }
}
impl BrotliDecompress {
    pub fn new() -> BrotliDecompress {
        JsCast::unchecked_into(Object::new())
    }
}
impl BrotliOptions {
    pub fn new() -> BrotliOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Deflate {
    pub fn new() -> Deflate {
        JsCast::unchecked_into(Object::new())
    }
}
impl DeflateRaw {
    pub fn new() -> DeflateRaw {
        JsCast::unchecked_into(Object::new())
    }
}
impl Gunzip {
    pub fn new() -> Gunzip {
        JsCast::unchecked_into(Object::new())
    }
}
impl Gzip {
    pub fn new() -> Gzip {
        JsCast::unchecked_into(Object::new())
    }
}
impl Inflate {
    pub fn new() -> Inflate {
        JsCast::unchecked_into(Object::new())
    }
}
impl InflateRaw {
    pub fn new() -> InflateRaw {
        JsCast::unchecked_into(Object::new())
    }
}
impl Unzip {
    pub fn new() -> Unzip {
        JsCast::unchecked_into(Object::new())
    }
}
impl Zlib {
    pub fn new() -> Zlib {
        JsCast::unchecked_into(Object::new())
    }
}
impl ZlibOptions {
    pub fn new() -> ZlibOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ZlibParams {
    pub fn new() -> ZlibParams {
        JsCast::unchecked_into(Object::new())
    }
}
impl ZlibReset {
    pub fn new() -> ZlibReset {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<Duplex> for BrotliCompress {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliCompress> for Duplex {
    fn from(child: BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for BrotliCompress {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliCompress> for EventEmitter {
    fn from(child: BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for BrotliCompress {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliCompress> for node_js::EventEmitter {
    fn from(child: BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for BrotliCompress {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliCompress> for node_js::ReadableStream {
    fn from(child: BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for BrotliCompress {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliCompress> for node_js::WritableStream {
    fn from(child: BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for BrotliCompress {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliCompress> for Readable {
    fn from(child: BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for BrotliCompress {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliCompress> for Stream {
    fn from(child: BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for BrotliCompress {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliCompress> for Writable {
    fn from(child: BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Zlib> for BrotliCompress {
    fn as_ref(&self) -> &Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliCompress> for Zlib {
    fn from(child: BrotliCompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for BrotliDecompress {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliDecompress> for Duplex {
    fn from(child: BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for BrotliDecompress {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliDecompress> for EventEmitter {
    fn from(child: BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for BrotliDecompress {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliDecompress> for node_js::EventEmitter {
    fn from(child: BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for BrotliDecompress {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliDecompress> for node_js::ReadableStream {
    fn from(child: BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for BrotliDecompress {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliDecompress> for node_js::WritableStream {
    fn from(child: BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for BrotliDecompress {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliDecompress> for Readable {
    fn from(child: BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for BrotliDecompress {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliDecompress> for Stream {
    fn from(child: BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for BrotliDecompress {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliDecompress> for Writable {
    fn from(child: BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Zlib> for BrotliDecompress {
    fn as_ref(&self) -> &Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<BrotliDecompress> for Zlib {
    fn from(child: BrotliDecompress) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for Deflate {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<Deflate> for Duplex {
    fn from(child: Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Deflate {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Deflate> for EventEmitter {
    fn from(child: Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Deflate {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Deflate> for node_js::EventEmitter {
    fn from(child: Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Deflate {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Deflate> for node_js::ReadableStream {
    fn from(child: Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Deflate {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Deflate> for node_js::WritableStream {
    fn from(child: Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for Deflate {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Deflate> for Readable {
    fn from(child: Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Deflate {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Deflate> for Stream {
    fn from(child: Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for Deflate {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Deflate> for Writable {
    fn from(child: Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Zlib> for Deflate {
    fn as_ref(&self) -> &Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<Deflate> for Zlib {
    fn from(child: Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ZlibParams> for Deflate {
    fn as_ref(&self) -> &ZlibParams {
        JsCast::unchecked_ref(self)
    }
}
impl From<Deflate> for ZlibParams {
    fn from(child: Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ZlibReset> for Deflate {
    fn as_ref(&self) -> &ZlibReset {
        JsCast::unchecked_ref(self)
    }
}
impl From<Deflate> for ZlibReset {
    fn from(child: Deflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for DeflateRaw {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<DeflateRaw> for Duplex {
    fn from(child: DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for DeflateRaw {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<DeflateRaw> for EventEmitter {
    fn from(child: DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for DeflateRaw {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<DeflateRaw> for node_js::EventEmitter {
    fn from(child: DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for DeflateRaw {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<DeflateRaw> for node_js::ReadableStream {
    fn from(child: DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for DeflateRaw {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<DeflateRaw> for node_js::WritableStream {
    fn from(child: DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for DeflateRaw {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<DeflateRaw> for Readable {
    fn from(child: DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for DeflateRaw {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<DeflateRaw> for Stream {
    fn from(child: DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for DeflateRaw {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<DeflateRaw> for Writable {
    fn from(child: DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Zlib> for DeflateRaw {
    fn as_ref(&self) -> &Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<DeflateRaw> for Zlib {
    fn from(child: DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ZlibParams> for DeflateRaw {
    fn as_ref(&self) -> &ZlibParams {
        JsCast::unchecked_ref(self)
    }
}
impl From<DeflateRaw> for ZlibParams {
    fn from(child: DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ZlibReset> for DeflateRaw {
    fn as_ref(&self) -> &ZlibReset {
        JsCast::unchecked_ref(self)
    }
}
impl From<DeflateRaw> for ZlibReset {
    fn from(child: DeflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for Gunzip {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gunzip> for Duplex {
    fn from(child: Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Gunzip {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gunzip> for EventEmitter {
    fn from(child: Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Gunzip {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gunzip> for node_js::EventEmitter {
    fn from(child: Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Gunzip {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gunzip> for node_js::ReadableStream {
    fn from(child: Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Gunzip {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gunzip> for node_js::WritableStream {
    fn from(child: Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for Gunzip {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gunzip> for Readable {
    fn from(child: Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Gunzip {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gunzip> for Stream {
    fn from(child: Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for Gunzip {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gunzip> for Writable {
    fn from(child: Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Zlib> for Gunzip {
    fn as_ref(&self) -> &Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gunzip> for Zlib {
    fn from(child: Gunzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for Gzip {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gzip> for Duplex {
    fn from(child: Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Gzip {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gzip> for EventEmitter {
    fn from(child: Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Gzip {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gzip> for node_js::EventEmitter {
    fn from(child: Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Gzip {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gzip> for node_js::ReadableStream {
    fn from(child: Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Gzip {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gzip> for node_js::WritableStream {
    fn from(child: Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for Gzip {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gzip> for Readable {
    fn from(child: Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Gzip {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gzip> for Stream {
    fn from(child: Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for Gzip {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gzip> for Writable {
    fn from(child: Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Zlib> for Gzip {
    fn as_ref(&self) -> &Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<Gzip> for Zlib {
    fn from(child: Gzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for Inflate {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<Inflate> for Duplex {
    fn from(child: Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Inflate {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Inflate> for EventEmitter {
    fn from(child: Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Inflate {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Inflate> for node_js::EventEmitter {
    fn from(child: Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Inflate {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Inflate> for node_js::ReadableStream {
    fn from(child: Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Inflate {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Inflate> for node_js::WritableStream {
    fn from(child: Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for Inflate {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Inflate> for Readable {
    fn from(child: Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Inflate {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Inflate> for Stream {
    fn from(child: Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for Inflate {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Inflate> for Writable {
    fn from(child: Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Zlib> for Inflate {
    fn as_ref(&self) -> &Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<Inflate> for Zlib {
    fn from(child: Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ZlibReset> for Inflate {
    fn as_ref(&self) -> &ZlibReset {
        JsCast::unchecked_ref(self)
    }
}
impl From<Inflate> for ZlibReset {
    fn from(child: Inflate) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for InflateRaw {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<InflateRaw> for Duplex {
    fn from(child: InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for InflateRaw {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<InflateRaw> for EventEmitter {
    fn from(child: InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for InflateRaw {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<InflateRaw> for node_js::EventEmitter {
    fn from(child: InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for InflateRaw {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<InflateRaw> for node_js::ReadableStream {
    fn from(child: InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for InflateRaw {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<InflateRaw> for node_js::WritableStream {
    fn from(child: InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for InflateRaw {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<InflateRaw> for Readable {
    fn from(child: InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for InflateRaw {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<InflateRaw> for Stream {
    fn from(child: InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for InflateRaw {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<InflateRaw> for Writable {
    fn from(child: InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Zlib> for InflateRaw {
    fn as_ref(&self) -> &Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<InflateRaw> for Zlib {
    fn from(child: InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ZlibReset> for InflateRaw {
    fn as_ref(&self) -> &ZlibReset {
        JsCast::unchecked_ref(self)
    }
}
impl From<InflateRaw> for ZlibReset {
    fn from(child: InflateRaw) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for Unzip {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<Unzip> for Duplex {
    fn from(child: Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Unzip {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Unzip> for EventEmitter {
    fn from(child: Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Unzip {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Unzip> for node_js::EventEmitter {
    fn from(child: Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Unzip {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Unzip> for node_js::ReadableStream {
    fn from(child: Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Unzip {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Unzip> for node_js::WritableStream {
    fn from(child: Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for Unzip {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Unzip> for Readable {
    fn from(child: Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Unzip {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Unzip> for Stream {
    fn from(child: Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for Unzip {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Unzip> for Writable {
    fn from(child: Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Zlib> for Unzip {
    fn as_ref(&self) -> &Zlib {
        JsCast::unchecked_ref(self)
    }
}
impl From<Unzip> for Zlib {
    fn from(child: Unzip) -> Self {
        JsCast::unchecked_into(child)
    }
}
