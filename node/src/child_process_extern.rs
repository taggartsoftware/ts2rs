// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "child_process")]
extern "C" {
    pub type ChildProcess;
    #[wasm_bindgen(method, getter)]
    pub fn stdin(this: &ChildProcess) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdin(this: &ChildProcess, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn stdout(this: &ChildProcess) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdout(this: &ChildProcess, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn stderr(this: &ChildProcess) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_stderr(this: &ChildProcess, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn channel(this: &ChildProcess) -> JsValue;
    #[wasm_bindgen(method, getter)]
    pub fn stdio(this: &ChildProcess) -> JsValue;
    #[wasm_bindgen(method, getter)]
    pub fn killed(this: &ChildProcess) -> bool;
    #[wasm_bindgen(method, getter)]
    pub fn pid(this: &ChildProcess) -> f64;
    #[wasm_bindgen(method, getter)]
    pub fn connected(this: &ChildProcess) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = exitCode ) ]
    pub fn exit_code(this: &ChildProcess) -> JsValue;
    # [ wasm_bindgen ( method , getter , js_name = signalCode ) ]
    pub fn signal_code(this: &ChildProcess) -> JsValue;
    #[wasm_bindgen(method, getter)]
    pub fn spawnargs(this: &ChildProcess) -> Array;
    #[wasm_bindgen(method, getter)]
    pub fn spawnfile(this: &ChildProcess) -> String;
    #[wasm_bindgen(method)]
    pub fn kill(this: &ChildProcess, signal: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_kill(this: &ChildProcess, value: &Function);
    #[wasm_bindgen(method)]
    pub fn send(this: &ChildProcess, message: &JsValue, callback: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_send(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = send ) ]
    pub fn send2(
        this: &ChildProcess,
        message: &JsValue,
        send_handle: &JsValue,
        callback: &JsValue,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = send ) ]
    pub fn set_send2(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = send ) ]
    pub fn send3(
        this: &ChildProcess,
        message: &JsValue,
        send_handle: &JsValue,
        options: Option<&MessageOptions>,
        callback: &JsValue,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = send ) ]
    pub fn set_send3(this: &ChildProcess, value: &Function);
    #[wasm_bindgen(method)]
    pub fn disconnect(this: &ChildProcess);
    #[wasm_bindgen(method, setter)]
    pub fn set_disconnect(this: &ChildProcess, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unref(this: &ChildProcess);
    #[wasm_bindgen(method, setter)]
    pub fn set_unref(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = ref ) ]
    pub fn ref_(this: &ChildProcess);
    # [ wasm_bindgen ( method , setter , js_name = ref ) ]
    pub fn set_ref_(this: &ChildProcess, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close"]
    #[doc = "2. disconnect"]
    #[doc = "3. error"]
    #[doc = "4. exit"]
    #[doc = "5. message"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &ChildProcess, event: &str, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &ChildProcess, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close"]
    #[doc = "2. disconnect"]
    #[doc = "3. error"]
    #[doc = "4. exit"]
    #[doc = "5. message"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener2(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener2(this: &ChildProcess, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close"]
    #[doc = "2. disconnect"]
    #[doc = "3. error"]
    #[doc = "4. exit"]
    #[doc = "5. message"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener3(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener3(this: &ChildProcess, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close"]
    #[doc = "2. disconnect"]
    #[doc = "3. error"]
    #[doc = "4. exit"]
    #[doc = "5. message"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener4(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener4(this: &ChildProcess, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close"]
    #[doc = "2. disconnect"]
    #[doc = "3. error"]
    #[doc = "4. exit"]
    #[doc = "5. message"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener5(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener5(this: &ChildProcess, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close"]
    #[doc = "2. disconnect"]
    #[doc = "3. error"]
    #[doc = "4. exit"]
    #[doc = "5. message"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener6(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener6(this: &ChildProcess, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &ChildProcess, event: &JsValue, args: &Array) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit2(
        this: &ChildProcess,
        event: &JsValue,
        code: f64,
        signal: &node_js::Signals,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit2(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit3(this: &ChildProcess, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit3(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit4(this: &ChildProcess, event: &JsValue, err: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit4(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit5(this: &ChildProcess, event: &JsValue, code: &JsValue, signal: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit5(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit6(
        this: &ChildProcess,
        event: &JsValue,
        message: &JsValue,
        send_handle: &JsValue,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit6(this: &ChildProcess, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &ChildProcess, event: &str, listener: &JsValue) -> ChildProcess;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on2(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on2(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on3(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on3(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on4(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on4(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on5(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on5(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on6(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on6(this: &ChildProcess, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &ChildProcess, event: &str, listener: &JsValue) -> ChildProcess;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once2(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once2(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once3(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once3(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once4(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once4(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once5(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once5(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once6(this: &ChildProcess, event: &JsValue, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once6(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &ChildProcess, event: &str, listener: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener2(
        this: &ChildProcess,
        event: &JsValue,
        listener: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener2(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener3(
        this: &ChildProcess,
        event: &JsValue,
        listener: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener3(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener4(
        this: &ChildProcess,
        event: &JsValue,
        listener: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener4(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener5(
        this: &ChildProcess,
        event: &JsValue,
        listener: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener5(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener6(
        this: &ChildProcess,
        event: &JsValue,
        listener: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener6(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &ChildProcess,
        event: &str,
        listener: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener2(
        this: &ChildProcess,
        event: &JsValue,
        listener: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener2(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener3(
        this: &ChildProcess,
        event: &JsValue,
        listener: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener3(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener4(
        this: &ChildProcess,
        event: &JsValue,
        listener: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener4(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener5(
        this: &ChildProcess,
        event: &JsValue,
        listener: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener5(this: &ChildProcess, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener6(
        this: &ChildProcess,
        event: &JsValue,
        listener: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener6(this: &ChildProcess, value: &Function);
    pub type ChildProcessWithoutNullStreams;
    #[wasm_bindgen(method, getter)]
    pub fn stdin(this: &ChildProcessWithoutNullStreams) -> crate::stream::Writable;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdin(this: &ChildProcessWithoutNullStreams, value: &crate::stream::Writable);
    #[wasm_bindgen(method, getter)]
    pub fn stdout(this: &ChildProcessWithoutNullStreams) -> crate::stream::Readable;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdout(this: &ChildProcessWithoutNullStreams, value: &crate::stream::Readable);
    #[wasm_bindgen(method, getter)]
    pub fn stderr(this: &ChildProcessWithoutNullStreams) -> crate::stream::Readable;
    #[wasm_bindgen(method, setter)]
    pub fn set_stderr(this: &ChildProcessWithoutNullStreams, value: &crate::stream::Readable);
    #[wasm_bindgen(method, getter)]
    pub fn stdio(this: &ChildProcessWithoutNullStreams) -> JsValue;
    pub type ChildProcessByStdio;
    #[wasm_bindgen(method, getter)]
    pub fn stdin(this: &ChildProcessByStdio) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdin(this: &ChildProcessByStdio, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn stdout(this: &ChildProcessByStdio) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdout(this: &ChildProcessByStdio, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn stderr(this: &ChildProcessByStdio) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_stderr(this: &ChildProcessByStdio, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn stdio(this: &ChildProcessByStdio) -> JsValue;
    pub type MessageOptions;
    # [ wasm_bindgen ( method , getter , js_name = keepOpen ) ]
    pub fn keep_open(this: &MessageOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = keepOpen ) ]
    pub fn set_keep_open(this: &MessageOptions, value: Option<bool>);
    pub type StdioOptions;
    pub type ProcessEnvOptions;
    #[wasm_bindgen(method, getter)]
    pub fn uid(this: &ProcessEnvOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_uid(this: &ProcessEnvOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn gid(this: &ProcessEnvOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_gid(this: &ProcessEnvOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn cwd(this: &ProcessEnvOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_cwd(this: &ProcessEnvOptions, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn env(this: &ProcessEnvOptions) -> Option<node_js::ProcessEnv>;
    #[wasm_bindgen(method, setter)]
    pub fn set_env(this: &ProcessEnvOptions, value: Option<&node_js::ProcessEnv>);
    pub type CommonOptions;
    # [ wasm_bindgen ( method , getter , js_name = windowsHide ) ]
    pub fn windows_hide(this: &CommonOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = windowsHide ) ]
    pub fn set_windows_hide(this: &CommonOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn timeout(this: &CommonOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_timeout(this: &CommonOptions, value: Option<f64>);
    pub type SpawnOptions;
    #[wasm_bindgen(method, getter)]
    pub fn argv0(this: &SpawnOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_argv0(this: &SpawnOptions, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn stdio(this: &SpawnOptions) -> Option<StdioOptions>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdio(this: &SpawnOptions, value: Option<&StdioOptions>);
    #[wasm_bindgen(method, getter)]
    pub fn detached(this: &SpawnOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_detached(this: &SpawnOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn shell(this: &SpawnOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_shell(this: &SpawnOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = windowsVerbatimArguments ) ]
    pub fn windows_verbatim_arguments(this: &SpawnOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = windowsVerbatimArguments ) ]
    pub fn set_windows_verbatim_arguments(this: &SpawnOptions, value: Option<bool>);
    pub type SpawnOptionsWithoutStdio;
    #[wasm_bindgen(method, getter)]
    pub fn stdio(this: &SpawnOptionsWithoutStdio) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdio(this: &SpawnOptionsWithoutStdio, value: &JsValue);
    pub type StdioNull;
    pub type StdioPipe;
    pub type SpawnOptionsWithStdioTuple;
    #[wasm_bindgen(method, getter)]
    pub fn stdio(this: &SpawnOptionsWithStdioTuple) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdio(this: &SpawnOptionsWithStdioTuple, value: &JsValue);
    #[wasm_bindgen()]
    pub fn spawn(
        command: &str,
        options: Option<&SpawnOptionsWithoutStdio>,
    ) -> ChildProcessWithoutNullStreams;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn2(command: &str, options: &SpawnOptionsWithStdioTuple) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn3(command: &str, options: &SpawnOptionsWithStdioTuple) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn4(command: &str, options: &SpawnOptionsWithStdioTuple) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn5(command: &str, options: &SpawnOptionsWithStdioTuple) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn6(command: &str, options: &SpawnOptionsWithStdioTuple) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn7(command: &str, options: &SpawnOptionsWithStdioTuple) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn8(command: &str, options: &SpawnOptionsWithStdioTuple) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn9(command: &str, options: &SpawnOptionsWithStdioTuple) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn10(command: &str, options: &SpawnOptions) -> ChildProcess;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn11(
        command: &str,
        args: Option<&ReadonlyArray>,
        options: Option<&SpawnOptionsWithoutStdio>,
    ) -> ChildProcessWithoutNullStreams;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn12(
        command: &str,
        args: &ReadonlyArray,
        options: &SpawnOptionsWithStdioTuple,
    ) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn13(
        command: &str,
        args: &ReadonlyArray,
        options: &SpawnOptionsWithStdioTuple,
    ) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn14(
        command: &str,
        args: &ReadonlyArray,
        options: &SpawnOptionsWithStdioTuple,
    ) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn15(
        command: &str,
        args: &ReadonlyArray,
        options: &SpawnOptionsWithStdioTuple,
    ) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn16(
        command: &str,
        args: &ReadonlyArray,
        options: &SpawnOptionsWithStdioTuple,
    ) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn17(
        command: &str,
        args: &ReadonlyArray,
        options: &SpawnOptionsWithStdioTuple,
    ) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn18(
        command: &str,
        args: &ReadonlyArray,
        options: &SpawnOptionsWithStdioTuple,
    ) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn19(
        command: &str,
        args: &ReadonlyArray,
        options: &SpawnOptionsWithStdioTuple,
    ) -> ChildProcessByStdio;
    # [ wasm_bindgen ( js_name = spawn ) ]
    pub fn spawn20(command: &str, args: &ReadonlyArray, options: &SpawnOptions) -> ChildProcess;
    pub type ExecOptions;
    #[wasm_bindgen(method, getter)]
    pub fn shell(this: &ExecOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_shell(this: &ExecOptions, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = maxBuffer ) ]
    pub fn max_buffer(this: &ExecOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxBuffer ) ]
    pub fn set_max_buffer(this: &ExecOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = killSignal ) ]
    pub fn kill_signal(this: &ExecOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = killSignal ) ]
    pub fn set_kill_signal(this: &ExecOptions, value: &JsValue);
    pub type ExecOptionsWithStringEncoding;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ExecOptionsWithStringEncoding) -> BufferEncoding;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ExecOptionsWithStringEncoding, value: &BufferEncoding);
    pub type ExecOptionsWithBufferEncoding;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ExecOptionsWithBufferEncoding) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ExecOptionsWithBufferEncoding, value: &JsValue);
    pub type ExecException;
    #[wasm_bindgen(method, getter)]
    pub fn cmd(this: &ExecException) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_cmd(this: &ExecException, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn killed(this: &ExecException) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_killed(this: &ExecException, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn code(this: &ExecException) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_code(this: &ExecException, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn signal(this: &ExecException) -> Option<node_js::Signals>;
    #[wasm_bindgen(method, setter)]
    pub fn set_signal(this: &ExecException, value: Option<&node_js::Signals>);
    #[wasm_bindgen()]
    pub fn exec(command: &str, callback: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = exec ) ]
    pub fn exec2(command: &str, options: &JsValue, callback: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = exec ) ]
    pub fn exec3(command: &str, options: &JsValue, callback: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = exec ) ]
    pub fn exec4(command: &str, options: &JsValue, callback: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = exec ) ]
    pub fn exec5(command: &str, options: &ExecOptions, callback: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = exec ) ]
    pub fn exec6(command: &str, options: &JsValue, callback: &JsValue) -> ChildProcess;
    pub type PromiseWithChild;
    #[wasm_bindgen(method, getter)]
    pub fn child(this: &PromiseWithChild) -> ChildProcess;
    #[wasm_bindgen(method, setter)]
    pub fn set_child(this: &PromiseWithChild, value: &ChildProcess);
    pub type ExecFileOptions;
    # [ wasm_bindgen ( method , getter , js_name = maxBuffer ) ]
    pub fn max_buffer(this: &ExecFileOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxBuffer ) ]
    pub fn set_max_buffer(this: &ExecFileOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = killSignal ) ]
    pub fn kill_signal(this: &ExecFileOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = killSignal ) ]
    pub fn set_kill_signal(this: &ExecFileOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = windowsVerbatimArguments ) ]
    pub fn windows_verbatim_arguments(this: &ExecFileOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = windowsVerbatimArguments ) ]
    pub fn set_windows_verbatim_arguments(this: &ExecFileOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn shell(this: &ExecFileOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_shell(this: &ExecFileOptions, value: &JsValue);
    pub type ExecFileOptionsWithStringEncoding;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ExecFileOptionsWithStringEncoding) -> BufferEncoding;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ExecFileOptionsWithStringEncoding, value: &BufferEncoding);
    pub type ExecFileOptionsWithBufferEncoding;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ExecFileOptionsWithBufferEncoding) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ExecFileOptionsWithBufferEncoding, value: &JsValue);
    pub type ExecFileOptionsWithOtherEncoding;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ExecFileOptionsWithOtherEncoding) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ExecFileOptionsWithOtherEncoding, value: &str);
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file(file: &str) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file2(file: &str, options: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file3(file: &str, args: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file4(file: &str, args: &JsValue, options: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file5(file: &str, callback: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file6(file: &str, args: &JsValue, callback: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file7(
        file: &str,
        options: &ExecFileOptionsWithBufferEncoding,
        callback: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file8(
        file: &str,
        args: &JsValue,
        options: &ExecFileOptionsWithBufferEncoding,
        callback: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file9(
        file: &str,
        options: &ExecFileOptionsWithStringEncoding,
        callback: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file10(
        file: &str,
        args: &JsValue,
        options: &ExecFileOptionsWithStringEncoding,
        callback: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file11(
        file: &str,
        options: &ExecFileOptionsWithOtherEncoding,
        callback: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file12(
        file: &str,
        args: &JsValue,
        options: &ExecFileOptionsWithOtherEncoding,
        callback: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file13(file: &str, options: &ExecFileOptions, callback: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file14(
        file: &str,
        args: &JsValue,
        options: &ExecFileOptions,
        callback: &JsValue,
    ) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file15(file: &str, options: &JsValue, callback: &JsValue) -> ChildProcess;
    # [ wasm_bindgen ( js_name = execFile ) ]
    pub fn exec_file16(
        file: &str,
        args: &JsValue,
        options: &JsValue,
        callback: &JsValue,
    ) -> ChildProcess;
    pub type ForkOptions;
    # [ wasm_bindgen ( method , getter , js_name = execPath ) ]
    pub fn exec_path(this: &ForkOptions) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = execPath ) ]
    pub fn set_exec_path(this: &ForkOptions, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = execArgv ) ]
    pub fn exec_argv(this: &ForkOptions) -> Option<Array>;
    # [ wasm_bindgen ( method , setter , js_name = execArgv ) ]
    pub fn set_exec_argv(this: &ForkOptions, value: Option<&Array>);
    #[wasm_bindgen(method, getter)]
    pub fn silent(this: &ForkOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_silent(this: &ForkOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn stdio(this: &ForkOptions) -> Option<StdioOptions>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdio(this: &ForkOptions, value: Option<&StdioOptions>);
    #[wasm_bindgen(method, getter)]
    pub fn detached(this: &ForkOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_detached(this: &ForkOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = windowsVerbatimArguments ) ]
    pub fn windows_verbatim_arguments(this: &ForkOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = windowsVerbatimArguments ) ]
    pub fn set_windows_verbatim_arguments(this: &ForkOptions, value: Option<bool>);
    #[wasm_bindgen()]
    pub fn fork(
        module_path: &str,
        args: Option<&ReadonlyArray>,
        options: Option<&ForkOptions>,
    ) -> ChildProcess;
    pub type SpawnSyncOptions;
    #[wasm_bindgen(method, getter)]
    pub fn argv0(this: &SpawnSyncOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_argv0(this: &SpawnSyncOptions, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn input(this: &SpawnSyncOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_input(this: &SpawnSyncOptions, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn stdio(this: &SpawnSyncOptions) -> Option<StdioOptions>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdio(this: &SpawnSyncOptions, value: Option<&StdioOptions>);
    # [ wasm_bindgen ( method , getter , js_name = killSignal ) ]
    pub fn kill_signal(this: &SpawnSyncOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = killSignal ) ]
    pub fn set_kill_signal(this: &SpawnSyncOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = maxBuffer ) ]
    pub fn max_buffer(this: &SpawnSyncOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxBuffer ) ]
    pub fn set_max_buffer(this: &SpawnSyncOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &SpawnSyncOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &SpawnSyncOptions, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn shell(this: &SpawnSyncOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_shell(this: &SpawnSyncOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = windowsVerbatimArguments ) ]
    pub fn windows_verbatim_arguments(this: &SpawnSyncOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = windowsVerbatimArguments ) ]
    pub fn set_windows_verbatim_arguments(this: &SpawnSyncOptions, value: Option<bool>);
    pub type SpawnSyncOptionsWithStringEncoding;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &SpawnSyncOptionsWithStringEncoding) -> BufferEncoding;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &SpawnSyncOptionsWithStringEncoding, value: &BufferEncoding);
    pub type SpawnSyncOptionsWithBufferEncoding;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &SpawnSyncOptionsWithBufferEncoding) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &SpawnSyncOptionsWithBufferEncoding, value: &str);
    pub type SpawnSyncReturns;
    #[wasm_bindgen(method, getter)]
    pub fn pid(this: &SpawnSyncReturns) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_pid(this: &SpawnSyncReturns, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn output(this: &SpawnSyncReturns) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_output(this: &SpawnSyncReturns, value: &Array);
    #[wasm_bindgen(method, getter)]
    pub fn stdout(this: &SpawnSyncReturns) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdout(this: &SpawnSyncReturns, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn stderr(this: &SpawnSyncReturns) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_stderr(this: &SpawnSyncReturns, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn status(this: &SpawnSyncReturns) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_status(this: &SpawnSyncReturns, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn signal(this: &SpawnSyncReturns) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_signal(this: &SpawnSyncReturns, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn error(this: &SpawnSyncReturns) -> Option<Error>;
    #[wasm_bindgen(method, setter)]
    pub fn set_error(this: &SpawnSyncReturns, value: Option<&Error>);
    # [ wasm_bindgen ( js_name = spawnSync ) ]
    pub fn spawn_sync(command: &str) -> SpawnSyncReturns;
    # [ wasm_bindgen ( js_name = spawnSync ) ]
    pub fn spawn_sync2(
        command: &str,
        options: Option<&SpawnSyncOptionsWithStringEncoding>,
    ) -> SpawnSyncReturns;
    # [ wasm_bindgen ( js_name = spawnSync ) ]
    pub fn spawn_sync3(
        command: &str,
        options: Option<&SpawnSyncOptionsWithBufferEncoding>,
    ) -> SpawnSyncReturns;
    # [ wasm_bindgen ( js_name = spawnSync ) ]
    pub fn spawn_sync4(command: &str, options: Option<&SpawnSyncOptions>) -> SpawnSyncReturns;
    # [ wasm_bindgen ( js_name = spawnSync ) ]
    pub fn spawn_sync5(
        command: &str,
        args: Option<&ReadonlyArray>,
        options: Option<&SpawnSyncOptionsWithStringEncoding>,
    ) -> SpawnSyncReturns;
    # [ wasm_bindgen ( js_name = spawnSync ) ]
    pub fn spawn_sync6(
        command: &str,
        args: Option<&ReadonlyArray>,
        options: Option<&SpawnSyncOptionsWithBufferEncoding>,
    ) -> SpawnSyncReturns;
    # [ wasm_bindgen ( js_name = spawnSync ) ]
    pub fn spawn_sync7(
        command: &str,
        args: Option<&ReadonlyArray>,
        options: Option<&SpawnSyncOptions>,
    ) -> SpawnSyncReturns;
    pub type ExecSyncOptions;
    #[wasm_bindgen(method, getter)]
    pub fn input(this: &ExecSyncOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_input(this: &ExecSyncOptions, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn stdio(this: &ExecSyncOptions) -> Option<StdioOptions>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdio(this: &ExecSyncOptions, value: Option<&StdioOptions>);
    #[wasm_bindgen(method, getter)]
    pub fn shell(this: &ExecSyncOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_shell(this: &ExecSyncOptions, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = killSignal ) ]
    pub fn kill_signal(this: &ExecSyncOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = killSignal ) ]
    pub fn set_kill_signal(this: &ExecSyncOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = maxBuffer ) ]
    pub fn max_buffer(this: &ExecSyncOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxBuffer ) ]
    pub fn set_max_buffer(this: &ExecSyncOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ExecSyncOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ExecSyncOptions, value: Option<&str>);
    pub type ExecSyncOptionsWithStringEncoding;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ExecSyncOptionsWithStringEncoding) -> BufferEncoding;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ExecSyncOptionsWithStringEncoding, value: &BufferEncoding);
    pub type ExecSyncOptionsWithBufferEncoding;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ExecSyncOptionsWithBufferEncoding) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ExecSyncOptionsWithBufferEncoding, value: &str);
    # [ wasm_bindgen ( js_name = execSync ) ]
    pub fn exec_sync(command: &str) -> Buffer;
    # [ wasm_bindgen ( js_name = execSync ) ]
    pub fn exec_sync2(command: &str, options: Option<&ExecSyncOptionsWithStringEncoding>)
    -> String;
    # [ wasm_bindgen ( js_name = execSync ) ]
    pub fn exec_sync3(command: &str, options: Option<&ExecSyncOptionsWithBufferEncoding>)
    -> Buffer;
    # [ wasm_bindgen ( js_name = execSync ) ]
    pub fn exec_sync4(command: &str, options: Option<&ExecSyncOptions>) -> Buffer;
    pub type ExecFileSyncOptions;
    #[wasm_bindgen(method, getter)]
    pub fn input(this: &ExecFileSyncOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_input(this: &ExecFileSyncOptions, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn stdio(this: &ExecFileSyncOptions) -> Option<StdioOptions>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdio(this: &ExecFileSyncOptions, value: Option<&StdioOptions>);
    # [ wasm_bindgen ( method , getter , js_name = killSignal ) ]
    pub fn kill_signal(this: &ExecFileSyncOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = killSignal ) ]
    pub fn set_kill_signal(this: &ExecFileSyncOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = maxBuffer ) ]
    pub fn max_buffer(this: &ExecFileSyncOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxBuffer ) ]
    pub fn set_max_buffer(this: &ExecFileSyncOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ExecFileSyncOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ExecFileSyncOptions, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn shell(this: &ExecFileSyncOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_shell(this: &ExecFileSyncOptions, value: &JsValue);
    pub type ExecFileSyncOptionsWithStringEncoding;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ExecFileSyncOptionsWithStringEncoding) -> BufferEncoding;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ExecFileSyncOptionsWithStringEncoding, value: &BufferEncoding);
    pub type ExecFileSyncOptionsWithBufferEncoding;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ExecFileSyncOptionsWithBufferEncoding) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ExecFileSyncOptionsWithBufferEncoding, value: &str);
    # [ wasm_bindgen ( js_name = execFileSync ) ]
    pub fn exec_file_sync(command: &str) -> Buffer;
    # [ wasm_bindgen ( js_name = execFileSync ) ]
    pub fn exec_file_sync2(
        command: &str,
        options: Option<&ExecFileSyncOptionsWithStringEncoding>,
    ) -> String;
    # [ wasm_bindgen ( js_name = execFileSync ) ]
    pub fn exec_file_sync3(
        command: &str,
        options: Option<&ExecFileSyncOptionsWithBufferEncoding>,
    ) -> Buffer;
    # [ wasm_bindgen ( js_name = execFileSync ) ]
    pub fn exec_file_sync4(command: &str, options: Option<&ExecFileSyncOptions>) -> Buffer;
    # [ wasm_bindgen ( js_name = execFileSync ) ]
    pub fn exec_file_sync5(
        command: &str,
        args: Option<&ReadonlyArray>,
        options: Option<&ExecFileSyncOptionsWithStringEncoding>,
    ) -> String;
    # [ wasm_bindgen ( js_name = execFileSync ) ]
    pub fn exec_file_sync6(
        command: &str,
        args: Option<&ReadonlyArray>,
        options: Option<&ExecFileSyncOptionsWithBufferEncoding>,
    ) -> Buffer;
    # [ wasm_bindgen ( js_name = execFileSync ) ]
    pub fn exec_file_sync7(
        command: &str,
        args: Option<&ReadonlyArray>,
        options: Option<&ExecFileSyncOptions>,
    ) -> Buffer;
}
