// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl ChildProcess {
    pub fn new() -> ChildProcess {
        JsCast::unchecked_into(Object::new())
    }
}
impl ChildProcessByStdio {
    pub fn new() -> ChildProcessByStdio {
        JsCast::unchecked_into(Object::new())
    }
}
impl ChildProcessWithoutNullStreams {
    pub fn new() -> ChildProcessWithoutNullStreams {
        JsCast::unchecked_into(Object::new())
    }
}
impl CommonOptions {
    pub fn new() -> CommonOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecException {
    pub fn new() -> ExecException {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecFileOptions {
    pub fn new() -> ExecFileOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecFileOptionsWithBufferEncoding {
    pub fn new() -> ExecFileOptionsWithBufferEncoding {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecFileOptionsWithOtherEncoding {
    pub fn new() -> ExecFileOptionsWithOtherEncoding {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecFileOptionsWithStringEncoding {
    pub fn new() -> ExecFileOptionsWithStringEncoding {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecFileSyncOptions {
    pub fn new() -> ExecFileSyncOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecFileSyncOptionsWithBufferEncoding {
    pub fn new() -> ExecFileSyncOptionsWithBufferEncoding {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecFileSyncOptionsWithStringEncoding {
    pub fn new() -> ExecFileSyncOptionsWithStringEncoding {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecOptions {
    pub fn new() -> ExecOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecOptionsWithBufferEncoding {
    pub fn new() -> ExecOptionsWithBufferEncoding {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecOptionsWithStringEncoding {
    pub fn new() -> ExecOptionsWithStringEncoding {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecSyncOptions {
    pub fn new() -> ExecSyncOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecSyncOptionsWithBufferEncoding {
    pub fn new() -> ExecSyncOptionsWithBufferEncoding {
        JsCast::unchecked_into(Object::new())
    }
}
impl ExecSyncOptionsWithStringEncoding {
    pub fn new() -> ExecSyncOptionsWithStringEncoding {
        JsCast::unchecked_into(Object::new())
    }
}
impl ForkOptions {
    pub fn new() -> ForkOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl MessageOptions {
    pub fn new() -> MessageOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ProcessEnvOptions {
    pub fn new() -> ProcessEnvOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl PromiseWithChild {
    pub fn new() -> PromiseWithChild {
        JsCast::unchecked_into(Object::new())
    }
}
impl SpawnOptions {
    pub fn new() -> SpawnOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl SpawnOptionsWithStdioTuple {
    pub fn new() -> SpawnOptionsWithStdioTuple {
        JsCast::unchecked_into(Object::new())
    }
}
impl SpawnOptionsWithoutStdio {
    pub fn new() -> SpawnOptionsWithoutStdio {
        JsCast::unchecked_into(Object::new())
    }
}
impl SpawnSyncOptions {
    pub fn new() -> SpawnSyncOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl SpawnSyncOptionsWithBufferEncoding {
    pub fn new() -> SpawnSyncOptionsWithBufferEncoding {
        JsCast::unchecked_into(Object::new())
    }
}
impl SpawnSyncOptionsWithStringEncoding {
    pub fn new() -> SpawnSyncOptionsWithStringEncoding {
        JsCast::unchecked_into(Object::new())
    }
}
impl SpawnSyncReturns {
    pub fn new() -> SpawnSyncReturns {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::child_process::ChildProcess {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ChildProcess> for crate::node_js::EventEmitter {
    fn from(child: crate::child_process::ChildProcess) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::child_process::ChildProcessByStdio {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ChildProcessByStdio> for crate::node_js::EventEmitter {
    fn from(child: crate::child_process::ChildProcessByStdio) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ChildProcess> for crate::child_process::ChildProcessByStdio {
    fn as_ref(&self) -> &crate::child_process::ChildProcess {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ChildProcessByStdio> for crate::child_process::ChildProcess {
    fn from(child: crate::child_process::ChildProcessByStdio) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::child_process::ChildProcessWithoutNullStreams {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ChildProcessWithoutNullStreams> for crate::node_js::EventEmitter {
    fn from(child: crate::child_process::ChildProcessWithoutNullStreams) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ChildProcess>
    for crate::child_process::ChildProcessWithoutNullStreams
{
    fn as_ref(&self) -> &crate::child_process::ChildProcess {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ChildProcessWithoutNullStreams>
    for crate::child_process::ChildProcess
{
    fn from(child: crate::child_process::ChildProcessWithoutNullStreams) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions> for crate::child_process::CommonOptions {
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::CommonOptions> for crate::child_process::ProcessEnvOptions {
    fn from(child: crate::child_process::CommonOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Error> for crate::child_process::ExecException {
    fn as_ref(&self) -> &Error {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecException> for Error {
    fn from(child: crate::child_process::ExecException) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions> for crate::child_process::ExecFileOptions {
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileOptions> for crate::child_process::CommonOptions {
    fn from(child: crate::child_process::ExecFileOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions> for crate::child_process::ExecFileOptions {
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileOptions> for crate::child_process::ProcessEnvOptions {
    fn from(child: crate::child_process::ExecFileOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::ExecFileOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileOptionsWithBufferEncoding>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::ExecFileOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ExecFileOptions>
    for crate::child_process::ExecFileOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::ExecFileOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileOptionsWithBufferEncoding>
    for crate::child_process::ExecFileOptions
{
    fn from(child: crate::child_process::ExecFileOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::ExecFileOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileOptionsWithBufferEncoding>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::ExecFileOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::ExecFileOptionsWithOtherEncoding
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileOptionsWithOtherEncoding>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::ExecFileOptionsWithOtherEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ExecFileOptions>
    for crate::child_process::ExecFileOptionsWithOtherEncoding
{
    fn as_ref(&self) -> &crate::child_process::ExecFileOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileOptionsWithOtherEncoding>
    for crate::child_process::ExecFileOptions
{
    fn from(child: crate::child_process::ExecFileOptionsWithOtherEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::ExecFileOptionsWithOtherEncoding
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileOptionsWithOtherEncoding>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::ExecFileOptionsWithOtherEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::ExecFileOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileOptionsWithStringEncoding>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::ExecFileOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ExecFileOptions>
    for crate::child_process::ExecFileOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::ExecFileOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileOptionsWithStringEncoding>
    for crate::child_process::ExecFileOptions
{
    fn from(child: crate::child_process::ExecFileOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::ExecFileOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileOptionsWithStringEncoding>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::ExecFileOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions> for crate::child_process::ExecFileSyncOptions {
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileSyncOptions> for crate::child_process::CommonOptions {
    fn from(child: crate::child_process::ExecFileSyncOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions> for crate::child_process::ExecFileSyncOptions {
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileSyncOptions> for crate::child_process::ProcessEnvOptions {
    fn from(child: crate::child_process::ExecFileSyncOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::ExecFileSyncOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileSyncOptionsWithBufferEncoding>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::ExecFileSyncOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ExecFileSyncOptions>
    for crate::child_process::ExecFileSyncOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::ExecFileSyncOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileSyncOptionsWithBufferEncoding>
    for crate::child_process::ExecFileSyncOptions
{
    fn from(child: crate::child_process::ExecFileSyncOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::ExecFileSyncOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileSyncOptionsWithBufferEncoding>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::ExecFileSyncOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::ExecFileSyncOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileSyncOptionsWithStringEncoding>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::ExecFileSyncOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ExecFileSyncOptions>
    for crate::child_process::ExecFileSyncOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::ExecFileSyncOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileSyncOptionsWithStringEncoding>
    for crate::child_process::ExecFileSyncOptions
{
    fn from(child: crate::child_process::ExecFileSyncOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::ExecFileSyncOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecFileSyncOptionsWithStringEncoding>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::ExecFileSyncOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions> for crate::child_process::ExecOptions {
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecOptions> for crate::child_process::CommonOptions {
    fn from(child: crate::child_process::ExecOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions> for crate::child_process::ExecOptions {
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecOptions> for crate::child_process::ProcessEnvOptions {
    fn from(child: crate::child_process::ExecOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::ExecOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecOptionsWithBufferEncoding>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::ExecOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ExecOptions>
    for crate::child_process::ExecOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::ExecOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecOptionsWithBufferEncoding>
    for crate::child_process::ExecOptions
{
    fn from(child: crate::child_process::ExecOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::ExecOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecOptionsWithBufferEncoding>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::ExecOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::ExecOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecOptionsWithStringEncoding>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::ExecOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ExecOptions>
    for crate::child_process::ExecOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::ExecOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecOptionsWithStringEncoding>
    for crate::child_process::ExecOptions
{
    fn from(child: crate::child_process::ExecOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::ExecOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecOptionsWithStringEncoding>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::ExecOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions> for crate::child_process::ExecSyncOptions {
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecSyncOptions> for crate::child_process::CommonOptions {
    fn from(child: crate::child_process::ExecSyncOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions> for crate::child_process::ExecSyncOptions {
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecSyncOptions> for crate::child_process::ProcessEnvOptions {
    fn from(child: crate::child_process::ExecSyncOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::ExecSyncOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecSyncOptionsWithBufferEncoding>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::ExecSyncOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ExecSyncOptions>
    for crate::child_process::ExecSyncOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::ExecSyncOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecSyncOptionsWithBufferEncoding>
    for crate::child_process::ExecSyncOptions
{
    fn from(child: crate::child_process::ExecSyncOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::ExecSyncOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecSyncOptionsWithBufferEncoding>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::ExecSyncOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::ExecSyncOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecSyncOptionsWithStringEncoding>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::ExecSyncOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ExecSyncOptions>
    for crate::child_process::ExecSyncOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::ExecSyncOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecSyncOptionsWithStringEncoding>
    for crate::child_process::ExecSyncOptions
{
    fn from(child: crate::child_process::ExecSyncOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::ExecSyncOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ExecSyncOptionsWithStringEncoding>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::ExecSyncOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions> for crate::child_process::ForkOptions {
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::ForkOptions> for crate::child_process::ProcessEnvOptions {
    fn from(child: crate::child_process::ForkOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Promise> for crate::child_process::PromiseWithChild {
    fn as_ref(&self) -> &Promise {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::PromiseWithChild> for Promise {
    fn from(child: crate::child_process::PromiseWithChild) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions> for crate::child_process::SpawnOptions {
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnOptions> for crate::child_process::CommonOptions {
    fn from(child: crate::child_process::SpawnOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions> for crate::child_process::SpawnOptions {
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnOptions> for crate::child_process::ProcessEnvOptions {
    fn from(child: crate::child_process::SpawnOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::SpawnOptionsWithStdioTuple
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnOptionsWithStdioTuple>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::SpawnOptionsWithStdioTuple) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::SpawnOptionsWithStdioTuple
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnOptionsWithStdioTuple>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::SpawnOptionsWithStdioTuple) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::SpawnOptions>
    for crate::child_process::SpawnOptionsWithStdioTuple
{
    fn as_ref(&self) -> &crate::child_process::SpawnOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnOptionsWithStdioTuple> for crate::child_process::SpawnOptions {
    fn from(child: crate::child_process::SpawnOptionsWithStdioTuple) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions> for crate::child_process::SpawnOptionsWithoutStdio {
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnOptionsWithoutStdio> for crate::child_process::CommonOptions {
    fn from(child: crate::child_process::SpawnOptionsWithoutStdio) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::SpawnOptionsWithoutStdio
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnOptionsWithoutStdio>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::SpawnOptionsWithoutStdio) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::SpawnOptions> for crate::child_process::SpawnOptionsWithoutStdio {
    fn as_ref(&self) -> &crate::child_process::SpawnOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnOptionsWithoutStdio> for crate::child_process::SpawnOptions {
    fn from(child: crate::child_process::SpawnOptionsWithoutStdio) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions> for crate::child_process::SpawnSyncOptions {
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnSyncOptions> for crate::child_process::CommonOptions {
    fn from(child: crate::child_process::SpawnSyncOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions> for crate::child_process::SpawnSyncOptions {
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnSyncOptions> for crate::child_process::ProcessEnvOptions {
    fn from(child: crate::child_process::SpawnSyncOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::SpawnSyncOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnSyncOptionsWithBufferEncoding>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::SpawnSyncOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::SpawnSyncOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnSyncOptionsWithBufferEncoding>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::SpawnSyncOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::SpawnSyncOptions>
    for crate::child_process::SpawnSyncOptionsWithBufferEncoding
{
    fn as_ref(&self) -> &crate::child_process::SpawnSyncOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnSyncOptionsWithBufferEncoding>
    for crate::child_process::SpawnSyncOptions
{
    fn from(child: crate::child_process::SpawnSyncOptionsWithBufferEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::CommonOptions>
    for crate::child_process::SpawnSyncOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::CommonOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnSyncOptionsWithStringEncoding>
    for crate::child_process::CommonOptions
{
    fn from(child: crate::child_process::SpawnSyncOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::ProcessEnvOptions>
    for crate::child_process::SpawnSyncOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::ProcessEnvOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnSyncOptionsWithStringEncoding>
    for crate::child_process::ProcessEnvOptions
{
    fn from(child: crate::child_process::SpawnSyncOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::child_process::SpawnSyncOptions>
    for crate::child_process::SpawnSyncOptionsWithStringEncoding
{
    fn as_ref(&self) -> &crate::child_process::SpawnSyncOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::child_process::SpawnSyncOptionsWithStringEncoding>
    for crate::child_process::SpawnSyncOptions
{
    fn from(child: crate::child_process::SpawnSyncOptionsWithStringEncoding) -> Self {
        JsCast::unchecked_into(child)
    }
}
