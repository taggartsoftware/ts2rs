// generated by ts2rs 0.2.0
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "inspector")]
extern "C" {
    #[doc = "Profile node. Holds callsite information, execution statistics and child nodes."]
    pub type ProfileNode;
    #[doc = "Unique id of the node."]
    #[wasm_bindgen(method, getter)]
    pub fn id(this: &ProfileNode) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_id(this: &ProfileNode, value: f64);
    #[doc = "Function location."]
    # [ wasm_bindgen ( method , getter , js_name = callFrame ) ]
    pub fn call_frame(this: &ProfileNode) -> runtime::CallFrame;
    # [ wasm_bindgen ( method , setter , js_name = callFrame ) ]
    pub fn set_call_frame(this: &ProfileNode, value: &runtime::CallFrame);
    #[doc = "Number of samples where this node was on top of the call stack."]
    # [ wasm_bindgen ( method , getter , js_name = hitCount ) ]
    pub fn hit_count(this: &ProfileNode) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = hitCount ) ]
    pub fn set_hit_count(this: &ProfileNode, value: Option<f64>);
    #[doc = "Child node ids."]
    #[wasm_bindgen(method, getter)]
    pub fn children(this: &ProfileNode) -> Option<Array>;
    #[wasm_bindgen(method, setter)]
    pub fn set_children(this: &ProfileNode, value: Option<&Array>);
    #[doc = "The reason of being not optimized. The function may be deoptimized or marked as don't optimize."]
    # [ wasm_bindgen ( method , getter , js_name = deoptReason ) ]
    pub fn deopt_reason(this: &ProfileNode) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = deoptReason ) ]
    pub fn set_deopt_reason(this: &ProfileNode, value: Option<&str>);
    #[doc = "An array of source position ticks."]
    # [ wasm_bindgen ( method , getter , js_name = positionTicks ) ]
    pub fn position_ticks(this: &ProfileNode) -> Option<Array>;
    # [ wasm_bindgen ( method , setter , js_name = positionTicks ) ]
    pub fn set_position_ticks(this: &ProfileNode, value: Option<&Array>);
    #[doc = "Profile."]
    pub type Profile;
    #[doc = "The list of profile nodes. First item is the root node."]
    #[wasm_bindgen(method, getter)]
    pub fn nodes(this: &Profile) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_nodes(this: &Profile, value: &Array);
    #[doc = "Profiling start timestamp in microseconds."]
    # [ wasm_bindgen ( method , getter , js_name = startTime ) ]
    pub fn start_time(this: &Profile) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = startTime ) ]
    pub fn set_start_time(this: &Profile, value: f64);
    #[doc = "Profiling end timestamp in microseconds."]
    # [ wasm_bindgen ( method , getter , js_name = endTime ) ]
    pub fn end_time(this: &Profile) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = endTime ) ]
    pub fn set_end_time(this: &Profile, value: f64);
    #[doc = "Ids of samples top nodes."]
    #[wasm_bindgen(method, getter)]
    pub fn samples(this: &Profile) -> Option<Array>;
    #[wasm_bindgen(method, setter)]
    pub fn set_samples(this: &Profile, value: Option<&Array>);
    #[doc = "Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime."]
    # [ wasm_bindgen ( method , getter , js_name = timeDeltas ) ]
    pub fn time_deltas(this: &Profile) -> Option<Array>;
    # [ wasm_bindgen ( method , setter , js_name = timeDeltas ) ]
    pub fn set_time_deltas(this: &Profile, value: Option<&Array>);
    #[doc = "Specifies a number of samples attributed to a certain source position."]
    pub type PositionTickInfo;
    #[doc = "Source line number (1-based)."]
    #[wasm_bindgen(method, getter)]
    pub fn line(this: &PositionTickInfo) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_line(this: &PositionTickInfo, value: f64);
    #[doc = "Number of samples attributed to the source line."]
    #[wasm_bindgen(method, getter)]
    pub fn ticks(this: &PositionTickInfo) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_ticks(this: &PositionTickInfo, value: f64);
    #[doc = "Coverage data for a source range."]
    pub type CoverageRange;
    #[doc = "JavaScript script source offset for the range start."]
    # [ wasm_bindgen ( method , getter , js_name = startOffset ) ]
    pub fn start_offset(this: &CoverageRange) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = startOffset ) ]
    pub fn set_start_offset(this: &CoverageRange, value: f64);
    #[doc = "JavaScript script source offset for the range end."]
    # [ wasm_bindgen ( method , getter , js_name = endOffset ) ]
    pub fn end_offset(this: &CoverageRange) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = endOffset ) ]
    pub fn set_end_offset(this: &CoverageRange, value: f64);
    #[doc = "Collected execution count of the source range."]
    #[wasm_bindgen(method, getter)]
    pub fn count(this: &CoverageRange) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_count(this: &CoverageRange, value: f64);
    #[doc = "Coverage data for a JavaScript function."]
    pub type FunctionCoverage;
    #[doc = "JavaScript function name."]
    # [ wasm_bindgen ( method , getter , js_name = functionName ) ]
    pub fn function_name(this: &FunctionCoverage) -> String;
    # [ wasm_bindgen ( method , setter , js_name = functionName ) ]
    pub fn set_function_name(this: &FunctionCoverage, value: &str);
    #[doc = "Source ranges inside the function with coverage data."]
    #[wasm_bindgen(method, getter)]
    pub fn ranges(this: &FunctionCoverage) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_ranges(this: &FunctionCoverage, value: &Array);
    #[doc = "Whether coverage data for this function has block granularity."]
    # [ wasm_bindgen ( method , getter , js_name = isBlockCoverage ) ]
    pub fn is_block_coverage(this: &FunctionCoverage) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isBlockCoverage ) ]
    pub fn set_is_block_coverage(this: &FunctionCoverage, value: bool);
    #[doc = "Coverage data for a JavaScript script."]
    pub type ScriptCoverage;
    #[doc = "JavaScript script id."]
    # [ wasm_bindgen ( method , getter , js_name = scriptId ) ]
    pub fn script_id(this: &ScriptCoverage) -> runtime::ScriptId;
    # [ wasm_bindgen ( method , setter , js_name = scriptId ) ]
    pub fn set_script_id(this: &ScriptCoverage, value: runtime::ScriptIdRef);
    #[doc = "JavaScript script name or url."]
    #[wasm_bindgen(method, getter)]
    pub fn url(this: &ScriptCoverage) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_url(this: &ScriptCoverage, value: &str);
    #[doc = "Functions contained in the script that has coverage data."]
    #[wasm_bindgen(method, getter)]
    pub fn functions(this: &ScriptCoverage) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_functions(this: &ScriptCoverage, value: &Array);
    #[doc = "Describes a type collected during runtime."]
    pub type TypeObject;
    #[doc = "Name of a type collected with type profiling."]
    #[wasm_bindgen(method, getter)]
    pub fn name(this: &TypeObject) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_name(this: &TypeObject, value: &str);
    #[doc = "Source offset and types for a parameter or return value."]
    pub type TypeProfileEntry;
    #[doc = "Source offset of the parameter or end of function for return values."]
    #[wasm_bindgen(method, getter)]
    pub fn offset(this: &TypeProfileEntry) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_offset(this: &TypeProfileEntry, value: f64);
    #[doc = "The types for this parameter or return value."]
    #[wasm_bindgen(method, getter)]
    pub fn types(this: &TypeProfileEntry) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_types(this: &TypeProfileEntry, value: &Array);
    #[doc = "Type profile data collected during runtime for a JavaScript script."]
    pub type ScriptTypeProfile;
    #[doc = "JavaScript script id."]
    # [ wasm_bindgen ( method , getter , js_name = scriptId ) ]
    pub fn script_id(this: &ScriptTypeProfile) -> runtime::ScriptId;
    # [ wasm_bindgen ( method , setter , js_name = scriptId ) ]
    pub fn set_script_id(this: &ScriptTypeProfile, value: runtime::ScriptIdRef);
    #[doc = "JavaScript script name or url."]
    #[wasm_bindgen(method, getter)]
    pub fn url(this: &ScriptTypeProfile) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_url(this: &ScriptTypeProfile, value: &str);
    #[doc = "Type profile entries for parameters and return values of the functions in the script."]
    #[wasm_bindgen(method, getter)]
    pub fn entries(this: &ScriptTypeProfile) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_entries(this: &ScriptTypeProfile, value: &Array);
    pub type SetSamplingIntervalParameterType;
    #[doc = "New sampling interval in microseconds."]
    #[wasm_bindgen(method, getter)]
    pub fn interval(this: &SetSamplingIntervalParameterType) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_interval(this: &SetSamplingIntervalParameterType, value: f64);
    pub type StartPreciseCoverageParameterType;
    #[doc = "Collect accurate call counts beyond simple 'covered' or 'not covered'."]
    # [ wasm_bindgen ( method , getter , js_name = callCount ) ]
    pub fn call_count(this: &StartPreciseCoverageParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = callCount ) ]
    pub fn set_call_count(this: &StartPreciseCoverageParameterType, value: Option<bool>);
    #[doc = "Collect block-based coverage."]
    #[wasm_bindgen(method, getter)]
    pub fn detailed(this: &StartPreciseCoverageParameterType) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_detailed(this: &StartPreciseCoverageParameterType, value: Option<bool>);
    pub type StopReturnType;
    #[doc = "Recorded profile."]
    #[wasm_bindgen(method, getter)]
    pub fn profile(this: &StopReturnType) -> profiler::Profile;
    #[wasm_bindgen(method, setter)]
    pub fn set_profile(this: &StopReturnType, value: &profiler::Profile);
    pub type TakePreciseCoverageReturnType;
    #[doc = "Coverage data for the current isolate."]
    #[wasm_bindgen(method, getter)]
    pub fn result(this: &TakePreciseCoverageReturnType) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_result(this: &TakePreciseCoverageReturnType, value: &Array);
    pub type GetBestEffortCoverageReturnType;
    #[doc = "Coverage data for the current isolate."]
    #[wasm_bindgen(method, getter)]
    pub fn result(this: &GetBestEffortCoverageReturnType) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_result(this: &GetBestEffortCoverageReturnType, value: &Array);
    pub type TakeTypeProfileReturnType;
    #[doc = "Type profile for all scripts since startTypeProfile() was turned on."]
    #[wasm_bindgen(method, getter)]
    pub fn result(this: &TakeTypeProfileReturnType) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_result(this: &TakeTypeProfileReturnType, value: &Array);
    pub type ConsoleProfileStartedEventDataType;
    #[wasm_bindgen(method, getter)]
    pub fn id(this: &ConsoleProfileStartedEventDataType) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_id(this: &ConsoleProfileStartedEventDataType, value: &str);
    #[doc = "Location of console.profile()."]
    #[wasm_bindgen(method, getter)]
    pub fn location(this: &ConsoleProfileStartedEventDataType) -> debugger::Location;
    #[wasm_bindgen(method, setter)]
    pub fn set_location(this: &ConsoleProfileStartedEventDataType, value: &debugger::Location);
    #[doc = "Profile title passed as an argument to console.profile()."]
    #[wasm_bindgen(method, getter)]
    pub fn title(this: &ConsoleProfileStartedEventDataType) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_title(this: &ConsoleProfileStartedEventDataType, value: Option<&str>);
    pub type ConsoleProfileFinishedEventDataType;
    #[wasm_bindgen(method, getter)]
    pub fn id(this: &ConsoleProfileFinishedEventDataType) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_id(this: &ConsoleProfileFinishedEventDataType, value: &str);
    #[doc = "Location of console.profileEnd()."]
    #[wasm_bindgen(method, getter)]
    pub fn location(this: &ConsoleProfileFinishedEventDataType) -> debugger::Location;
    #[wasm_bindgen(method, setter)]
    pub fn set_location(this: &ConsoleProfileFinishedEventDataType, value: &debugger::Location);
    #[wasm_bindgen(method, getter)]
    pub fn profile(this: &ConsoleProfileFinishedEventDataType) -> profiler::Profile;
    #[wasm_bindgen(method, setter)]
    pub fn set_profile(this: &ConsoleProfileFinishedEventDataType, value: &profiler::Profile);
    #[doc = "Profile title passed as an argument to console.profile()."]
    #[wasm_bindgen(method, getter)]
    pub fn title(this: &ConsoleProfileFinishedEventDataType) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_title(this: &ConsoleProfileFinishedEventDataType, value: Option<&str>);
}
