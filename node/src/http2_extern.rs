// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "http2")]
extern "C" {
    pub type IncomingHttpStatusHeader;
    #[wasm_bindgen(method, getter)]
    pub fn stringliteral(this: &IncomingHttpStatusHeader) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stringliteral(this: &IncomingHttpStatusHeader, value: Option<f64>);
    pub type IncomingHttpHeaders;
    #[wasm_bindgen(method, getter)]
    pub fn stringliteral(this: &IncomingHttpHeaders) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stringliteral(this: &IncomingHttpHeaders, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = stringliteral ) ]
    pub fn stringliteral_2(this: &IncomingHttpHeaders) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = stringliteral ) ]
    pub fn set_stringliteral_2(this: &IncomingHttpHeaders, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = stringliteral ) ]
    pub fn stringliteral_3(this: &IncomingHttpHeaders) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = stringliteral ) ]
    pub fn set_stringliteral_3(this: &IncomingHttpHeaders, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = stringliteral ) ]
    pub fn stringliteral_4(this: &IncomingHttpHeaders) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = stringliteral ) ]
    pub fn set_stringliteral_4(this: &IncomingHttpHeaders, value: Option<&str>);
    pub type StreamPriorityOptions;
    #[wasm_bindgen(method, getter)]
    pub fn exclusive(this: &StreamPriorityOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_exclusive(this: &StreamPriorityOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn parent(this: &StreamPriorityOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_parent(this: &StreamPriorityOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn weight(this: &StreamPriorityOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_weight(this: &StreamPriorityOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn silent(this: &StreamPriorityOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_silent(this: &StreamPriorityOptions, value: Option<bool>);
    pub type StreamState;
    # [ wasm_bindgen ( method , getter , js_name = localWindowSize ) ]
    pub fn local_window_size(this: &StreamState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = localWindowSize ) ]
    pub fn set_local_window_size(this: &StreamState, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn state(this: &StreamState) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_state(this: &StreamState, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = localClose ) ]
    pub fn local_close(this: &StreamState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = localClose ) ]
    pub fn set_local_close(this: &StreamState, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = remoteClose ) ]
    pub fn remote_close(this: &StreamState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = remoteClose ) ]
    pub fn set_remote_close(this: &StreamState, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = sumDependencyWeight ) ]
    pub fn sum_dependency_weight(this: &StreamState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = sumDependencyWeight ) ]
    pub fn set_sum_dependency_weight(this: &StreamState, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn weight(this: &StreamState) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_weight(this: &StreamState, value: Option<f64>);
    pub type ServerStreamResponseOptions;
    # [ wasm_bindgen ( method , getter , js_name = endStream ) ]
    pub fn end_stream(this: &ServerStreamResponseOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = endStream ) ]
    pub fn set_end_stream(this: &ServerStreamResponseOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = waitForTrailers ) ]
    pub fn wait_for_trailers(this: &ServerStreamResponseOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = waitForTrailers ) ]
    pub fn set_wait_for_trailers(this: &ServerStreamResponseOptions, value: Option<bool>);
    pub type StatOptions;
    #[wasm_bindgen(method, getter)]
    pub fn offset(this: &StatOptions) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_offset(this: &StatOptions, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn length(this: &StatOptions) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_length(this: &StatOptions, value: f64);
    pub type ServerStreamFileResponseOptions;
    # [ wasm_bindgen ( method , js_name = statCheck ) ]
    pub fn stat_check(
        this: &ServerStreamFileResponseOptions,
        stats: &crate::fs::Stats,
        headers: &crate::http::OutgoingHttpHeaders,
        stat_options: &StatOptions,
    ) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = statCheck ) ]
    pub fn set_stat_check(this: &ServerStreamFileResponseOptions, value: Option<&Function>);
    # [ wasm_bindgen ( method , getter , js_name = waitForTrailers ) ]
    pub fn wait_for_trailers(this: &ServerStreamFileResponseOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = waitForTrailers ) ]
    pub fn set_wait_for_trailers(this: &ServerStreamFileResponseOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn offset(this: &ServerStreamFileResponseOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_offset(this: &ServerStreamFileResponseOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn length(this: &ServerStreamFileResponseOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_length(this: &ServerStreamFileResponseOptions, value: Option<f64>);
    pub type ServerStreamFileResponseOptionsWithError;
    # [ wasm_bindgen ( method , js_name = onError ) ]
    pub fn on_error(this: &ServerStreamFileResponseOptionsWithError, err: &node_js::ErrnoException);
    # [ wasm_bindgen ( method , setter , js_name = onError ) ]
    pub fn set_on_error(this: &ServerStreamFileResponseOptionsWithError, value: Option<&Function>);
    pub type Http2Stream;
    #[wasm_bindgen(method, getter)]
    pub fn aborted(this: &Http2Stream) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = bufferSize ) ]
    pub fn buffer_size(this: &Http2Stream) -> f64;
    #[wasm_bindgen(method, getter)]
    pub fn closed(this: &Http2Stream) -> bool;
    #[wasm_bindgen(method, getter)]
    pub fn destroyed(this: &Http2Stream) -> bool;
    #[doc = "Set the true if the END_STREAM flag was set in the request or response HEADERS frame received,"]
    #[doc = "indicating that no additional data should be received and the readable side of the Http2Stream will be closed."]
    # [ wasm_bindgen ( method , getter , js_name = endAfterHeaders ) ]
    pub fn end_after_headers(this: &Http2Stream) -> bool;
    #[wasm_bindgen(method, getter)]
    pub fn id(this: &Http2Stream) -> Option<f64>;
    #[wasm_bindgen(method, getter)]
    pub fn pending(this: &Http2Stream) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = rstCode ) ]
    pub fn rst_code(this: &Http2Stream) -> f64;
    # [ wasm_bindgen ( method , getter , js_name = sentHeaders ) ]
    pub fn sent_headers(this: &Http2Stream) -> crate::http::OutgoingHttpHeaders;
    # [ wasm_bindgen ( method , getter , js_name = sentInfoHeaders ) ]
    pub fn sent_info_headers(this: &Http2Stream) -> Option<Array>;
    # [ wasm_bindgen ( method , getter , js_name = sentTrailers ) ]
    pub fn sent_trailers(this: &Http2Stream) -> Option<crate::http::OutgoingHttpHeaders>;
    #[wasm_bindgen(method, getter)]
    pub fn session(this: &Http2Stream) -> Http2Session;
    #[wasm_bindgen(method, getter)]
    pub fn state(this: &Http2Stream) -> StreamState;
    #[wasm_bindgen(method)]
    pub fn close(this: &Http2Stream, code: Option<f64>, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_close(this: &Http2Stream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn priority(this: &Http2Stream, options: &StreamPriorityOptions);
    #[wasm_bindgen(method, setter)]
    pub fn set_priority(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = setTimeout ) ]
    pub fn set_timeout(this: &Http2Stream, msecs: f64, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = setTimeout ) ]
    pub fn set_set_timeout(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = sendTrailers ) ]
    pub fn send_trailers(this: &Http2Stream, headers: &crate::http::OutgoingHttpHeaders);
    # [ wasm_bindgen ( method , setter , js_name = sendTrailers ) ]
    pub fn set_send_trailers(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_6(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_6(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_7(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_7(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_8(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_8(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_9(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_9(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_10(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_10(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_11(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_11(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_12(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_12(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_13(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_13(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_14(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_14(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_15(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_15(this: &Http2Stream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Http2Stream, event: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &Http2Stream, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &Http2Stream, event: &JsValue, chunk: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(this: &Http2Stream, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(this: &Http2Stream, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_6(this: &Http2Stream, event: &JsValue, err: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_6(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_7(this: &Http2Stream, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_7(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_8(this: &Http2Stream, event: &JsValue, frame_type: f64, error_code: f64) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_8(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_9(this: &Http2Stream, event: &JsValue, src: &internal::Readable) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_9(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_10(this: &Http2Stream, event: &JsValue, src: &internal::Readable) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_10(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_11(this: &Http2Stream, event: &JsValue, code: f64) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_11(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_12(this: &Http2Stream, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_12(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_13(
        this: &Http2Stream,
        event: &JsValue,
        trailers: &IncomingHttpHeaders,
        flags: f64,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_13(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_14(this: &Http2Stream, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_14(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_15(this: &Http2Stream, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_15(this: &Http2Stream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_6(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_6(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_7(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_7(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_8(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_8(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_9(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_9(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_10(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_10(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_11(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_11(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_12(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_12(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_13(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_13(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_14(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_14(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_15(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_15(this: &Http2Stream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_6(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_6(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_7(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_7(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_8(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_8(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_9(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_9(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_10(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_10(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_11(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_11(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_12(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_12(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_13(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_13(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_14(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_14(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_15(this: &Http2Stream, event: &JsValue, listener: &JsValue) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_15(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &Http2Stream, event: &JsValue, listener: &JsValue)
    -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_6(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_6(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_7(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_7(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_8(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_8(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_9(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_9(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_10(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_10(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_11(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_11(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_12(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_12(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_13(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_13(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_14(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_14(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_15(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_15(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_6(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_6(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_7(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_7(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_8(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_8(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_9(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_9(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_10(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_10(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_11(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_11(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_12(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_12(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_13(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_13(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_14(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_14(this: &Http2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_15(
        this: &Http2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_15(this: &Http2Stream, value: &Function);
    pub type ClientHttp2Stream;
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &ClientHttp2Stream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &ClientHttp2Stream, event: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &ClientHttp2Stream, event: &JsValue, headers: &JsValue, flags: f64)
    -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(
        this: &ClientHttp2Stream,
        event: &JsValue,
        headers: &IncomingHttpHeaders,
        flags: f64,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(this: &ClientHttp2Stream, event: &JsValue, headers: &JsValue, flags: f64)
    -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(this: &ClientHttp2Stream, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &ClientHttp2Stream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &ClientHttp2Stream, event: &JsValue, listener: &JsValue) -> ClientHttp2Stream;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &ClientHttp2Stream, event: &JsValue, listener: &JsValue)
    -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &ClientHttp2Stream, event: &JsValue, listener: &JsValue)
    -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(this: &ClientHttp2Stream, event: &JsValue, listener: &JsValue)
    -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(this: &ClientHttp2Stream, event: &JsValue, listener: &JsValue)
    -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &ClientHttp2Stream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &ClientHttp2Stream, event: &JsValue, listener: &JsValue)
    -> ClientHttp2Stream;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &ClientHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(
        this: &ClientHttp2Stream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Stream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &ClientHttp2Stream, value: &Function);
    pub type ServerHttp2Stream;
    # [ wasm_bindgen ( method , getter , js_name = headersSent ) ]
    pub fn headers_sent(this: &ServerHttp2Stream) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = pushAllowed ) ]
    pub fn push_allowed(this: &ServerHttp2Stream) -> bool;
    # [ wasm_bindgen ( method , js_name = additionalHeaders ) ]
    pub fn additional_headers(this: &ServerHttp2Stream, headers: &crate::http::OutgoingHttpHeaders);
    # [ wasm_bindgen ( method , setter , js_name = additionalHeaders ) ]
    pub fn set_additional_headers(this: &ServerHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = pushStream ) ]
    pub fn push_stream(
        this: &ServerHttp2Stream,
        headers: &crate::http::OutgoingHttpHeaders,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = pushStream ) ]
    pub fn set_push_stream(this: &ServerHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = pushStream ) ]
    pub fn push_stream_2(
        this: &ServerHttp2Stream,
        headers: &crate::http::OutgoingHttpHeaders,
        options: Option<&StreamPriorityOptions>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = pushStream ) ]
    pub fn set_push_stream_2(this: &ServerHttp2Stream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn respond(
        this: &ServerHttp2Stream,
        headers: Option<&crate::http::OutgoingHttpHeaders>,
        options: Option<&ServerStreamResponseOptions>,
    );
    #[wasm_bindgen(method, setter)]
    pub fn set_respond(this: &ServerHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = respondWithFD ) ]
    pub fn respond_with_fd(
        this: &ServerHttp2Stream,
        fd: &JsValue,
        headers: Option<&crate::http::OutgoingHttpHeaders>,
        options: Option<&ServerStreamFileResponseOptions>,
    );
    # [ wasm_bindgen ( method , setter , js_name = respondWithFD ) ]
    pub fn set_respond_with_fd(this: &ServerHttp2Stream, value: &Function);
    # [ wasm_bindgen ( method , js_name = respondWithFile ) ]
    pub fn respond_with_file(
        this: &ServerHttp2Stream,
        path: &str,
        headers: Option<&crate::http::OutgoingHttpHeaders>,
        options: Option<&ServerStreamFileResponseOptionsWithError>,
    );
    # [ wasm_bindgen ( method , setter , js_name = respondWithFile ) ]
    pub fn set_respond_with_file(this: &ServerHttp2Stream, value: &Function);
    pub type Settings;
    # [ wasm_bindgen ( method , getter , js_name = headerTableSize ) ]
    pub fn header_table_size(this: &Settings) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = headerTableSize ) ]
    pub fn set_header_table_size(this: &Settings, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = enablePush ) ]
    pub fn enable_push(this: &Settings) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = enablePush ) ]
    pub fn set_enable_push(this: &Settings, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = initialWindowSize ) ]
    pub fn initial_window_size(this: &Settings) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = initialWindowSize ) ]
    pub fn set_initial_window_size(this: &Settings, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = maxFrameSize ) ]
    pub fn max_frame_size(this: &Settings) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxFrameSize ) ]
    pub fn set_max_frame_size(this: &Settings, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = maxConcurrentStreams ) ]
    pub fn max_concurrent_streams(this: &Settings) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxConcurrentStreams ) ]
    pub fn set_max_concurrent_streams(this: &Settings, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = maxHeaderListSize ) ]
    pub fn max_header_list_size(this: &Settings) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxHeaderListSize ) ]
    pub fn set_max_header_list_size(this: &Settings, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = enableConnectProtocol ) ]
    pub fn enable_connect_protocol(this: &Settings) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = enableConnectProtocol ) ]
    pub fn set_enable_connect_protocol(this: &Settings, value: Option<bool>);
    pub type ClientSessionRequestOptions;
    # [ wasm_bindgen ( method , getter , js_name = endStream ) ]
    pub fn end_stream(this: &ClientSessionRequestOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = endStream ) ]
    pub fn set_end_stream(this: &ClientSessionRequestOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn exclusive(this: &ClientSessionRequestOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_exclusive(this: &ClientSessionRequestOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn parent(this: &ClientSessionRequestOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_parent(this: &ClientSessionRequestOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn weight(this: &ClientSessionRequestOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_weight(this: &ClientSessionRequestOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = waitForTrailers ) ]
    pub fn wait_for_trailers(this: &ClientSessionRequestOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = waitForTrailers ) ]
    pub fn set_wait_for_trailers(this: &ClientSessionRequestOptions, value: Option<bool>);
    pub type SessionState;
    # [ wasm_bindgen ( method , getter , js_name = effectiveLocalWindowSize ) ]
    pub fn effective_local_window_size(this: &SessionState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = effectiveLocalWindowSize ) ]
    pub fn set_effective_local_window_size(this: &SessionState, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = effectiveRecvDataLength ) ]
    pub fn effective_recv_data_length(this: &SessionState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = effectiveRecvDataLength ) ]
    pub fn set_effective_recv_data_length(this: &SessionState, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = nextStreamID ) ]
    pub fn next_stream_id(this: &SessionState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = nextStreamID ) ]
    pub fn set_next_stream_id(this: &SessionState, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = localWindowSize ) ]
    pub fn local_window_size(this: &SessionState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = localWindowSize ) ]
    pub fn set_local_window_size(this: &SessionState, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = lastProcStreamID ) ]
    pub fn last_proc_stream_id(this: &SessionState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = lastProcStreamID ) ]
    pub fn set_last_proc_stream_id(this: &SessionState, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = remoteWindowSize ) ]
    pub fn remote_window_size(this: &SessionState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = remoteWindowSize ) ]
    pub fn set_remote_window_size(this: &SessionState, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = outboundQueueSize ) ]
    pub fn outbound_queue_size(this: &SessionState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = outboundQueueSize ) ]
    pub fn set_outbound_queue_size(this: &SessionState, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = deflateDynamicTableSize ) ]
    pub fn deflate_dynamic_table_size(this: &SessionState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = deflateDynamicTableSize ) ]
    pub fn set_deflate_dynamic_table_size(this: &SessionState, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = inflateDynamicTableSize ) ]
    pub fn inflate_dynamic_table_size(this: &SessionState) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = inflateDynamicTableSize ) ]
    pub fn set_inflate_dynamic_table_size(this: &SessionState, value: Option<f64>);
    pub type Http2Session;
    # [ wasm_bindgen ( method , getter , js_name = alpnProtocol ) ]
    pub fn alpn_protocol(this: &Http2Session) -> Option<String>;
    #[wasm_bindgen(method, getter)]
    pub fn closed(this: &Http2Session) -> bool;
    #[wasm_bindgen(method, getter)]
    pub fn connecting(this: &Http2Session) -> bool;
    #[wasm_bindgen(method, getter)]
    pub fn destroyed(this: &Http2Session) -> bool;
    #[wasm_bindgen(method, getter)]
    pub fn encrypted(this: &Http2Session) -> Option<bool>;
    # [ wasm_bindgen ( method , getter , js_name = localSettings ) ]
    pub fn local_settings(this: &Http2Session) -> Settings;
    # [ wasm_bindgen ( method , getter , js_name = originSet ) ]
    pub fn origin_set(this: &Http2Session) -> Option<Array>;
    # [ wasm_bindgen ( method , getter , js_name = pendingSettingsAck ) ]
    pub fn pending_settings_ack(this: &Http2Session) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = remoteSettings ) ]
    pub fn remote_settings(this: &Http2Session) -> Settings;
    #[wasm_bindgen(method, getter)]
    pub fn socket(this: &Http2Session) -> JsValue;
    #[wasm_bindgen(method, getter)]
    pub fn state(this: &Http2Session) -> SessionState;
    # [ wasm_bindgen ( method , getter , js_name = type ) ]
    pub fn type_(this: &Http2Session) -> f64;
    #[wasm_bindgen(method)]
    pub fn close(this: &Http2Session, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_close(this: &Http2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn destroy(this: &Http2Session, error: Option<&Error>, code: Option<f64>);
    #[wasm_bindgen(method, setter)]
    pub fn set_destroy(this: &Http2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn goaway(
        this: &Http2Session,
        code: Option<f64>,
        last_stream_id: Option<f64>,
        opaque_data: Option<&node_js::ArrayBufferView>,
    );
    #[wasm_bindgen(method, setter)]
    pub fn set_goaway(this: &Http2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn ping(this: &Http2Session, callback: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_ping(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = ping ) ]
    pub fn ping_2(
        this: &Http2Session,
        payload: &node_js::ArrayBufferView,
        callback: &JsValue,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = ping ) ]
    pub fn set_ping_2(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = ref ) ]
    pub fn ref_(this: &Http2Session);
    # [ wasm_bindgen ( method , setter , js_name = ref ) ]
    pub fn set_ref_(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = setTimeout ) ]
    pub fn set_timeout(this: &Http2Session, msecs: f64, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = setTimeout ) ]
    pub fn set_set_timeout(this: &Http2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn settings(this: &Http2Session, settings: &Settings);
    #[wasm_bindgen(method, setter)]
    pub fn set_settings(this: &Http2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unref(this: &Http2Session);
    #[wasm_bindgen(method, setter)]
    pub fn set_unref(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(this: &Http2Session, event: &JsValue, listener: &JsValue)
    -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &Http2Session, event: &JsValue, listener: &JsValue)
    -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(this: &Http2Session, event: &JsValue, listener: &JsValue)
    -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(this: &Http2Session, event: &JsValue, listener: &JsValue)
    -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_6(this: &Http2Session, event: &JsValue, listener: &JsValue)
    -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_6(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_7(this: &Http2Session, event: &JsValue, listener: &JsValue)
    -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_7(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_8(this: &Http2Session, event: &JsValue, listener: &JsValue)
    -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_8(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_9(this: &Http2Session, event: &JsValue, listener: &JsValue)
    -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_9(this: &Http2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Http2Session, event: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &Http2Session, event: &JsValue, err: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(
        this: &Http2Session,
        event: &JsValue,
        frame_type: f64,
        error_code: f64,
        stream_id: f64,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(
        this: &Http2Session,
        event: &JsValue,
        error_code: f64,
        last_stream_id: f64,
        opaque_data: &Buffer,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(this: &Http2Session, event: &JsValue, settings: &Settings) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_6(this: &Http2Session, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_6(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_7(this: &Http2Session, event: &JsValue, settings: &Settings) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_7(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_8(this: &Http2Session, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_8(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_9(this: &Http2Session, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_9(this: &Http2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_6(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_6(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_7(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_7(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_8(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_8(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_9(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_9(this: &Http2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_6(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_6(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_7(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_7(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_8(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_8(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_9(this: &Http2Session, event: &JsValue, listener: &JsValue) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_9(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_6(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_6(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_7(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_7(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_8(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_8(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_9(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_9(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_6(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_6(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_7(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_7(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_8(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_8(this: &Http2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_9(
        this: &Http2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_9(this: &Http2Session, value: &Function);
    pub type ClientHttp2Session;
    #[wasm_bindgen(method)]
    pub fn request(
        this: &ClientHttp2Session,
        headers: Option<&crate::http::OutgoingHttpHeaders>,
        options: Option<&ClientSessionRequestOptions>,
    ) -> ClientHttp2Stream;
    #[wasm_bindgen(method, setter)]
    pub fn set_request(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &ClientHttp2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(
        this: &ClientHttp2Session,
        event: &JsValue,
        alt: &str,
        origin: &str,
        stream: f64,
    ) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &ClientHttp2Session, event: &JsValue, origins: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(
        this: &ClientHttp2Session,
        event: &JsValue,
        session: &ClientHttp2Session,
        socket: &JsValue,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(
        this: &ClientHttp2Session,
        event: &JsValue,
        stream: &ClientHttp2Stream,
        headers: &JsValue,
        flags: f64,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(this: &ClientHttp2Session, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &ClientHttp2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &ClientHttp2Session, event: &JsValue, listener: &JsValue)
    -> ClientHttp2Session;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &ClientHttp2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &ClientHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(
        this: &ClientHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &ClientHttp2Session, value: &Function);
    pub type AlternativeServiceOptions;
    #[wasm_bindgen(method, getter)]
    pub fn origin(this: &AlternativeServiceOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_origin(this: &AlternativeServiceOptions, value: &JsValue);
    pub type ServerHttp2Session;
    #[wasm_bindgen(method, getter)]
    pub fn server(this: &ServerHttp2Session) -> JsValue;
    #[wasm_bindgen(method)]
    pub fn altsvc(this: &ServerHttp2Session, alt: &str, origin_or_stream: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_altsvc(this: &ServerHttp2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn origin(this: &ServerHttp2Session, args: &Array);
    #[wasm_bindgen(method, setter)]
    pub fn set_origin(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &ServerHttp2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(
        this: &ServerHttp2Session,
        event: &JsValue,
        session: &ServerHttp2Session,
        socket: &JsValue,
    ) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(
        this: &ServerHttp2Session,
        event: &JsValue,
        stream: &ServerHttp2Stream,
        headers: &IncomingHttpHeaders,
        flags: f64,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &ServerHttp2Session, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &ServerHttp2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &ServerHttp2Session, event: &JsValue, listener: &JsValue)
    -> ServerHttp2Session;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &ServerHttp2Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &ServerHttp2Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &ServerHttp2Session,
        event: &JsValue,
        listener: &JsValue,
    ) -> ServerHttp2Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &ServerHttp2Session, value: &Function);
    pub type SessionOptions;
    # [ wasm_bindgen ( method , getter , js_name = maxDeflateDynamicTableSize ) ]
    pub fn max_deflate_dynamic_table_size(this: &SessionOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxDeflateDynamicTableSize ) ]
    pub fn set_max_deflate_dynamic_table_size(this: &SessionOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = maxSessionMemory ) ]
    pub fn max_session_memory(this: &SessionOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxSessionMemory ) ]
    pub fn set_max_session_memory(this: &SessionOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = maxHeaderListPairs ) ]
    pub fn max_header_list_pairs(this: &SessionOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxHeaderListPairs ) ]
    pub fn set_max_header_list_pairs(this: &SessionOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = maxOutstandingPings ) ]
    pub fn max_outstanding_pings(this: &SessionOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxOutstandingPings ) ]
    pub fn set_max_outstanding_pings(this: &SessionOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = maxSendHeaderBlockLength ) ]
    pub fn max_send_header_block_length(this: &SessionOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxSendHeaderBlockLength ) ]
    pub fn set_max_send_header_block_length(this: &SessionOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = paddingStrategy ) ]
    pub fn padding_strategy(this: &SessionOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = paddingStrategy ) ]
    pub fn set_padding_strategy(this: &SessionOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = peerMaxConcurrentStreams ) ]
    pub fn peer_max_concurrent_streams(this: &SessionOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = peerMaxConcurrentStreams ) ]
    pub fn set_peer_max_concurrent_streams(this: &SessionOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn settings(this: &SessionOptions) -> Option<Settings>;
    #[wasm_bindgen(method, setter)]
    pub fn set_settings(this: &SessionOptions, value: Option<&Settings>);
    # [ wasm_bindgen ( method , js_name = selectPadding ) ]
    pub fn select_padding(this: &SessionOptions, frame_len: f64, max_frame_len: f64) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = selectPadding ) ]
    pub fn set_select_padding(this: &SessionOptions, value: Option<&Function>);
    # [ wasm_bindgen ( method , js_name = createConnection ) ]
    pub fn create_connection(
        this: &SessionOptions,
        authority: &crate::url::URL,
        option: &SessionOptions,
    ) -> internal::Duplex;
    # [ wasm_bindgen ( method , setter , js_name = createConnection ) ]
    pub fn set_create_connection(this: &SessionOptions, value: Option<&Function>);
    pub type ClientSessionOptions;
    # [ wasm_bindgen ( method , getter , js_name = maxReservedRemoteStreams ) ]
    pub fn max_reserved_remote_streams(this: &ClientSessionOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxReservedRemoteStreams ) ]
    pub fn set_max_reserved_remote_streams(this: &ClientSessionOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = createConnection ) ]
    pub fn create_connection(this: &ClientSessionOptions) -> Option<Function>;
    # [ wasm_bindgen ( method , setter , js_name = createConnection ) ]
    pub fn set_create_connection(this: &ClientSessionOptions, value: Option<&Function>);
    pub type ServerSessionOptions;
    # [ wasm_bindgen ( method , getter , js_name = Http1IncomingMessage ) ]
    pub fn http1_incoming_message(this: &ServerSessionOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Http1IncomingMessage ) ]
    pub fn set_http1_incoming_message(this: &ServerSessionOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Http1ServerResponse ) ]
    pub fn http1_server_response(this: &ServerSessionOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Http1ServerResponse ) ]
    pub fn set_http1_server_response(this: &ServerSessionOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Http2ServerRequest ) ]
    pub fn http2_server_request(this: &ServerSessionOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Http2ServerRequest ) ]
    pub fn set_http2_server_request(this: &ServerSessionOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Http2ServerResponse ) ]
    pub fn http2_server_response(this: &ServerSessionOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Http2ServerResponse ) ]
    pub fn set_http2_server_response(this: &ServerSessionOptions, value: &JsValue);
    pub type SecureClientSessionOptions;
    pub type SecureServerSessionOptions;
    pub type ServerOptions;
    pub type SecureServerOptions;
    # [ wasm_bindgen ( method , getter , js_name = allowHTTP1 ) ]
    pub fn allow_http1(this: &SecureServerOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = allowHTTP1 ) ]
    pub fn set_allow_http1(this: &SecureServerOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn origins(this: &SecureServerOptions) -> Option<Array>;
    #[wasm_bindgen(method, setter)]
    pub fn set_origins(this: &SecureServerOptions, value: Option<&Array>);
    pub type Http2Server;
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_6(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_6(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_7(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_7(this: &Http2Server, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(
        this: &Http2Server,
        event: &JsValue,
        request: &Http2ServerRequest,
        response: &Http2ServerResponse,
    ) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(
        this: &Http2Server,
        event: &JsValue,
        request: &Http2ServerRequest,
        response: &Http2ServerResponse,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &Http2Server, event: &JsValue, session: &ServerHttp2Session) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(this: &Http2Server, event: &JsValue, err: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(
        this: &Http2Server,
        event: &JsValue,
        stream: &ServerHttp2Stream,
        headers: &IncomingHttpHeaders,
        flags: f64,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_6(this: &Http2Server, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_6(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_7(this: &Http2Server, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_7(this: &Http2Server, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_6(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_6(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_7(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_7(this: &Http2Server, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_6(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_6(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_7(this: &Http2Server, event: &JsValue, listener: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_7(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &Http2Server, event: &JsValue, listener: &JsValue)
    -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_6(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_6(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_7(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_7(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_6(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_6(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_7(
        this: &Http2Server,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_7(this: &Http2Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = setTimeout ) ]
    pub fn set_timeout(this: &Http2Server, msec: Option<f64>, callback: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( method , setter , js_name = setTimeout ) ]
    pub fn set_set_timeout(this: &Http2Server, value: &Function);
    pub type Http2SecureServer;
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_6(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_6(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_7(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_7(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_8(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_8(this: &Http2SecureServer, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(
        this: &Http2SecureServer,
        event: &JsValue,
        request: &Http2ServerRequest,
        response: &Http2ServerResponse,
    ) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(
        this: &Http2SecureServer,
        event: &JsValue,
        request: &Http2ServerRequest,
        response: &Http2ServerResponse,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &Http2SecureServer, event: &JsValue, session: &ServerHttp2Session) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(this: &Http2SecureServer, event: &JsValue, err: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(
        this: &Http2SecureServer,
        event: &JsValue,
        stream: &ServerHttp2Stream,
        headers: &IncomingHttpHeaders,
        flags: f64,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_6(this: &Http2SecureServer, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_6(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_7(
        this: &Http2SecureServer,
        event: &JsValue,
        socket: &crate::tls::TLSSocket,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_7(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_8(this: &Http2SecureServer, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_8(this: &Http2SecureServer, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Http2SecureServer, event: &JsValue, listener: &JsValue) -> Http2SecureServer;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &Http2SecureServer, event: &JsValue, listener: &JsValue)
    -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &Http2SecureServer, event: &JsValue, listener: &JsValue)
    -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(this: &Http2SecureServer, event: &JsValue, listener: &JsValue)
    -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(this: &Http2SecureServer, event: &JsValue, listener: &JsValue)
    -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_6(this: &Http2SecureServer, event: &JsValue, listener: &JsValue)
    -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_6(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_7(this: &Http2SecureServer, event: &JsValue, listener: &JsValue)
    -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_7(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_8(this: &Http2SecureServer, event: &JsValue, listener: &JsValue)
    -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_8(this: &Http2SecureServer, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Http2SecureServer, event: &JsValue, listener: &JsValue)
    -> Http2SecureServer;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_6(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_6(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_7(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_7(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_8(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_8(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_6(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_6(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_7(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_7(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_8(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_8(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_6(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_6(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_7(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_7(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_8(
        this: &Http2SecureServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_8(this: &Http2SecureServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = setTimeout ) ]
    pub fn set_timeout(
        this: &Http2SecureServer,
        msec: Option<f64>,
        callback: &JsValue,
    ) -> Http2SecureServer;
    # [ wasm_bindgen ( method , setter , js_name = setTimeout ) ]
    pub fn set_set_timeout(this: &Http2SecureServer, value: &Function);
    pub type Http2ServerRequest;
    #[wasm_bindgen(constructor)]
    pub fn new_http2_server_request(
        stream: &ServerHttp2Stream,
        headers: &IncomingHttpHeaders,
        options: &internal::ReadableOptions,
        raw_headers: &Array,
    ) -> Http2ServerRequest;
    #[wasm_bindgen(method, getter)]
    pub fn aborted(this: &Http2ServerRequest) -> bool;
    #[wasm_bindgen(method, getter)]
    pub fn authority(this: &Http2ServerRequest) -> String;
    #[wasm_bindgen(method, getter)]
    pub fn headers(this: &Http2ServerRequest) -> IncomingHttpHeaders;
    # [ wasm_bindgen ( method , getter , js_name = httpVersion ) ]
    pub fn http_version(this: &Http2ServerRequest) -> String;
    #[wasm_bindgen(method, getter)]
    pub fn method(this: &Http2ServerRequest) -> String;
    # [ wasm_bindgen ( method , getter , js_name = rawHeaders ) ]
    pub fn raw_headers(this: &Http2ServerRequest) -> Array;
    # [ wasm_bindgen ( method , getter , js_name = rawTrailers ) ]
    pub fn raw_trailers(this: &Http2ServerRequest) -> Array;
    #[wasm_bindgen(method, getter)]
    pub fn scheme(this: &Http2ServerRequest) -> String;
    #[wasm_bindgen(method, getter)]
    pub fn socket(this: &Http2ServerRequest) -> JsValue;
    #[wasm_bindgen(method, getter)]
    pub fn stream(this: &Http2ServerRequest) -> ServerHttp2Stream;
    #[wasm_bindgen(method, getter)]
    pub fn trailers(this: &Http2ServerRequest) -> IncomingHttpHeaders;
    #[wasm_bindgen(method, getter)]
    pub fn url(this: &Http2ServerRequest) -> String;
    # [ wasm_bindgen ( method , js_name = setTimeout ) ]
    pub fn set_timeout(this: &Http2ServerRequest, msecs: f64, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = setTimeout ) ]
    pub fn set_set_timeout(this: &Http2ServerRequest, value: &Function);
    #[wasm_bindgen(method)]
    pub fn read(this: &Http2ServerRequest, size: Option<f64>) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_read(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_6(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_6(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_7(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_7(this: &Http2ServerRequest, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Http2ServerRequest, event: &JsValue, had_error: bool, code: f64) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &Http2ServerRequest, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &Http2ServerRequest, event: &JsValue, chunk: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(this: &Http2ServerRequest, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(this: &Http2ServerRequest, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_6(this: &Http2ServerRequest, event: &JsValue, err: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_6(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_7(this: &Http2ServerRequest, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_7(this: &Http2ServerRequest, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Http2ServerRequest, event: &JsValue, listener: &JsValue)
    -> Http2ServerRequest;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_6(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_6(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_7(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_7(this: &Http2ServerRequest, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_6(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_6(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_7(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_7(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_6(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_6(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_7(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_7(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_6(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_6(this: &Http2ServerRequest, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_7(
        this: &Http2ServerRequest,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerRequest;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_7(this: &Http2ServerRequest, value: &Function);
    pub type Http2ServerResponse;
    #[wasm_bindgen(constructor)]
    pub fn new_http2_server_response(stream: &ServerHttp2Stream) -> Http2ServerResponse;
    #[wasm_bindgen(method, getter)]
    pub fn connection(this: &Http2ServerResponse) -> JsValue;
    #[wasm_bindgen(method, getter)]
    pub fn finished(this: &Http2ServerResponse) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = headersSent ) ]
    pub fn headers_sent(this: &Http2ServerResponse) -> bool;
    #[wasm_bindgen(method, getter)]
    pub fn socket(this: &Http2ServerResponse) -> JsValue;
    #[wasm_bindgen(method, getter)]
    pub fn stream(this: &Http2ServerResponse) -> ServerHttp2Stream;
    # [ wasm_bindgen ( method , getter , js_name = sendDate ) ]
    pub fn send_date(this: &Http2ServerResponse) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = sendDate ) ]
    pub fn set_send_date(this: &Http2ServerResponse, value: bool);
    # [ wasm_bindgen ( method , getter , js_name = statusCode ) ]
    pub fn status_code(this: &Http2ServerResponse) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = statusCode ) ]
    pub fn set_status_code(this: &Http2ServerResponse, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = statusMessage ) ]
    pub fn status_message(this: &Http2ServerResponse) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = statusMessage ) ]
    pub fn set_status_message(this: &Http2ServerResponse, value: &JsValue);
    # [ wasm_bindgen ( method , js_name = addTrailers ) ]
    pub fn add_trailers(this: &Http2ServerResponse, trailers: &crate::http::OutgoingHttpHeaders);
    # [ wasm_bindgen ( method , setter , js_name = addTrailers ) ]
    pub fn set_add_trailers(this: &Http2ServerResponse, value: &Function);
    #[wasm_bindgen(method)]
    pub fn end(this: &Http2ServerResponse, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_end(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = end ) ]
    pub fn end_2(this: &Http2ServerResponse, data: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = end ) ]
    pub fn set_end_2(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = end ) ]
    pub fn end_3(this: &Http2ServerResponse, data: &JsValue, encoding: &str, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = end ) ]
    pub fn set_end_3(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = getHeader ) ]
    pub fn get_header(this: &Http2ServerResponse, name: &str) -> String;
    # [ wasm_bindgen ( method , setter , js_name = getHeader ) ]
    pub fn set_get_header(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = getHeaderNames ) ]
    pub fn get_header_names(this: &Http2ServerResponse) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = getHeaderNames ) ]
    pub fn set_get_header_names(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = getHeaders ) ]
    pub fn get_headers(this: &Http2ServerResponse) -> crate::http::OutgoingHttpHeaders;
    # [ wasm_bindgen ( method , setter , js_name = getHeaders ) ]
    pub fn set_get_headers(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = hasHeader ) ]
    pub fn has_header(this: &Http2ServerResponse, name: &str) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = hasHeader ) ]
    pub fn set_has_header(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeHeader ) ]
    pub fn remove_header(this: &Http2ServerResponse, name: &str);
    # [ wasm_bindgen ( method , setter , js_name = removeHeader ) ]
    pub fn set_remove_header(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = setHeader ) ]
    pub fn set_header(this: &Http2ServerResponse, name: &str, value: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = setHeader ) ]
    pub fn set_set_header(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = setTimeout ) ]
    pub fn set_timeout(this: &Http2ServerResponse, msecs: f64, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = setTimeout ) ]
    pub fn set_set_timeout(this: &Http2ServerResponse, value: &Function);
    #[wasm_bindgen(method)]
    pub fn write(this: &Http2ServerResponse, chunk: &JsValue, callback: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_write(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = write ) ]
    pub fn write_2(
        this: &Http2ServerResponse,
        chunk: &JsValue,
        encoding: &str,
        callback: &JsValue,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = write ) ]
    pub fn set_write_2(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = writeContinue ) ]
    pub fn write_continue(this: &Http2ServerResponse);
    # [ wasm_bindgen ( method , setter , js_name = writeContinue ) ]
    pub fn set_write_continue(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = writeHead ) ]
    pub fn write_head(
        this: &Http2ServerResponse,
        status_code: f64,
        headers: Option<&crate::http::OutgoingHttpHeaders>,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = writeHead ) ]
    pub fn set_write_head(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = writeHead ) ]
    pub fn write_head_2(
        this: &Http2ServerResponse,
        status_code: f64,
        status_message: &str,
        headers: Option<&crate::http::OutgoingHttpHeaders>,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = writeHead ) ]
    pub fn set_write_head_2(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = createPushResponse ) ]
    pub fn create_push_response(
        this: &Http2ServerResponse,
        headers: &crate::http::OutgoingHttpHeaders,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = createPushResponse ) ]
    pub fn set_create_push_response(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_6(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_6(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_7(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_7(this: &Http2ServerResponse, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Http2ServerResponse, event: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &Http2ServerResponse, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &Http2ServerResponse, event: &JsValue, error: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(this: &Http2ServerResponse, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(this: &Http2ServerResponse, event: &JsValue, src: &internal::Readable) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_6(this: &Http2ServerResponse, event: &JsValue, src: &internal::Readable) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_6(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_7(this: &Http2ServerResponse, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_7(this: &Http2ServerResponse, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_6(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_6(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_7(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_7(this: &Http2ServerResponse, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_6(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_6(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_7(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_7(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_6(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_6(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_7(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_7(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_6(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_6(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_7(
        this: &Http2ServerResponse,
        event: &JsValue,
        listener: &JsValue,
    ) -> Http2ServerResponse;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_7(this: &Http2ServerResponse, value: &Function);
    # [ wasm_bindgen ( js_name = getDefaultSettings ) ]
    pub fn get_default_settings() -> Settings;
    # [ wasm_bindgen ( js_name = getPackedSettings ) ]
    pub fn get_packed_settings(settings: &Settings) -> Buffer;
    # [ wasm_bindgen ( js_name = getUnpackedSettings ) ]
    pub fn get_unpacked_settings(buf: &Uint8Array) -> Settings;
    # [ wasm_bindgen ( js_name = createServer ) ]
    pub fn create_server(on_request_handler: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( js_name = createServer ) ]
    pub fn create_server_2(options: &ServerOptions, on_request_handler: &JsValue) -> Http2Server;
    # [ wasm_bindgen ( js_name = createSecureServer ) ]
    pub fn create_secure_server(on_request_handler: &JsValue) -> Http2SecureServer;
    # [ wasm_bindgen ( js_name = createSecureServer ) ]
    pub fn create_secure_server_2(
        options: &SecureServerOptions,
        on_request_handler: &JsValue,
    ) -> Http2SecureServer;
    #[wasm_bindgen()]
    pub fn connect(authority: &JsValue, listener: &JsValue) -> ClientHttp2Session;
    # [ wasm_bindgen ( js_name = connect ) ]
    pub fn connect_2(
        authority: &JsValue,
        options: &JsValue,
        listener: &JsValue,
    ) -> ClientHttp2Session;
}
