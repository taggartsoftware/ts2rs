// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl BasePrivateKeyEncodingOptions {
    pub fn new() -> BasePrivateKeyEncodingOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Certificate {
    pub fn new() -> Certificate {
        JsCast::unchecked_into(Object::new())
    }
}
impl Cipher {
    pub fn new() -> Cipher {
        JsCast::unchecked_into(Object::new())
    }
}
impl CipherCCM {
    pub fn new() -> CipherCCM {
        JsCast::unchecked_into(Object::new())
    }
}
impl CipherCCMOptions {
    pub fn new() -> CipherCCMOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl CipherGCM {
    pub fn new() -> CipherGCM {
        JsCast::unchecked_into(Object::new())
    }
}
impl CipherGCMOptions {
    pub fn new() -> CipherGCMOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl DSAKeyPairKeyObjectOptions {
    pub fn new() -> DSAKeyPairKeyObjectOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl DSAKeyPairOptions {
    pub fn new() -> DSAKeyPairOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Decipher {
    pub fn new() -> Decipher {
        JsCast::unchecked_into(Object::new())
    }
}
impl DecipherCCM {
    pub fn new() -> DecipherCCM {
        JsCast::unchecked_into(Object::new())
    }
}
impl DecipherGCM {
    pub fn new() -> DecipherGCM {
        JsCast::unchecked_into(Object::new())
    }
}
impl DiffieHellman {
    pub fn new() -> DiffieHellman {
        JsCast::unchecked_into(Object::new())
    }
}
impl ECDH {
    pub fn new() -> ECDH {
        JsCast::unchecked_into(Object::new())
    }
}
impl ECKeyPairKeyObjectOptions {
    pub fn new() -> ECKeyPairKeyObjectOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ECKeyPairOptions {
    pub fn new() -> ECKeyPairOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Hash {
    pub fn new() -> Hash {
        JsCast::unchecked_into(Object::new())
    }
}
impl HashOptions {
    pub fn new() -> HashOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Hmac {
    pub fn new() -> Hmac {
        JsCast::unchecked_into(Object::new())
    }
}
impl KeyExportOptions {
    pub fn new() -> KeyExportOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl KeyObject {
    pub fn new() -> KeyObject {
        JsCast::unchecked_into(Object::new())
    }
}
impl KeyPairKeyObjectResult {
    pub fn new() -> KeyPairKeyObjectResult {
        JsCast::unchecked_into(Object::new())
    }
}
impl KeyPairSyncResult {
    pub fn new() -> KeyPairSyncResult {
        JsCast::unchecked_into(Object::new())
    }
}
impl PrivateKeyInput {
    pub fn new() -> PrivateKeyInput {
        JsCast::unchecked_into(Object::new())
    }
}
impl PublicKeyInput {
    pub fn new() -> PublicKeyInput {
        JsCast::unchecked_into(Object::new())
    }
}
impl RSAKeyPairKeyObjectOptions {
    pub fn new() -> RSAKeyPairKeyObjectOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl RSAKeyPairOptions {
    pub fn new() -> RSAKeyPairOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl RsaPrivateKey {
    pub fn new() -> RsaPrivateKey {
        JsCast::unchecked_into(Object::new())
    }
}
impl RsaPublicKey {
    pub fn new() -> RsaPublicKey {
        JsCast::unchecked_into(Object::new())
    }
}
impl ScryptOptions {
    pub fn new() -> ScryptOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl SignPrivateKeyInput {
    pub fn new() -> SignPrivateKeyInput {
        JsCast::unchecked_into(Object::new())
    }
}
impl Signer {
    pub fn new() -> Signer {
        JsCast::unchecked_into(Object::new())
    }
}
impl SigningOptions {
    pub fn new() -> SigningOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Verify {
    pub fn new() -> Verify {
        JsCast::unchecked_into(Object::new())
    }
}
impl VerifyKeyWithOptions {
    pub fn new() -> VerifyKeyWithOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::crypto::Cipher {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Cipher> for crate::node_js::EventEmitter {
    fn from(child: crate::crypto::Cipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::crypto::Cipher {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Cipher> for crate::node_js::ReadableStream {
    fn from(child: crate::crypto::Cipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::crypto::Cipher {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Cipher> for crate::node_js::WritableStream {
    fn from(child: crate::crypto::Cipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::crypto::CipherCCM {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::CipherCCM> for crate::node_js::EventEmitter {
    fn from(child: crate::crypto::CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::crypto::CipherCCM {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::CipherCCM> for crate::node_js::ReadableStream {
    fn from(child: crate::crypto::CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::crypto::CipherCCM {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::CipherCCM> for crate::node_js::WritableStream {
    fn from(child: crate::crypto::CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::crypto::Cipher> for crate::crypto::CipherCCM {
    fn as_ref(&self) -> &crate::crypto::Cipher {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::CipherCCM> for crate::crypto::Cipher {
    fn from(child: crate::crypto::CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::crypto::CipherGCM {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::CipherGCM> for crate::node_js::EventEmitter {
    fn from(child: crate::crypto::CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::crypto::CipherGCM {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::CipherGCM> for crate::node_js::ReadableStream {
    fn from(child: crate::crypto::CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::crypto::CipherGCM {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::CipherGCM> for crate::node_js::WritableStream {
    fn from(child: crate::crypto::CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::crypto::Cipher> for crate::crypto::CipherGCM {
    fn as_ref(&self) -> &crate::crypto::Cipher {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::CipherGCM> for crate::crypto::Cipher {
    fn from(child: crate::crypto::CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::crypto::Decipher {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Decipher> for crate::node_js::EventEmitter {
    fn from(child: crate::crypto::Decipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::crypto::Decipher {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Decipher> for crate::node_js::ReadableStream {
    fn from(child: crate::crypto::Decipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::crypto::Decipher {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Decipher> for crate::node_js::WritableStream {
    fn from(child: crate::crypto::Decipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::crypto::DecipherCCM {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::DecipherCCM> for crate::node_js::EventEmitter {
    fn from(child: crate::crypto::DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::crypto::DecipherCCM {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::DecipherCCM> for crate::node_js::ReadableStream {
    fn from(child: crate::crypto::DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::crypto::DecipherCCM {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::DecipherCCM> for crate::node_js::WritableStream {
    fn from(child: crate::crypto::DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::crypto::Decipher> for crate::crypto::DecipherCCM {
    fn as_ref(&self) -> &crate::crypto::Decipher {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::DecipherCCM> for crate::crypto::Decipher {
    fn from(child: crate::crypto::DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::crypto::DecipherGCM {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::DecipherGCM> for crate::node_js::EventEmitter {
    fn from(child: crate::crypto::DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::crypto::DecipherGCM {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::DecipherGCM> for crate::node_js::ReadableStream {
    fn from(child: crate::crypto::DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::crypto::DecipherGCM {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::DecipherGCM> for crate::node_js::WritableStream {
    fn from(child: crate::crypto::DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::crypto::Decipher> for crate::crypto::DecipherGCM {
    fn as_ref(&self) -> &crate::crypto::Decipher {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::DecipherGCM> for crate::crypto::Decipher {
    fn from(child: crate::crypto::DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::crypto::Hash {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Hash> for crate::node_js::EventEmitter {
    fn from(child: crate::crypto::Hash) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::crypto::Hash {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Hash> for crate::node_js::ReadableStream {
    fn from(child: crate::crypto::Hash) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::crypto::Hash {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Hash> for crate::node_js::WritableStream {
    fn from(child: crate::crypto::Hash) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::crypto::Hmac {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Hmac> for crate::node_js::EventEmitter {
    fn from(child: crate::crypto::Hmac) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::crypto::Hmac {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Hmac> for crate::node_js::ReadableStream {
    fn from(child: crate::crypto::Hmac) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::crypto::Hmac {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Hmac> for crate::node_js::WritableStream {
    fn from(child: crate::crypto::Hmac) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::crypto::PrivateKeyInput> for crate::crypto::SignPrivateKeyInput {
    fn as_ref(&self) -> &crate::crypto::PrivateKeyInput {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::SignPrivateKeyInput> for crate::crypto::PrivateKeyInput {
    fn from(child: crate::crypto::SignPrivateKeyInput) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::crypto::SigningOptions> for crate::crypto::SignPrivateKeyInput {
    fn as_ref(&self) -> &crate::crypto::SigningOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::SignPrivateKeyInput> for crate::crypto::SigningOptions {
    fn from(child: crate::crypto::SignPrivateKeyInput) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::crypto::Signer {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Signer> for crate::node_js::EventEmitter {
    fn from(child: crate::crypto::Signer) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::crypto::Signer {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Signer> for crate::node_js::WritableStream {
    fn from(child: crate::crypto::Signer) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::crypto::Verify {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Verify> for crate::node_js::EventEmitter {
    fn from(child: crate::crypto::Verify) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::crypto::Verify {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::Verify> for crate::node_js::WritableStream {
    fn from(child: crate::crypto::Verify) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::crypto::KeyObject> for crate::crypto::VerifyKeyWithOptions {
    fn as_ref(&self) -> &crate::crypto::KeyObject {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::VerifyKeyWithOptions> for crate::crypto::KeyObject {
    fn from(child: crate::crypto::VerifyKeyWithOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::crypto::SigningOptions> for crate::crypto::VerifyKeyWithOptions {
    fn as_ref(&self) -> &crate::crypto::SigningOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::crypto::VerifyKeyWithOptions> for crate::crypto::SigningOptions {
    fn from(child: crate::crypto::VerifyKeyWithOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
