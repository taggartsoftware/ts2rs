// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl BasePrivateKeyEncodingOptions {
    pub fn new() -> BasePrivateKeyEncodingOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Certificate {
    pub fn new() -> Certificate {
        JsCast::unchecked_into(Object::new())
    }
}
impl Cipher {
    pub fn new() -> Cipher {
        JsCast::unchecked_into(Object::new())
    }
}
impl CipherCCM {
    pub fn new() -> CipherCCM {
        JsCast::unchecked_into(Object::new())
    }
}
impl CipherCCMOptions {
    pub fn new() -> CipherCCMOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl CipherGCM {
    pub fn new() -> CipherGCM {
        JsCast::unchecked_into(Object::new())
    }
}
impl CipherGCMOptions {
    pub fn new() -> CipherGCMOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl DSAKeyPairKeyObjectOptions {
    pub fn new() -> DSAKeyPairKeyObjectOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl DSAKeyPairOptions {
    pub fn new() -> DSAKeyPairOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Decipher {
    pub fn new() -> Decipher {
        JsCast::unchecked_into(Object::new())
    }
}
impl DecipherCCM {
    pub fn new() -> DecipherCCM {
        JsCast::unchecked_into(Object::new())
    }
}
impl DecipherGCM {
    pub fn new() -> DecipherGCM {
        JsCast::unchecked_into(Object::new())
    }
}
impl DiffieHellman {
    pub fn new() -> DiffieHellman {
        JsCast::unchecked_into(Object::new())
    }
}
impl ECDH {
    pub fn new() -> ECDH {
        JsCast::unchecked_into(Object::new())
    }
}
impl ECKeyPairKeyObjectOptions {
    pub fn new() -> ECKeyPairKeyObjectOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ECKeyPairOptions {
    pub fn new() -> ECKeyPairOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Hash {
    pub fn new() -> Hash {
        JsCast::unchecked_into(Object::new())
    }
}
impl HashOptions {
    pub fn new() -> HashOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Hmac {
    pub fn new() -> Hmac {
        JsCast::unchecked_into(Object::new())
    }
}
impl KeyExportOptions {
    pub fn new() -> KeyExportOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl KeyObject {
    pub fn new() -> KeyObject {
        JsCast::unchecked_into(Object::new())
    }
}
impl KeyPairKeyObjectResult {
    pub fn new() -> KeyPairKeyObjectResult {
        JsCast::unchecked_into(Object::new())
    }
}
impl KeyPairSyncResult {
    pub fn new() -> KeyPairSyncResult {
        JsCast::unchecked_into(Object::new())
    }
}
impl PrivateKeyInput {
    pub fn new() -> PrivateKeyInput {
        JsCast::unchecked_into(Object::new())
    }
}
impl PublicKeyInput {
    pub fn new() -> PublicKeyInput {
        JsCast::unchecked_into(Object::new())
    }
}
impl RSAKeyPairKeyObjectOptions {
    pub fn new() -> RSAKeyPairKeyObjectOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl RSAKeyPairOptions {
    pub fn new() -> RSAKeyPairOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl RsaPrivateKey {
    pub fn new() -> RsaPrivateKey {
        JsCast::unchecked_into(Object::new())
    }
}
impl RsaPublicKey {
    pub fn new() -> RsaPublicKey {
        JsCast::unchecked_into(Object::new())
    }
}
impl ScryptOptions {
    pub fn new() -> ScryptOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl SignPrivateKeyInput {
    pub fn new() -> SignPrivateKeyInput {
        JsCast::unchecked_into(Object::new())
    }
}
impl Signer {
    pub fn new() -> Signer {
        JsCast::unchecked_into(Object::new())
    }
}
impl SigningOptions {
    pub fn new() -> SigningOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Verify {
    pub fn new() -> Verify {
        JsCast::unchecked_into(Object::new())
    }
}
impl VerifyKeyWithOptions {
    pub fn new() -> VerifyKeyWithOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<Duplex> for Cipher {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<Cipher> for Duplex {
    fn from(child: Cipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Cipher {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Cipher> for EventEmitter {
    fn from(child: Cipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Cipher {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Cipher> for node_js::EventEmitter {
    fn from(child: Cipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Cipher {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Cipher> for node_js::ReadableStream {
    fn from(child: Cipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Cipher {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Cipher> for node_js::WritableStream {
    fn from(child: Cipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for Cipher {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Cipher> for Readable {
    fn from(child: Cipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Cipher {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Cipher> for Stream {
    fn from(child: Cipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for Cipher {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Cipher> for Writable {
    fn from(child: Cipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Cipher> for CipherCCM {
    fn as_ref(&self) -> &Cipher {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCM> for Cipher {
    fn from(child: CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for CipherCCM {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCM> for Duplex {
    fn from(child: CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for CipherCCM {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCM> for EventEmitter {
    fn from(child: CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for CipherCCM {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCM> for node_js::EventEmitter {
    fn from(child: CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for CipherCCM {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCM> for node_js::ReadableStream {
    fn from(child: CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for CipherCCM {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCM> for node_js::WritableStream {
    fn from(child: CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for CipherCCM {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCM> for Readable {
    fn from(child: CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for CipherCCM {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCM> for Stream {
    fn from(child: CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for CipherCCM {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCM> for Writable {
    fn from(child: CipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<DuplexOptions> for CipherCCMOptions {
    fn as_ref(&self) -> &DuplexOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCMOptions> for DuplexOptions {
    fn from(child: CipherCCMOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableOptions> for CipherCCMOptions {
    fn as_ref(&self) -> &ReadableOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCMOptions> for ReadableOptions {
    fn from(child: CipherCCMOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableOptions> for CipherCCMOptions {
    fn as_ref(&self) -> &WritableOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherCCMOptions> for WritableOptions {
    fn from(child: CipherCCMOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Cipher> for CipherGCM {
    fn as_ref(&self) -> &Cipher {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCM> for Cipher {
    fn from(child: CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for CipherGCM {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCM> for Duplex {
    fn from(child: CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for CipherGCM {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCM> for EventEmitter {
    fn from(child: CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for CipherGCM {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCM> for node_js::EventEmitter {
    fn from(child: CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for CipherGCM {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCM> for node_js::ReadableStream {
    fn from(child: CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for CipherGCM {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCM> for node_js::WritableStream {
    fn from(child: CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for CipherGCM {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCM> for Readable {
    fn from(child: CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for CipherGCM {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCM> for Stream {
    fn from(child: CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for CipherGCM {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCM> for Writable {
    fn from(child: CipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<DuplexOptions> for CipherGCMOptions {
    fn as_ref(&self) -> &DuplexOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCMOptions> for DuplexOptions {
    fn from(child: CipherGCMOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableOptions> for CipherGCMOptions {
    fn as_ref(&self) -> &ReadableOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCMOptions> for ReadableOptions {
    fn from(child: CipherGCMOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableOptions> for CipherGCMOptions {
    fn as_ref(&self) -> &WritableOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<CipherGCMOptions> for WritableOptions {
    fn from(child: CipherGCMOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for Decipher {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<Decipher> for Duplex {
    fn from(child: Decipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Decipher {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Decipher> for EventEmitter {
    fn from(child: Decipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Decipher {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Decipher> for node_js::EventEmitter {
    fn from(child: Decipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Decipher {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Decipher> for node_js::ReadableStream {
    fn from(child: Decipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Decipher {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Decipher> for node_js::WritableStream {
    fn from(child: Decipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for Decipher {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Decipher> for Readable {
    fn from(child: Decipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Decipher {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Decipher> for Stream {
    fn from(child: Decipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for Decipher {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Decipher> for Writable {
    fn from(child: Decipher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Decipher> for DecipherCCM {
    fn as_ref(&self) -> &Decipher {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherCCM> for Decipher {
    fn from(child: DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for DecipherCCM {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherCCM> for Duplex {
    fn from(child: DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for DecipherCCM {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherCCM> for EventEmitter {
    fn from(child: DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for DecipherCCM {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherCCM> for node_js::EventEmitter {
    fn from(child: DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for DecipherCCM {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherCCM> for node_js::ReadableStream {
    fn from(child: DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for DecipherCCM {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherCCM> for node_js::WritableStream {
    fn from(child: DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for DecipherCCM {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherCCM> for Readable {
    fn from(child: DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for DecipherCCM {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherCCM> for Stream {
    fn from(child: DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for DecipherCCM {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherCCM> for Writable {
    fn from(child: DecipherCCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Decipher> for DecipherGCM {
    fn as_ref(&self) -> &Decipher {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherGCM> for Decipher {
    fn from(child: DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for DecipherGCM {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherGCM> for Duplex {
    fn from(child: DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for DecipherGCM {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherGCM> for EventEmitter {
    fn from(child: DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for DecipherGCM {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherGCM> for node_js::EventEmitter {
    fn from(child: DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for DecipherGCM {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherGCM> for node_js::ReadableStream {
    fn from(child: DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for DecipherGCM {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherGCM> for node_js::WritableStream {
    fn from(child: DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for DecipherGCM {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherGCM> for Readable {
    fn from(child: DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for DecipherGCM {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherGCM> for Stream {
    fn from(child: DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for DecipherGCM {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<DecipherGCM> for Writable {
    fn from(child: DecipherGCM) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for Hash {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hash> for Duplex {
    fn from(child: Hash) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Hash {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hash> for EventEmitter {
    fn from(child: Hash) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Hash {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hash> for node_js::EventEmitter {
    fn from(child: Hash) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Hash {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hash> for node_js::ReadableStream {
    fn from(child: Hash) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Hash {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hash> for node_js::WritableStream {
    fn from(child: Hash) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for Hash {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hash> for Readable {
    fn from(child: Hash) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Hash {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hash> for Stream {
    fn from(child: Hash) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for Hash {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hash> for Writable {
    fn from(child: Hash) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<DuplexOptions> for HashOptions {
    fn as_ref(&self) -> &DuplexOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<HashOptions> for DuplexOptions {
    fn from(child: HashOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableOptions> for HashOptions {
    fn as_ref(&self) -> &ReadableOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<HashOptions> for ReadableOptions {
    fn from(child: HashOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableOptions> for HashOptions {
    fn as_ref(&self) -> &WritableOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<HashOptions> for WritableOptions {
    fn from(child: HashOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for Hmac {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hmac> for Duplex {
    fn from(child: Hmac) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Hmac {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hmac> for EventEmitter {
    fn from(child: Hmac) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Hmac {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hmac> for node_js::EventEmitter {
    fn from(child: Hmac) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Hmac {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hmac> for node_js::ReadableStream {
    fn from(child: Hmac) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Hmac {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hmac> for node_js::WritableStream {
    fn from(child: Hmac) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for Hmac {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hmac> for Readable {
    fn from(child: Hmac) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Hmac {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hmac> for Stream {
    fn from(child: Hmac) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for Hmac {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<Hmac> for Writable {
    fn from(child: Hmac) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<PrivateKeyInput> for SignPrivateKeyInput {
    fn as_ref(&self) -> &PrivateKeyInput {
        JsCast::unchecked_ref(self)
    }
}
impl From<SignPrivateKeyInput> for PrivateKeyInput {
    fn from(child: SignPrivateKeyInput) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<SigningOptions> for SignPrivateKeyInput {
    fn as_ref(&self) -> &SigningOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<SignPrivateKeyInput> for SigningOptions {
    fn from(child: SignPrivateKeyInput) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Signer {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Signer> for EventEmitter {
    fn from(child: Signer) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Signer {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Signer> for node_js::EventEmitter {
    fn from(child: Signer) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Signer {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Signer> for node_js::WritableStream {
    fn from(child: Signer) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Signer {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Signer> for Stream {
    fn from(child: Signer) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Verify {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Verify> for EventEmitter {
    fn from(child: Verify) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Verify {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Verify> for node_js::EventEmitter {
    fn from(child: Verify) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Verify {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Verify> for node_js::WritableStream {
    fn from(child: Verify) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for Verify {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Verify> for Stream {
    fn from(child: Verify) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<KeyObject> for VerifyKeyWithOptions {
    fn as_ref(&self) -> &KeyObject {
        JsCast::unchecked_ref(self)
    }
}
impl From<VerifyKeyWithOptions> for KeyObject {
    fn from(child: VerifyKeyWithOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<SigningOptions> for VerifyKeyWithOptions {
    fn as_ref(&self) -> &SigningOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<VerifyKeyWithOptions> for SigningOptions {
    fn from(child: VerifyKeyWithOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
