// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "inspector")]
extern "C" {
    pub type InspectorNotification;
    #[wasm_bindgen(method, getter)]
    pub fn method(this: &InspectorNotification) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_method(this: &InspectorNotification, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn params(this: &InspectorNotification) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_params(this: &InspectorNotification, value: &JsValue);
    #[doc = "The inspector.Session is used for dispatching messages to the V8 inspector back-end and receiving message responses and notifications."]
    pub type Session;
    #[wasm_bindgen(constructor)]
    pub fn new_session() -> Session;
    #[doc = "Connects a session to the inspector back-end."]
    #[doc = "An exception will be thrown if there is already a connected session established either"]
    #[doc = "through the API or by a front-end connected to the Inspector WebSocket port."]
    #[wasm_bindgen(method)]
    pub fn connect(this: &Session);
    #[wasm_bindgen(method, setter)]
    pub fn set_connect(this: &Session, value: &Function);
    #[doc = "Immediately close the session. All pending message callbacks will be called with an error."]
    #[doc = "session.connect() will need to be called to be able to send messages again."]
    #[doc = "Reconnected session will lose all inspector state, such as enabled agents or configured breakpoints."]
    #[wasm_bindgen(method)]
    pub fn disconnect(this: &Session);
    #[wasm_bindgen(method, setter)]
    pub fn set_disconnect(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    #[wasm_bindgen(method)]
    pub fn post(this: &Session, method: &str, params: &JsValue, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_post(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post2(this: &Session, method: &str, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post2(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post3(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post3(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post4(
        this: &Session,
        method: &JsValue,
        params: Option<&EvaluateParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post4(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post5(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post5(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post6(
        this: &Session,
        method: &JsValue,
        params: Option<&AwaitPromiseParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post6(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post7(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post7(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post8(
        this: &Session,
        method: &JsValue,
        params: Option<&CallFunctionOnParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post8(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post9(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post9(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post10(
        this: &Session,
        method: &JsValue,
        params: Option<&GetPropertiesParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post10(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post11(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post11(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post12(
        this: &Session,
        method: &JsValue,
        params: Option<&ReleaseObjectParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post12(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post13(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post13(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post14(
        this: &Session,
        method: &JsValue,
        params: Option<&ReleaseObjectGroupParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post14(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post15(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post15(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post16(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post16(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post17(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post17(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post18(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post18(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post19(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post19(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post20(
        this: &Session,
        method: &JsValue,
        params: Option<&SetCustomObjectFormatterEnabledParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post20(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post21(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post21(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post22(
        this: &Session,
        method: &JsValue,
        params: Option<&CompileScriptParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post22(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post23(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post23(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post24(
        this: &Session,
        method: &JsValue,
        params: Option<&RunScriptParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post24(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post25(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post25(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post26(
        this: &Session,
        method: &JsValue,
        params: Option<&QueryObjectsParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post26(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post27(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post27(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post28(
        this: &Session,
        method: &JsValue,
        params: Option<&GlobalLexicalScopeNamesParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post28(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post29(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post29(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post30(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post30(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post31(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post31(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post32(
        this: &Session,
        method: &JsValue,
        params: Option<&SetBreakpointsActiveParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post32(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post33(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post33(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post34(
        this: &Session,
        method: &JsValue,
        params: Option<&SetSkipAllPausesParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post34(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post35(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post35(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post36(
        this: &Session,
        method: &JsValue,
        params: Option<&SetBreakpointByUrlParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post36(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post37(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post37(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post38(
        this: &Session,
        method: &JsValue,
        params: Option<&SetBreakpointParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post38(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post39(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post39(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post40(
        this: &Session,
        method: &JsValue,
        params: Option<&RemoveBreakpointParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post40(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post41(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post41(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post42(
        this: &Session,
        method: &JsValue,
        params: Option<&GetPossibleBreakpointsParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post42(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post43(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post43(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post44(
        this: &Session,
        method: &JsValue,
        params: Option<&ContinueToLocationParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post44(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post45(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post45(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post46(
        this: &Session,
        method: &JsValue,
        params: Option<&PauseOnAsyncCallParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post46(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post47(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post47(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post48(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post48(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post49(
        this: &Session,
        method: &JsValue,
        params: Option<&StepIntoParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post49(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post50(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post50(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post51(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post51(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post52(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post52(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post53(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post53(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post54(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post54(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post55(
        this: &Session,
        method: &JsValue,
        params: Option<&GetStackTraceParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post55(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post56(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post56(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post57(
        this: &Session,
        method: &JsValue,
        params: Option<&SearchInContentParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post57(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post58(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post58(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post59(
        this: &Session,
        method: &JsValue,
        params: Option<&SetScriptSourceParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post59(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post60(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post60(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post61(
        this: &Session,
        method: &JsValue,
        params: Option<&RestartFrameParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post61(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post62(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post62(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post63(
        this: &Session,
        method: &JsValue,
        params: Option<&GetScriptSourceParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post63(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post64(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post64(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post65(
        this: &Session,
        method: &JsValue,
        params: Option<&SetPauseOnExceptionsParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post65(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post66(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post66(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post67(
        this: &Session,
        method: &JsValue,
        params: Option<&EvaluateOnCallFrameParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post67(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post68(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post68(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post69(
        this: &Session,
        method: &JsValue,
        params: Option<&SetVariableValueParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post69(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post70(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post70(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post71(
        this: &Session,
        method: &JsValue,
        params: Option<&SetReturnValueParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post71(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post72(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post72(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post73(
        this: &Session,
        method: &JsValue,
        params: Option<&SetAsyncCallStackDepthParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post73(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post74(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post74(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post75(
        this: &Session,
        method: &JsValue,
        params: Option<&SetBlackboxPatternsParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post75(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post76(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post76(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post77(
        this: &Session,
        method: &JsValue,
        params: Option<&SetBlackboxedRangesParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post77(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post78(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post78(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post79(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post79(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post80(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post80(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post81(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post81(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post82(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post82(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post83(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post83(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post84(
        this: &Session,
        method: &JsValue,
        params: Option<&SetSamplingIntervalParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post84(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post85(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post85(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post86(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post86(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post87(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post87(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post88(
        this: &Session,
        method: &JsValue,
        params: Option<&StartPreciseCoverageParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post88(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post89(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post89(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post90(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post90(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post91(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post91(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post92(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post92(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post93(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post93(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post94(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post94(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post95(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post95(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post96(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post96(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post97(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post97(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post98(
        this: &Session,
        method: &JsValue,
        params: Option<&StartTrackingHeapObjectsParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post98(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post99(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post99(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post100(
        this: &Session,
        method: &JsValue,
        params: Option<&StopTrackingHeapObjectsParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post100(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post101(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post101(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post102(
        this: &Session,
        method: &JsValue,
        params: Option<&TakeHeapSnapshotParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post102(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post103(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post103(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post104(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post104(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post105(
        this: &Session,
        method: &JsValue,
        params: Option<&GetObjectByHeapObjectIdParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post105(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post106(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post106(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post107(
        this: &Session,
        method: &JsValue,
        params: Option<&AddInspectedHeapObjectParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post107(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post108(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post108(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post109(
        this: &Session,
        method: &JsValue,
        params: Option<&GetHeapObjectIdParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post109(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post110(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post110(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post111(
        this: &Session,
        method: &JsValue,
        params: Option<&StartSamplingParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post111(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post112(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post112(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post113(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post113(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post114(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post114(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post115(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post115(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post116(
        this: &Session,
        method: &JsValue,
        params: Option<&StartParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post116(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post117(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post117(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post118(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post118(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post119(
        this: &Session,
        method: &JsValue,
        params: Option<&SendMessageToWorkerParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post119(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post120(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post120(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post121(
        this: &Session,
        method: &JsValue,
        params: Option<&EnableParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post121(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post122(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post122(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post123(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post123(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post124(
        this: &Session,
        method: &JsValue,
        params: Option<&DetachParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post124(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post125(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post125(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post126(
        this: &Session,
        method: &JsValue,
        params: Option<&NotifyWhenWaitingForDisconnectParameterType>,
        callback: &JsValue,
    );
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post126(this: &Session, value: &Function);
    #[doc = "Posts a message to the inspector back-end. callback will be notified when a response is received."]
    #[doc = "callback is a function that accepts two optional arguments - error and message-specific result."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns supported domains."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on global object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Add handler to promise with given promise object id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns properties of a given object. Object group of the result is inherited from the target object."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases remote object with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Releases all remote objects that belong to a given group."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Tells inspected instance to run if it was waiting for debugger to attach."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables reporting of execution contexts creation."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Discards collected exceptions and console API calls."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Compiles expression."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Runs script with given id in a given context."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns all let, const and class variables from global scope."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables debugger for given page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Activates / deactivates all breakpoints on the page."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sets JavaScript breakpoint at a given location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Removes JavaScript breakpoint."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Continues execution until specific location is reached."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps over the statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps into the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Steps out of the function call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stops on the next JavaScript statement."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Resumes JavaScript execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns stack trace with given <code>stackTraceId</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Searches for given string in script content."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Edits JavaScript source live."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Restarts particular call frame from the beginning."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Returns source for the script with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Evaluates expression on a given call frame."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes return value in top frame. Available only at return break position."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables or disables async call stacks tracking."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disables console domain, prevents further console messages from being reported to the client."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Does nothing."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Disable type profile. Disabling releases type profile data collected so far."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Collect type profile."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Gets supported tracing categories."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Start trace events collection."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Stop trace events collection. Remaining collected events will be sent as a sequence of"]
    #[doc = "dataCollected events followed by tracingComplete event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sends protocol message over session with given id."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Instructs the inspector to attach to running workers. Will also attach to new workers"]
    #[doc = "as they start"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detaches from all running workers and disables attaching to new workers as they are started."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Detached from the worker with given sessionId."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Enable the `NodeRuntime.waitingForDisconnect`."]
    # [ wasm_bindgen ( method , js_name = post ) ]
    pub fn post127(this: &Session, method: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = post ) ]
    pub fn set_post127(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Session, event: &str, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener2(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener2(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener3(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener3(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener4(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener4(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener5(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener5(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener6(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener6(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener7(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener7(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener8(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener8(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener9(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener9(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener10(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener10(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener11(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener11(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener12(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener12(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener13(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener13(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener14(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener14(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener15(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener15(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener16(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener16(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener17(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener17(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener18(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener18(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener19(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener19(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener20(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener20(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener21(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener21(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener22(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener22(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener23(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener23(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener24(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener24(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener25(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener25(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener26(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener26(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener27(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener27(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener28(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener28(this: &Session, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Session, event: &JsValue, args: &Array) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit2(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit2(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit3(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit3(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit4(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit4(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit5(this: &Session, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit5(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit6(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit6(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit7(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit7(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit8(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit8(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit9(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit9(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit10(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit10(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit11(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit11(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit12(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit12(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit13(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit13(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit14(this: &Session, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit14(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit15(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit15(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit16(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit16(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit17(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit17(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit18(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit18(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit19(this: &Session, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit19(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit20(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit20(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit21(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit21(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit22(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit22(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit23(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit23(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit24(this: &Session, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit24(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit25(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit25(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit26(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit26(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit27(this: &Session, event: &JsValue, message: &InspectorNotification) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit27(this: &Session, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit28(this: &Session, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit28(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    #[wasm_bindgen(method)]
    pub fn on(this: &Session, event: &str, listener: &JsValue) -> Session;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on2(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on2(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on3(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on3(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on4(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on4(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on5(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on5(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on6(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on6(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on7(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on7(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on8(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on8(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on9(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on9(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on10(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on10(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on11(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on11(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on12(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on12(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on13(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on13(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on14(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on14(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on15(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on15(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on16(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on16(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on17(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on17(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on18(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on18(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on19(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on19(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on20(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on20(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on21(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on21(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on22(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on22(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on23(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on23(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on24(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on24(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on25(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on25(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on26(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on26(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on27(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on27(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on28(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on28(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    #[wasm_bindgen(method)]
    pub fn once(this: &Session, event: &str, listener: &JsValue) -> Session;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once2(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once2(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once3(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once3(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once4(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once4(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once5(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once5(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once6(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once6(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once7(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once7(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once8(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once8(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once9(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once9(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once10(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once10(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once11(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once11(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once12(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once12(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once13(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once13(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once14(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once14(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once15(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once15(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once16(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once16(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once17(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once17(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once18(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once18(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once19(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once19(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once20(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once20(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once21(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once21(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once22(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once22(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once23(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once23(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once24(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once24(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once25(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once25(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once26(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once26(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once27(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once27(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once28(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once28(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &Session, event: &str, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener2(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener2(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener3(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener3(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener4(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener4(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener5(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener5(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener6(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener6(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener7(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener7(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener8(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener8(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener9(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener9(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener10(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener10(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener11(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener11(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener12(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener12(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener13(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener13(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener14(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener14(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener15(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener15(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener16(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener16(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener17(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener17(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener18(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener18(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener19(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener19(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener20(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener20(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener21(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener21(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener22(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener22(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener23(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener23(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener24(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener24(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener25(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener25(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener26(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener26(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener27(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener27(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener28(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener28(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &Session, event: &str, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener2(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener2(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener3(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener3(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener4(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener4(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener5(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener5(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener6(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener6(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener7(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener7(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener8(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener8(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener9(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener9(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener10(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener10(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener11(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener11(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener12(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener12(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener13(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener13(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener14(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener14(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener15(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener15(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener16(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener16(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener17(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener17(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener18(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener18(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener19(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener19(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener20(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener20(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener21(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener21(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener22(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener22(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener23(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener23(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener24(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener24(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener25(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener25(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener26(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener26(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener27(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener27(this: &Session, value: &Function);
    #[doc = "Emitted when any notification from the V8 Inspector is received."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new execution context is created."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when execution context is destroyed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when all executionContexts were cleared in browser"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when exception was thrown and unhandled."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when unhandled exception was revoked."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when console API was called."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when object should be inspected (for example, as a result of inspect() command line API call)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when virtual machine fails to parse the script."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when breakpoint is resolved to an actual script and location."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Fired when the virtual machine resumed execution."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when new console message is added."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Sent when new profile recording is started using console.profile() call."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "If heap objects tracking has been started then backend may send update for one or more fragments"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Contains an bucket of collected trace events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Signals that tracing is stopped and there is no trace buffers pending flush, all data were"]
    #[doc = "delivered via dataCollected events."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when attached to a worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Issued when detached from the worker."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Notifies about a new protocol message received from the session"]
    #[doc = "(session ID is provided in attachedToWorker notification)."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "This event is fired instead of `Runtime.executionContextDestroyed` when"]
    #[doc = "enabled."]
    #[doc = "It is fired when the Node process finished all code execution and is"]
    #[doc = "waiting for all frontends to disconnect."]
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener28(this: &Session, event: &JsValue, listener: &JsValue) -> Session;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener28(this: &Session, value: &Function);
    #[doc = "Activate inspector on host and port. Equivalent to node --inspect=[[host:]port], but can be done programatically after node has started."]
    #[doc = "If wait is true, will block until a client has connected to the inspect port and flow control has been passed to the debugger client."]
    #[wasm_bindgen()]
    pub fn open(port: Option<f64>, host: Option<&str>, wait: Option<bool>);
    #[doc = "Deactivate the inspector. Blocks until there are no active connections."]
    #[wasm_bindgen()]
    pub fn close();
    #[doc = "Return the URL of the active inspector, or `undefined` if there is none."]
    #[wasm_bindgen()]
    pub fn url() -> Option<String>;
}
