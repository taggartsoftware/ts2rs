// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl internal {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl Duplex {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl DuplexOptions {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl FinishedOptions {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl PassThrough {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl Pipe {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl Readable {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl ReadableOptions {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl Stream {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl Transform {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl TransformOptions {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl Writable {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl WritableOptions {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl AsRef<node_js::EventEmitter> for internal {
    fn as_ref(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl From<internal> for node_js::EventEmitter {
    fn from(child: internal) -> Self {
        child.unchecked_into()
    }
}
impl internal {
    pub fn to_node_js_event_emitter(self) -> node_js::EventEmitter {
        self.unchecked_into()
    }
    pub fn as_node_js_event_emitter(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::EventEmitter> for Duplex {
    fn as_ref(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl From<Duplex> for node_js::EventEmitter {
    fn from(child: Duplex) -> Self {
        child.unchecked_into()
    }
}
impl Duplex {
    pub fn to_node_js_event_emitter(self) -> node_js::EventEmitter {
        self.unchecked_into()
    }
    pub fn as_node_js_event_emitter(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::ReadableStream> for Duplex {
    fn as_ref(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl From<Duplex> for node_js::ReadableStream {
    fn from(child: Duplex) -> Self {
        child.unchecked_into()
    }
}
impl Duplex {
    pub fn to_node_js_readable_stream(self) -> node_js::ReadableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_readable_stream(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::WritableStream> for Duplex {
    fn as_ref(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
impl From<Duplex> for node_js::WritableStream {
    fn from(child: Duplex) -> Self {
        child.unchecked_into()
    }
}
impl Duplex {
    pub fn to_node_js_writable_stream(self) -> node_js::WritableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_writable_stream(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::EventEmitter> for PassThrough {
    fn as_ref(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl From<PassThrough> for node_js::EventEmitter {
    fn from(child: PassThrough) -> Self {
        child.unchecked_into()
    }
}
impl PassThrough {
    pub fn to_node_js_event_emitter(self) -> node_js::EventEmitter {
        self.unchecked_into()
    }
    pub fn as_node_js_event_emitter(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::ReadableStream> for PassThrough {
    fn as_ref(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl From<PassThrough> for node_js::ReadableStream {
    fn from(child: PassThrough) -> Self {
        child.unchecked_into()
    }
}
impl PassThrough {
    pub fn to_node_js_readable_stream(self) -> node_js::ReadableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_readable_stream(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::WritableStream> for PassThrough {
    fn as_ref(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
impl From<PassThrough> for node_js::WritableStream {
    fn from(child: PassThrough) -> Self {
        child.unchecked_into()
    }
}
impl PassThrough {
    pub fn to_node_js_writable_stream(self) -> node_js::WritableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_writable_stream(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::EventEmitter> for Readable {
    fn as_ref(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl From<Readable> for node_js::EventEmitter {
    fn from(child: Readable) -> Self {
        child.unchecked_into()
    }
}
impl Readable {
    pub fn to_node_js_event_emitter(self) -> node_js::EventEmitter {
        self.unchecked_into()
    }
    pub fn as_node_js_event_emitter(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::ReadableStream> for Readable {
    fn as_ref(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl From<Readable> for node_js::ReadableStream {
    fn from(child: Readable) -> Self {
        child.unchecked_into()
    }
}
impl Readable {
    pub fn to_node_js_readable_stream(self) -> node_js::ReadableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_readable_stream(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::EventEmitter> for Stream {
    fn as_ref(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl From<Stream> for node_js::EventEmitter {
    fn from(child: Stream) -> Self {
        child.unchecked_into()
    }
}
impl Stream {
    pub fn to_node_js_event_emitter(self) -> node_js::EventEmitter {
        self.unchecked_into()
    }
    pub fn as_node_js_event_emitter(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::EventEmitter> for Transform {
    fn as_ref(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl From<Transform> for node_js::EventEmitter {
    fn from(child: Transform) -> Self {
        child.unchecked_into()
    }
}
impl Transform {
    pub fn to_node_js_event_emitter(self) -> node_js::EventEmitter {
        self.unchecked_into()
    }
    pub fn as_node_js_event_emitter(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::ReadableStream> for Transform {
    fn as_ref(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl From<Transform> for node_js::ReadableStream {
    fn from(child: Transform) -> Self {
        child.unchecked_into()
    }
}
impl Transform {
    pub fn to_node_js_readable_stream(self) -> node_js::ReadableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_readable_stream(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::WritableStream> for Transform {
    fn as_ref(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
impl From<Transform> for node_js::WritableStream {
    fn from(child: Transform) -> Self {
        child.unchecked_into()
    }
}
impl Transform {
    pub fn to_node_js_writable_stream(self) -> node_js::WritableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_writable_stream(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::EventEmitter> for Writable {
    fn as_ref(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl From<Writable> for node_js::EventEmitter {
    fn from(child: Writable) -> Self {
        child.unchecked_into()
    }
}
impl Writable {
    pub fn to_node_js_event_emitter(self) -> node_js::EventEmitter {
        self.unchecked_into()
    }
    pub fn as_node_js_event_emitter(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::WritableStream> for Writable {
    fn as_ref(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
impl From<Writable> for node_js::WritableStream {
    fn from(child: Writable) -> Self {
        child.unchecked_into()
    }
}
impl Writable {
    pub fn to_node_js_writable_stream(self) -> node_js::WritableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_writable_stream(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
