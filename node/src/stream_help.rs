// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl internal {
    pub fn new() -> internal {
        JsCast::unchecked_into(Object::new())
    }
}
impl Duplex {
    pub fn new() -> Duplex {
        JsCast::unchecked_into(Object::new())
    }
}
impl DuplexOptions {
    pub fn new() -> DuplexOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl FinishedOptions {
    pub fn new() -> FinishedOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl PassThrough {
    pub fn new() -> PassThrough {
        JsCast::unchecked_into(Object::new())
    }
}
impl Pipe {
    pub fn new() -> Pipe {
        JsCast::unchecked_into(Object::new())
    }
}
impl Readable {
    pub fn new() -> Readable {
        JsCast::unchecked_into(Object::new())
    }
}
impl ReadableOptions {
    pub fn new() -> ReadableOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Stream {
    pub fn new() -> Stream {
        JsCast::unchecked_into(Object::new())
    }
}
impl Transform {
    pub fn new() -> Transform {
        JsCast::unchecked_into(Object::new())
    }
}
impl TransformOptions {
    pub fn new() -> TransformOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Writable {
    pub fn new() -> Writable {
        JsCast::unchecked_into(Object::new())
    }
}
impl WritableOptions {
    pub fn new() -> WritableOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<node_js::EventEmitter> for internal {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<internal> for node_js::EventEmitter {
    fn from(child: internal) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Duplex {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Duplex> for node_js::EventEmitter {
    fn from(child: Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Duplex {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Duplex> for node_js::ReadableStream {
    fn from(child: Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Duplex {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Duplex> for node_js::WritableStream {
    fn from(child: Duplex) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for PassThrough {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for node_js::EventEmitter {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for PassThrough {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for node_js::ReadableStream {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for PassThrough {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<PassThrough> for node_js::WritableStream {
    fn from(child: PassThrough) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Readable {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Readable> for node_js::EventEmitter {
    fn from(child: Readable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Readable {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Readable> for node_js::ReadableStream {
    fn from(child: Readable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Stream {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Stream> for node_js::EventEmitter {
    fn from(child: Stream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Transform {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Transform> for node_js::EventEmitter {
    fn from(child: Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for Transform {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Transform> for node_js::ReadableStream {
    fn from(child: Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Transform {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Transform> for node_js::WritableStream {
    fn from(child: Transform) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Writable {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Writable> for node_js::EventEmitter {
    fn from(child: Writable) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for Writable {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Writable> for node_js::WritableStream {
    fn from(child: Writable) -> Self {
        JsCast::unchecked_into(child)
    }
}
