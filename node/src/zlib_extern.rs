// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "zlib")]
extern "C" {
    pub type ZlibOptions;
    #[wasm_bindgen(method, getter)]
    pub fn flush(this: &ZlibOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_flush(this: &ZlibOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = finishFlush ) ]
    pub fn finish_flush(this: &ZlibOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = finishFlush ) ]
    pub fn set_finish_flush(this: &ZlibOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = chunkSize ) ]
    pub fn chunk_size(this: &ZlibOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = chunkSize ) ]
    pub fn set_chunk_size(this: &ZlibOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = windowBits ) ]
    pub fn window_bits(this: &ZlibOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = windowBits ) ]
    pub fn set_window_bits(this: &ZlibOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn level(this: &ZlibOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_level(this: &ZlibOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = memLevel ) ]
    pub fn mem_level(this: &ZlibOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = memLevel ) ]
    pub fn set_mem_level(this: &ZlibOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn strategy(this: &ZlibOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_strategy(this: &ZlibOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn dictionary(this: &ZlibOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_dictionary(this: &ZlibOptions, value: &JsValue);
    pub type BrotliOptions;
    #[wasm_bindgen(method, getter)]
    pub fn flush(this: &BrotliOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_flush(this: &BrotliOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = finishFlush ) ]
    pub fn finish_flush(this: &BrotliOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = finishFlush ) ]
    pub fn set_finish_flush(this: &BrotliOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = chunkSize ) ]
    pub fn chunk_size(this: &BrotliOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = chunkSize ) ]
    pub fn set_chunk_size(this: &BrotliOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn params(this: &BrotliOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_params(this: &BrotliOptions, value: &JsValue);
    pub type Zlib;
    # [ wasm_bindgen ( method , getter , js_name = bytesRead ) ]
    pub fn bytes_read(this: &Zlib) -> f64;
    # [ wasm_bindgen ( method , getter , js_name = bytesWritten ) ]
    pub fn bytes_written(this: &Zlib) -> f64;
    #[wasm_bindgen(method, getter)]
    pub fn shell(this: &Zlib) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_shell(this: &Zlib, value: &JsValue);
    #[wasm_bindgen(method)]
    pub fn close(this: &Zlib, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_close(this: &Zlib, value: &Function);
    #[wasm_bindgen(method)]
    pub fn flush(this: &Zlib, kind: &JsValue, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_flush(this: &Zlib, value: &Function);
    pub type ZlibParams;
    #[wasm_bindgen(method)]
    pub fn params(this: &ZlibParams, level: f64, strategy: f64, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_params(this: &ZlibParams, value: &Function);
    pub type ZlibReset;
    #[wasm_bindgen(method)]
    pub fn reset(this: &ZlibReset);
    #[wasm_bindgen(method, setter)]
    pub fn set_reset(this: &ZlibReset, value: &Function);
    pub type BrotliCompress;
    pub type BrotliDecompress;
    pub type Gzip;
    pub type Gunzip;
    pub type Deflate;
    pub type Inflate;
    pub type DeflateRaw;
    pub type InflateRaw;
    pub type Unzip;
    # [ wasm_bindgen ( js_name = createBrotliCompress ) ]
    pub fn create_brotli_compress(options: Option<&BrotliOptions>) -> BrotliCompress;
    # [ wasm_bindgen ( js_name = createBrotliDecompress ) ]
    pub fn create_brotli_decompress(options: Option<&BrotliOptions>) -> BrotliDecompress;
    # [ wasm_bindgen ( js_name = createGzip ) ]
    pub fn create_gzip(options: Option<&ZlibOptions>) -> Gzip;
    # [ wasm_bindgen ( js_name = createGunzip ) ]
    pub fn create_gunzip(options: Option<&ZlibOptions>) -> Gunzip;
    # [ wasm_bindgen ( js_name = createDeflate ) ]
    pub fn create_deflate(options: Option<&ZlibOptions>) -> Deflate;
    # [ wasm_bindgen ( js_name = createInflate ) ]
    pub fn create_inflate(options: Option<&ZlibOptions>) -> Inflate;
    # [ wasm_bindgen ( js_name = createDeflateRaw ) ]
    pub fn create_deflate_raw(options: Option<&ZlibOptions>) -> DeflateRaw;
    # [ wasm_bindgen ( js_name = createInflateRaw ) ]
    pub fn create_inflate_raw(options: Option<&ZlibOptions>) -> InflateRaw;
    # [ wasm_bindgen ( js_name = createUnzip ) ]
    pub fn create_unzip(options: Option<&ZlibOptions>) -> Unzip;
    pub type InputType;
    # [ wasm_bindgen ( js_name = brotliCompress ) ]
    pub fn brotli_compress(buf: &InputType, options: &BrotliOptions, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = brotliCompress ) ]
    pub fn brotli_compress_2(buf: &InputType, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = brotliCompressSync ) ]
    pub fn brotli_compress_sync(buf: &InputType, options: Option<&BrotliOptions>) -> Buffer;
    # [ wasm_bindgen ( js_name = brotliDecompress ) ]
    pub fn brotli_decompress(buf: &InputType, options: &BrotliOptions, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = brotliDecompress ) ]
    pub fn brotli_decompress_2(buf: &InputType, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = brotliDecompressSync ) ]
    pub fn brotli_decompress_sync(buf: &InputType, options: Option<&BrotliOptions>) -> Buffer;
    #[wasm_bindgen()]
    pub fn deflate(buf: &InputType, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = deflate ) ]
    pub fn deflate_2(buf: &InputType, options: &ZlibOptions, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = deflateSync ) ]
    pub fn deflate_sync(buf: &InputType, options: Option<&ZlibOptions>) -> Buffer;
    # [ wasm_bindgen ( js_name = deflateRaw ) ]
    pub fn deflate_raw(buf: &InputType, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = deflateRaw ) ]
    pub fn deflate_raw_2(buf: &InputType, options: &ZlibOptions, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = deflateRawSync ) ]
    pub fn deflate_raw_sync(buf: &InputType, options: Option<&ZlibOptions>) -> Buffer;
    #[wasm_bindgen()]
    pub fn gzip(buf: &InputType, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = gzip ) ]
    pub fn gzip_2(buf: &InputType, options: &ZlibOptions, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = gzipSync ) ]
    pub fn gzip_sync(buf: &InputType, options: Option<&ZlibOptions>) -> Buffer;
    #[wasm_bindgen()]
    pub fn gunzip(buf: &InputType, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = gunzip ) ]
    pub fn gunzip_2(buf: &InputType, options: &ZlibOptions, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = gunzipSync ) ]
    pub fn gunzip_sync(buf: &InputType, options: Option<&ZlibOptions>) -> Buffer;
    #[wasm_bindgen()]
    pub fn inflate(buf: &InputType, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = inflate ) ]
    pub fn inflate_2(buf: &InputType, options: &ZlibOptions, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = inflateSync ) ]
    pub fn inflate_sync(buf: &InputType, options: Option<&ZlibOptions>) -> Buffer;
    # [ wasm_bindgen ( js_name = inflateRaw ) ]
    pub fn inflate_raw(buf: &InputType, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = inflateRaw ) ]
    pub fn inflate_raw_2(buf: &InputType, options: &ZlibOptions, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = inflateRawSync ) ]
    pub fn inflate_raw_sync(buf: &InputType, options: Option<&ZlibOptions>) -> Buffer;
    #[wasm_bindgen()]
    pub fn unzip(buf: &InputType, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = unzip ) ]
    pub fn unzip_2(buf: &InputType, options: &ZlibOptions, callback: &CompressCallback);
    # [ wasm_bindgen ( js_name = unzipSync ) ]
    pub fn unzip_sync(buf: &InputType, options: Option<&ZlibOptions>) -> Buffer;
    pub static Z_NO_FLUSH: f64;
    pub static Z_PARTIAL_FLUSH: f64;
    pub static Z_SYNC_FLUSH: f64;
    pub static Z_FULL_FLUSH: f64;
    pub static Z_FINISH: f64;
    pub static Z_BLOCK: f64;
    pub static Z_TREES: f64;
    pub static Z_OK: f64;
    pub static Z_STREAM_END: f64;
    pub static Z_NEED_DICT: f64;
    pub static Z_ERRNO: f64;
    pub static Z_STREAM_ERROR: f64;
    pub static Z_DATA_ERROR: f64;
    pub static Z_MEM_ERROR: f64;
    pub static Z_BUF_ERROR: f64;
    pub static Z_VERSION_ERROR: f64;
    pub static Z_NO_COMPRESSION: f64;
    pub static Z_BEST_SPEED: f64;
    pub static Z_BEST_COMPRESSION: f64;
    pub static Z_DEFAULT_COMPRESSION: f64;
    pub static Z_FILTERED: f64;
    pub static Z_HUFFMAN_ONLY: f64;
    pub static Z_RLE: f64;
    pub static Z_FIXED: f64;
    pub static Z_DEFAULT_STRATEGY: f64;
    pub static Z_BINARY: f64;
    pub static Z_TEXT: f64;
    pub static Z_ASCII: f64;
    pub static Z_UNKNOWN: f64;
    pub static Z_DEFLATED: f64;
}
