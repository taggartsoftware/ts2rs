// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl CallSite {
    pub fn new() -> CallSite {
        JsCast::unchecked_into(Object::new())
    }
}
impl ConsoleConstructor {
    pub fn new() -> ConsoleConstructor {
        JsCast::unchecked_into(Object::new())
    }
}
impl ConsoleConstructorOptions {
    pub fn new() -> ConsoleConstructorOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl CpuUsage {
    pub fn new() -> CpuUsage {
        JsCast::unchecked_into(Object::new())
    }
}
impl Domain {
    pub fn new() -> Domain {
        JsCast::unchecked_into(Object::new())
    }
}
impl ErrnoException {
    pub fn new() -> ErrnoException {
        JsCast::unchecked_into(Object::new())
    }
}
impl EventEmitter {
    pub fn new() -> EventEmitter {
        JsCast::unchecked_into(Object::new())
    }
}
impl Global {
    pub fn new() -> Global {
        JsCast::unchecked_into(Object::new())
    }
}
impl HRTime {
    pub fn new() -> HRTime {
        JsCast::unchecked_into(Object::new())
    }
}
impl Immediate {
    pub fn new() -> Immediate {
        JsCast::unchecked_into(Object::new())
    }
}
impl InspectOptions {
    pub fn new() -> InspectOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl MemoryUsage {
    pub fn new() -> MemoryUsage {
        JsCast::unchecked_into(Object::new())
    }
}
impl Module {
    pub fn new() -> Module {
        JsCast::unchecked_into(Object::new())
    }
}
impl Process {
    pub fn new() -> Process {
        JsCast::unchecked_into(Object::new())
    }
}
impl ProcessEnv {
    pub fn new() -> ProcessEnv {
        JsCast::unchecked_into(Object::new())
    }
}
impl ProcessRelease {
    pub fn new() -> ProcessRelease {
        JsCast::unchecked_into(Object::new())
    }
}
impl ProcessReport {
    pub fn new() -> ProcessReport {
        JsCast::unchecked_into(Object::new())
    }
}
impl ProcessVersions {
    pub fn new() -> ProcessVersions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ReadWriteStream {
    pub fn new() -> ReadWriteStream {
        JsCast::unchecked_into(Object::new())
    }
}
impl ReadableStream {
    pub fn new() -> ReadableStream {
        JsCast::unchecked_into(Object::new())
    }
}
impl ResourceUsage {
    pub fn new() -> ResourceUsage {
        JsCast::unchecked_into(Object::new())
    }
}
impl Socket {
    pub fn new() -> Socket {
        JsCast::unchecked_into(Object::new())
    }
}
impl Timeout {
    pub fn new() -> Timeout {
        JsCast::unchecked_into(Object::new())
    }
}
impl Timer {
    pub fn new() -> Timer {
        JsCast::unchecked_into(Object::new())
    }
}
impl WritableStream {
    pub fn new() -> WritableStream {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<EventEmitter> for Domain {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Domain> for EventEmitter {
    fn from(child: Domain) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Error> for ErrnoException {
    fn as_ref(&self) -> &Error {
        JsCast::unchecked_ref(self)
    }
}
impl From<ErrnoException> for Error {
    fn from(child: ErrnoException) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Process {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Process> for EventEmitter {
    fn from(child: Process) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for ReadWriteStream {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadWriteStream> for EventEmitter {
    fn from(child: ReadWriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableStream> for ReadWriteStream {
    fn as_ref(&self) -> &ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadWriteStream> for ReadableStream {
    fn from(child: ReadWriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableStream> for ReadWriteStream {
    fn as_ref(&self) -> &WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadWriteStream> for WritableStream {
    fn from(child: ReadWriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for ReadableStream {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadableStream> for EventEmitter {
    fn from(child: ReadableStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for Socket {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Socket> for EventEmitter {
    fn from(child: Socket) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadWriteStream> for Socket {
    fn as_ref(&self) -> &ReadWriteStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Socket> for ReadWriteStream {
    fn from(child: Socket) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableStream> for Socket {
    fn as_ref(&self) -> &ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Socket> for ReadableStream {
    fn from(child: Socket) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableStream> for Socket {
    fn as_ref(&self) -> &WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<Socket> for WritableStream {
    fn from(child: Socket) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Timer> for Timeout {
    fn as_ref(&self) -> &Timer {
        JsCast::unchecked_ref(self)
    }
}
impl From<Timeout> for Timer {
    fn from(child: Timeout) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for WritableStream {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<WritableStream> for EventEmitter {
    fn from(child: WritableStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
