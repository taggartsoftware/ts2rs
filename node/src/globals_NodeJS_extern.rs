// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen]
extern "C" {
    pub type InspectOptions;
    #[doc = "If set to `true`, getters are going to be"]
    #[doc = "inspected as well. If set to `'get'` only getters without setter are going"]
    #[doc = "to be inspected. If set to `'set'` only getters having a corresponding"]
    #[doc = "setter are going to be inspected. This might cause side effects depending on"]
    #[doc = "the getter function."]
    #[wasm_bindgen(method, getter)]
    pub fn getters(this: &InspectOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_getters(this: &InspectOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = showHidden ) ]
    pub fn show_hidden(this: &InspectOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = showHidden ) ]
    pub fn set_show_hidden(this: &InspectOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn depth(this: &InspectOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_depth(this: &InspectOptions, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn colors(this: &InspectOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_colors(this: &InspectOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = customInspect ) ]
    pub fn custom_inspect(this: &InspectOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = customInspect ) ]
    pub fn set_custom_inspect(this: &InspectOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = showProxy ) ]
    pub fn show_proxy(this: &InspectOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = showProxy ) ]
    pub fn set_show_proxy(this: &InspectOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = maxArrayLength ) ]
    pub fn max_array_length(this: &InspectOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = maxArrayLength ) ]
    pub fn set_max_array_length(this: &InspectOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = breakLength ) ]
    pub fn break_length(this: &InspectOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = breakLength ) ]
    pub fn set_break_length(this: &InspectOptions, value: Option<f64>);
    #[doc = "Setting this to `false` causes each object key"]
    #[doc = "to be displayed on a new line. It will also add new lines to text that is"]
    #[doc = "longer than `breakLength`. If set to a number, the most `n` inner elements"]
    #[doc = "are united on a single line as long as all properties fit into"]
    #[doc = "`breakLength`. Short array elements are also grouped together. Note that no"]
    #[doc = "text will be reduced below 16 characters, no matter the `breakLength` size."]
    #[doc = "For more information, see the example below."]
    #[wasm_bindgen(method, getter)]
    pub fn compact(this: &InspectOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_compact(this: &InspectOptions, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn sorted(this: &InspectOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_sorted(this: &InspectOptions, value: &JsValue);
    pub type ConsoleConstructorOptions;
    #[wasm_bindgen(method, getter)]
    pub fn stdout(this: &ConsoleConstructorOptions) -> WritableStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdout(this: &ConsoleConstructorOptions, value: &WritableStream);
    #[wasm_bindgen(method, getter)]
    pub fn stderr(this: &ConsoleConstructorOptions) -> Option<WritableStream>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stderr(this: &ConsoleConstructorOptions, value: Option<&WritableStream>);
    # [ wasm_bindgen ( method , getter , js_name = ignoreErrors ) ]
    pub fn ignore_errors(this: &ConsoleConstructorOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = ignoreErrors ) ]
    pub fn set_ignore_errors(this: &ConsoleConstructorOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = colorMode ) ]
    pub fn color_mode(this: &ConsoleConstructorOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = colorMode ) ]
    pub fn set_color_mode(this: &ConsoleConstructorOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = inspectOptions ) ]
    pub fn inspect_options(this: &ConsoleConstructorOptions) -> Option<InspectOptions>;
    # [ wasm_bindgen ( method , setter , js_name = inspectOptions ) ]
    pub fn set_inspect_options(this: &ConsoleConstructorOptions, value: Option<&InspectOptions>);
    pub type ConsoleConstructor;
    #[wasm_bindgen(method, getter)]
    pub fn prototype(this: &ConsoleConstructor) -> Console;
    #[wasm_bindgen(method, setter)]
    pub fn set_prototype(this: &ConsoleConstructor, value: &Console);
    pub type CallSite;
    # [ wasm_bindgen ( method , js_name = getThis ) ]
    pub fn get_this(this: &CallSite) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = getThis ) ]
    pub fn set_get_this(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = getTypeName ) ]
    pub fn get_type_name(this: &CallSite) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = getTypeName ) ]
    pub fn set_get_type_name(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = getFunction ) ]
    pub fn get_function(this: &CallSite) -> Function;
    # [ wasm_bindgen ( method , setter , js_name = getFunction ) ]
    pub fn set_get_function(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = getFunctionName ) ]
    pub fn get_function_name(this: &CallSite) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = getFunctionName ) ]
    pub fn set_get_function_name(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = getMethodName ) ]
    pub fn get_method_name(this: &CallSite) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = getMethodName ) ]
    pub fn set_get_method_name(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = getFileName ) ]
    pub fn get_file_name(this: &CallSite) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = getFileName ) ]
    pub fn set_get_file_name(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = getLineNumber ) ]
    pub fn get_line_number(this: &CallSite) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = getLineNumber ) ]
    pub fn set_get_line_number(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = getColumnNumber ) ]
    pub fn get_column_number(this: &CallSite) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = getColumnNumber ) ]
    pub fn set_get_column_number(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = getEvalOrigin ) ]
    pub fn get_eval_origin(this: &CallSite) -> String;
    # [ wasm_bindgen ( method , setter , js_name = getEvalOrigin ) ]
    pub fn set_get_eval_origin(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = isToplevel ) ]
    pub fn is_toplevel(this: &CallSite) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isToplevel ) ]
    pub fn set_is_toplevel(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = isEval ) ]
    pub fn is_eval(this: &CallSite) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isEval ) ]
    pub fn set_is_eval(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = isNative ) ]
    pub fn is_native(this: &CallSite) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isNative ) ]
    pub fn set_is_native(this: &CallSite, value: &Function);
    # [ wasm_bindgen ( method , js_name = isConstructor ) ]
    pub fn is_constructor(this: &CallSite) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isConstructor ) ]
    pub fn set_is_constructor(this: &CallSite, value: &Function);
    pub type ErrnoException;
    #[wasm_bindgen(method, getter)]
    pub fn errno(this: &ErrnoException) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_errno(this: &ErrnoException, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn code(this: &ErrnoException) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_code(this: &ErrnoException, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn path(this: &ErrnoException) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_path(this: &ErrnoException, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn syscall(this: &ErrnoException) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_syscall(this: &ErrnoException, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn stack(this: &ErrnoException) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stack(this: &ErrnoException, value: Option<&str>);
    pub type EventEmitter;
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &EventEmitter, event: &JsValue, listener: &JsValue) -> EventEmitter;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &EventEmitter, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &EventEmitter, event: &JsValue, listener: &JsValue) -> EventEmitter;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &EventEmitter, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &EventEmitter, event: &JsValue, listener: &JsValue) -> EventEmitter;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &EventEmitter, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener(
        this: &EventEmitter,
        event: &JsValue,
        listener: &JsValue,
    ) -> EventEmitter;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener(this: &EventEmitter, value: &Function);
    #[wasm_bindgen(method)]
    pub fn off(this: &EventEmitter, event: &JsValue, listener: &JsValue) -> EventEmitter;
    #[wasm_bindgen(method, setter)]
    pub fn set_off(this: &EventEmitter, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeAllListeners ) ]
    pub fn remove_all_listeners(this: &EventEmitter, event: &JsValue) -> EventEmitter;
    # [ wasm_bindgen ( method , setter , js_name = removeAllListeners ) ]
    pub fn set_remove_all_listeners(this: &EventEmitter, value: &Function);
    # [ wasm_bindgen ( method , js_name = setMaxListeners ) ]
    pub fn set_max_listeners(this: &EventEmitter, n: f64) -> EventEmitter;
    # [ wasm_bindgen ( method , setter , js_name = setMaxListeners ) ]
    pub fn set_set_max_listeners(this: &EventEmitter, value: &Function);
    # [ wasm_bindgen ( method , js_name = getMaxListeners ) ]
    pub fn get_max_listeners(this: &EventEmitter) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = getMaxListeners ) ]
    pub fn set_get_max_listeners(this: &EventEmitter, value: &Function);
    #[wasm_bindgen(method)]
    pub fn listeners(this: &EventEmitter, event: &JsValue) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_listeners(this: &EventEmitter, value: &Function);
    # [ wasm_bindgen ( method , js_name = rawListeners ) ]
    pub fn raw_listeners(this: &EventEmitter, event: &JsValue) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = rawListeners ) ]
    pub fn set_raw_listeners(this: &EventEmitter, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &EventEmitter, event: &JsValue, args: &Array) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &EventEmitter, value: &Function);
    # [ wasm_bindgen ( method , js_name = listenerCount ) ]
    pub fn listener_count(this: &EventEmitter, type_: &JsValue) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = listenerCount ) ]
    pub fn set_listener_count(this: &EventEmitter, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(
        this: &EventEmitter,
        event: &JsValue,
        listener: &JsValue,
    ) -> EventEmitter;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &EventEmitter, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &EventEmitter,
        event: &JsValue,
        listener: &JsValue,
    ) -> EventEmitter;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &EventEmitter, value: &Function);
    # [ wasm_bindgen ( method , js_name = eventNames ) ]
    pub fn event_names(this: &EventEmitter) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = eventNames ) ]
    pub fn set_event_names(this: &EventEmitter, value: &Function);
    pub type ReadableStream;
    #[wasm_bindgen(method, getter)]
    pub fn readable(this: &ReadableStream) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_readable(this: &ReadableStream, value: bool);
    #[wasm_bindgen(method)]
    pub fn read(this: &ReadableStream, size: Option<f64>) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_read(this: &ReadableStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = setEncoding ) ]
    pub fn set_encoding(this: &ReadableStream, encoding: &str) -> ReadableStream;
    # [ wasm_bindgen ( method , setter , js_name = setEncoding ) ]
    pub fn set_set_encoding(this: &ReadableStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn pause(this: &ReadableStream) -> ReadableStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_pause(this: &ReadableStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn resume(this: &ReadableStream) -> ReadableStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_resume(this: &ReadableStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = isPaused ) ]
    pub fn is_paused(this: &ReadableStream) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isPaused ) ]
    pub fn set_is_paused(this: &ReadableStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn pipe(this: &ReadableStream, destination: &JsValue, options: &JsValue) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_pipe(this: &ReadableStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unpipe(this: &ReadableStream, destination: Option<&WritableStream>) -> ReadableStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_unpipe(this: &ReadableStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unshift(this: &ReadableStream, chunk: &JsValue, encoding: Option<&BufferEncoding>);
    #[wasm_bindgen(method, setter)]
    pub fn set_unshift(this: &ReadableStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn wrap(this: &ReadableStream, old_stream: &ReadableStream) -> ReadableStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_wrap(this: &ReadableStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn computed_property_name(this: &ReadableStream) -> AsyncIterableIterator;
    #[wasm_bindgen(method, setter)]
    pub fn set_computed_property_name(this: &ReadableStream, value: &Function);
    pub type WritableStream;
    #[wasm_bindgen(method, getter)]
    pub fn writable(this: &WritableStream) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_writable(this: &WritableStream, value: bool);
    #[wasm_bindgen(method)]
    pub fn write(this: &WritableStream, buffer: &JsValue, cb: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_write(this: &WritableStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = write ) ]
    pub fn write_2(this: &WritableStream, str: &str, encoding: Option<&str>, cb: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = write ) ]
    pub fn set_write_2(this: &WritableStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn end(this: &WritableStream, cb: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_end(this: &WritableStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = end ) ]
    pub fn end_2(this: &WritableStream, data: &JsValue, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = end ) ]
    pub fn set_end_2(this: &WritableStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = end ) ]
    pub fn end_3(this: &WritableStream, str: &str, encoding: Option<&str>, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = end ) ]
    pub fn set_end_3(this: &WritableStream, value: &Function);
    pub type ReadWriteStream;
    pub type Domain;
    #[wasm_bindgen(method)]
    pub fn run(this: &Domain, fn_: &JsValue, args: &Array) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_run(this: &Domain, value: &Function);
    #[wasm_bindgen(method)]
    pub fn add(this: &Domain, emitter: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_add(this: &Domain, value: &Function);
    #[wasm_bindgen(method)]
    pub fn remove(this: &Domain, emitter: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_remove(this: &Domain, value: &Function);
    #[wasm_bindgen(method)]
    pub fn bind(this: &Domain, cb: &JsValue) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_bind(this: &Domain, value: &Function);
    #[wasm_bindgen(method)]
    pub fn intercept(this: &Domain, cb: &JsValue) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_intercept(this: &Domain, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Domain, event: &str, listener: &JsValue) -> Domain;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Domain, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Domain, event: &str, listener: &JsValue) -> Domain;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Domain, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Domain, event: &str, listener: &JsValue) -> Domain;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Domain, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener(this: &Domain, event: &str, listener: &JsValue) -> Domain;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener(this: &Domain, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeAllListeners ) ]
    pub fn remove_all_listeners(this: &Domain, event: Option<&str>) -> Domain;
    # [ wasm_bindgen ( method , setter , js_name = removeAllListeners ) ]
    pub fn set_remove_all_listeners(this: &Domain, value: &Function);
    pub type MemoryUsage;
    #[wasm_bindgen(method, getter)]
    pub fn rss(this: &MemoryUsage) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_rss(this: &MemoryUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = heapTotal ) ]
    pub fn heap_total(this: &MemoryUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = heapTotal ) ]
    pub fn set_heap_total(this: &MemoryUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = heapUsed ) ]
    pub fn heap_used(this: &MemoryUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = heapUsed ) ]
    pub fn set_heap_used(this: &MemoryUsage, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn external(this: &MemoryUsage) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_external(this: &MemoryUsage, value: f64);
    pub type CpuUsage;
    #[wasm_bindgen(method, getter)]
    pub fn user(this: &CpuUsage) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_user(this: &CpuUsage, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn system(this: &CpuUsage) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_system(this: &CpuUsage, value: f64);
    pub type ProcessRelease;
    #[wasm_bindgen(method, getter)]
    pub fn name(this: &ProcessRelease) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_name(this: &ProcessRelease, value: &str);
    # [ wasm_bindgen ( method , getter , js_name = sourceUrl ) ]
    pub fn source_url(this: &ProcessRelease) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = sourceUrl ) ]
    pub fn set_source_url(this: &ProcessRelease, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = headersUrl ) ]
    pub fn headers_url(this: &ProcessRelease) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = headersUrl ) ]
    pub fn set_headers_url(this: &ProcessRelease, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = libUrl ) ]
    pub fn lib_url(this: &ProcessRelease) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = libUrl ) ]
    pub fn set_lib_url(this: &ProcessRelease, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn lts(this: &ProcessRelease) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_lts(this: &ProcessRelease, value: Option<&str>);
    pub type ProcessVersions;
    #[wasm_bindgen(method, getter)]
    pub fn http_parser(this: &ProcessVersions) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_http_parser(this: &ProcessVersions, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn node(this: &ProcessVersions) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_node(this: &ProcessVersions, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn v8(this: &ProcessVersions) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_v8(this: &ProcessVersions, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn ares(this: &ProcessVersions) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_ares(this: &ProcessVersions, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn uv(this: &ProcessVersions) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_uv(this: &ProcessVersions, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn zlib(this: &ProcessVersions) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_zlib(this: &ProcessVersions, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn modules(this: &ProcessVersions) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_modules(this: &ProcessVersions, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn openssl(this: &ProcessVersions) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_openssl(this: &ProcessVersions, value: &str);
    pub type Platform;
    pub type Signals;
    pub type MultipleResolveType;
    pub type Socket;
    # [ wasm_bindgen ( method , getter , js_name = isTTY ) ]
    pub fn is_tty(this: &Socket) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = isTTY ) ]
    pub fn set_is_tty(this: &Socket, value: &JsValue);
    pub type ProcessEnv;
    pub type HRTime;
    #[wasm_bindgen(method)]
    pub fn bigint(this: &HRTime) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_bigint(this: &HRTime, value: &Function);
    pub type ProcessReport;
    #[doc = "Directory where the report is written."]
    #[doc = "working directory of the Node.js process."]
    #[wasm_bindgen(method, getter)]
    pub fn directory(this: &ProcessReport) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_directory(this: &ProcessReport, value: &str);
    #[doc = "Filename where the report is written."]
    #[doc = "The default value is the empty string."]
    #[wasm_bindgen(method, getter)]
    pub fn filename(this: &ProcessReport) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_filename(this: &ProcessReport, value: &str);
    # [ wasm_bindgen ( method , js_name = getReport ) ]
    pub fn get_report(this: &ProcessReport, err: Option<&Error>) -> String;
    # [ wasm_bindgen ( method , setter , js_name = getReport ) ]
    pub fn set_get_report(this: &ProcessReport, value: &Function);
    #[doc = "If true, a diagnostic report is generated on fatal errors,"]
    #[doc = "such as out of memory errors or failed C++ assertions."]
    # [ wasm_bindgen ( method , getter , js_name = reportOnFatalError ) ]
    pub fn report_on_fatal_error(this: &ProcessReport) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = reportOnFatalError ) ]
    pub fn set_report_on_fatal_error(this: &ProcessReport, value: bool);
    #[doc = "If true, a diagnostic report is generated when the process"]
    #[doc = "receives the signal specified by process.report.signal."]
    # [ wasm_bindgen ( method , getter , js_name = reportOnSignal ) ]
    pub fn report_on_signal(this: &ProcessReport) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = reportOnSignal ) ]
    pub fn set_report_on_signal(this: &ProcessReport, value: bool);
    #[doc = "If true, a diagnostic report is generated on uncaught exception."]
    # [ wasm_bindgen ( method , getter , js_name = reportOnUncaughtException ) ]
    pub fn report_on_uncaught_exception(this: &ProcessReport) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = reportOnUncaughtException ) ]
    pub fn set_report_on_uncaught_exception(this: &ProcessReport, value: bool);
    #[doc = "The signal used to trigger the creation of a diagnostic report."]
    #[wasm_bindgen(method, getter)]
    pub fn signal(this: &ProcessReport) -> Signals;
    #[wasm_bindgen(method, setter)]
    pub fn set_signal(this: &ProcessReport, value: &Signals);
    # [ wasm_bindgen ( method , js_name = writeReport ) ]
    pub fn write_report(this: &ProcessReport, file_name: Option<&str>) -> String;
    # [ wasm_bindgen ( method , setter , js_name = writeReport ) ]
    pub fn set_write_report(this: &ProcessReport, value: &Function);
    # [ wasm_bindgen ( method , js_name = writeReport ) ]
    pub fn write_report_2(this: &ProcessReport, error: Option<&Error>) -> String;
    # [ wasm_bindgen ( method , setter , js_name = writeReport ) ]
    pub fn set_write_report_2(this: &ProcessReport, value: &Function);
    # [ wasm_bindgen ( method , js_name = writeReport ) ]
    pub fn write_report_3(
        this: &ProcessReport,
        file_name: Option<&str>,
        err: Option<&Error>,
    ) -> String;
    # [ wasm_bindgen ( method , setter , js_name = writeReport ) ]
    pub fn set_write_report_3(this: &ProcessReport, value: &Function);
    pub type ResourceUsage;
    # [ wasm_bindgen ( method , getter , js_name = fsRead ) ]
    pub fn fs_read(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = fsRead ) ]
    pub fn set_fs_read(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = fsWrite ) ]
    pub fn fs_write(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = fsWrite ) ]
    pub fn set_fs_write(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = involuntaryContextSwitches ) ]
    pub fn involuntary_context_switches(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = involuntaryContextSwitches ) ]
    pub fn set_involuntary_context_switches(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = ipcReceived ) ]
    pub fn ipc_received(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = ipcReceived ) ]
    pub fn set_ipc_received(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = ipcSent ) ]
    pub fn ipc_sent(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = ipcSent ) ]
    pub fn set_ipc_sent(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = majorPageFault ) ]
    pub fn major_page_fault(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = majorPageFault ) ]
    pub fn set_major_page_fault(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = maxRSS ) ]
    pub fn max_rss(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = maxRSS ) ]
    pub fn set_max_rss(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = minorPageFault ) ]
    pub fn minor_page_fault(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = minorPageFault ) ]
    pub fn set_minor_page_fault(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = sharedMemorySize ) ]
    pub fn shared_memory_size(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = sharedMemorySize ) ]
    pub fn set_shared_memory_size(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = signalsCount ) ]
    pub fn signals_count(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = signalsCount ) ]
    pub fn set_signals_count(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = swappedOut ) ]
    pub fn swapped_out(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = swappedOut ) ]
    pub fn set_swapped_out(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = systemCPUTime ) ]
    pub fn system_cpu_time(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = systemCPUTime ) ]
    pub fn set_system_cpu_time(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = unsharedDataSize ) ]
    pub fn unshared_data_size(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = unsharedDataSize ) ]
    pub fn set_unshared_data_size(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = unsharedStackSize ) ]
    pub fn unshared_stack_size(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = unsharedStackSize ) ]
    pub fn set_unshared_stack_size(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = userCPUTime ) ]
    pub fn user_cpu_time(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = userCPUTime ) ]
    pub fn set_user_cpu_time(this: &ResourceUsage, value: f64);
    # [ wasm_bindgen ( method , getter , js_name = voluntaryContextSwitches ) ]
    pub fn voluntary_context_switches(this: &ResourceUsage) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = voluntaryContextSwitches ) ]
    pub fn set_voluntary_context_switches(this: &ResourceUsage, value: f64);
    pub type Process;
    #[doc = "Can also be a tty.WriteStream, not typed due to limitation.s"]
    #[wasm_bindgen(method, getter)]
    pub fn stdout(this: &Process) -> WriteStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdout(this: &Process, value: &WriteStream);
    #[doc = "Can also be a tty.WriteStream, not typed due to limitation.s"]
    #[wasm_bindgen(method, getter)]
    pub fn stderr(this: &Process) -> WriteStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_stderr(this: &Process, value: &WriteStream);
    #[wasm_bindgen(method, getter)]
    pub fn stdin(this: &Process) -> ReadStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdin(this: &Process, value: &ReadStream);
    # [ wasm_bindgen ( method , js_name = openStdin ) ]
    pub fn open_stdin(this: &Process) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = openStdin ) ]
    pub fn set_open_stdin(this: &Process, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn argv(this: &Process) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_argv(this: &Process, value: &Array);
    #[wasm_bindgen(method, getter)]
    pub fn argv0(this: &Process) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_argv0(this: &Process, value: &str);
    # [ wasm_bindgen ( method , getter , js_name = execArgv ) ]
    pub fn exec_argv(this: &Process) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = execArgv ) ]
    pub fn set_exec_argv(this: &Process, value: &Array);
    # [ wasm_bindgen ( method , getter , js_name = execPath ) ]
    pub fn exec_path(this: &Process) -> String;
    # [ wasm_bindgen ( method , setter , js_name = execPath ) ]
    pub fn set_exec_path(this: &Process, value: &str);
    #[wasm_bindgen(method)]
    pub fn abort(this: &Process);
    #[wasm_bindgen(method, setter)]
    pub fn set_abort(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn chdir(this: &Process, directory: &str);
    #[wasm_bindgen(method, setter)]
    pub fn set_chdir(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn cwd(this: &Process) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_cwd(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = debugPort ) ]
    pub fn debug_port(this: &Process) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = debugPort ) ]
    pub fn set_debug_port(this: &Process, value: f64);
    # [ wasm_bindgen ( method , js_name = emitWarning ) ]
    pub fn emit_warning(
        this: &Process,
        warning: &JsValue,
        name: Option<&str>,
        ctor: Option<&Function>,
    );
    # [ wasm_bindgen ( method , setter , js_name = emitWarning ) ]
    pub fn set_emit_warning(this: &Process, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn env(this: &Process) -> ProcessEnv;
    #[wasm_bindgen(method, setter)]
    pub fn set_env(this: &Process, value: &ProcessEnv);
    #[wasm_bindgen(method)]
    pub fn exit(this: &Process, code: Option<f64>);
    #[wasm_bindgen(method, setter)]
    pub fn set_exit(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = exitCode ) ]
    pub fn exit_code(this: &Process) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = exitCode ) ]
    pub fn set_exit_code(this: &Process, value: Option<f64>);
    #[wasm_bindgen(method)]
    pub fn getgid(this: &Process) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_getgid(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn setgid(this: &Process, id: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_setgid(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn getuid(this: &Process) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_getuid(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn setuid(this: &Process, id: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_setuid(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn geteuid(this: &Process) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_geteuid(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn seteuid(this: &Process, id: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_seteuid(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn getegid(this: &Process) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_getegid(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn setegid(this: &Process, id: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_setegid(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn getgroups(this: &Process) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_getgroups(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn setgroups(this: &Process, groups: &Array);
    #[wasm_bindgen(method, setter)]
    pub fn set_setgroups(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = setUncaughtExceptionCaptureCallback ) ]
    pub fn set_uncaught_exception_capture_callback(this: &Process, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = setUncaughtExceptionCaptureCallback ) ]
    pub fn set_set_uncaught_exception_capture_callback(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = hasUncaughtExceptionCaptureCallback ) ]
    pub fn has_uncaught_exception_capture_callback(this: &Process) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = hasUncaughtExceptionCaptureCallback ) ]
    pub fn set_has_uncaught_exception_capture_callback(this: &Process, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn version(this: &Process) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_version(this: &Process, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn versions(this: &Process) -> ProcessVersions;
    #[wasm_bindgen(method, setter)]
    pub fn set_versions(this: &Process, value: &ProcessVersions);
    #[wasm_bindgen(method, getter)]
    pub fn config(this: &Process) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_config(this: &Process, value: &JsValue);
    #[wasm_bindgen(method)]
    pub fn kill(this: &Process, pid: f64, signal: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_kill(this: &Process, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn pid(this: &Process) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_pid(this: &Process, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn ppid(this: &Process) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_ppid(this: &Process, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn title(this: &Process) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_title(this: &Process, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn arch(this: &Process) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_arch(this: &Process, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn platform(this: &Process) -> Platform;
    #[wasm_bindgen(method, setter)]
    pub fn set_platform(this: &Process, value: &Platform);
    # [ wasm_bindgen ( method , getter , js_name = mainModule ) ]
    pub fn main_module(this: &Process) -> Option<NodeModule>;
    # [ wasm_bindgen ( method , setter , js_name = mainModule ) ]
    pub fn set_main_module(this: &Process, value: Option<&NodeModule>);
    # [ wasm_bindgen ( method , js_name = memoryUsage ) ]
    pub fn memory_usage(this: &Process) -> MemoryUsage;
    # [ wasm_bindgen ( method , setter , js_name = memoryUsage ) ]
    pub fn set_memory_usage(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = cpuUsage ) ]
    pub fn cpu_usage(this: &Process, previous_value: Option<&CpuUsage>) -> CpuUsage;
    # [ wasm_bindgen ( method , setter , js_name = cpuUsage ) ]
    pub fn set_cpu_usage(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = nextTick ) ]
    pub fn next_tick(this: &Process, callback: &Function, args: &Array);
    # [ wasm_bindgen ( method , setter , js_name = nextTick ) ]
    pub fn set_next_tick(this: &Process, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn release(this: &Process) -> ProcessRelease;
    #[wasm_bindgen(method, setter)]
    pub fn set_release(this: &Process, value: &ProcessRelease);
    #[wasm_bindgen(method, getter)]
    pub fn features(this: &Process) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_features(this: &Process, value: &JsValue);
    #[wasm_bindgen(method)]
    pub fn umask(this: &Process, mask: Option<f64>) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_umask(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn uptime(this: &Process) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_uptime(this: &Process, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn hrtime(this: &Process) -> HRTime;
    #[wasm_bindgen(method, setter)]
    pub fn set_hrtime(this: &Process, value: &HRTime);
    #[wasm_bindgen(method, getter)]
    pub fn domain(this: &Process) -> Domain;
    #[wasm_bindgen(method, setter)]
    pub fn set_domain(this: &Process, value: &Domain);
    #[wasm_bindgen(method)]
    pub fn send(
        this: &Process,
        message: &JsValue,
        send_handle: &JsValue,
        options: &JsValue,
        callback: &JsValue,
    ) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_send(this: &Process, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn disconnect(this: &Process);
    #[wasm_bindgen(method, setter)]
    pub fn set_disconnect(this: &Process, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn connected(this: &Process) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_connected(this: &Process, value: bool);
    #[doc = "The `process.allowedNodeEnvironmentFlags` property is a special,"]
    #[doc = "read-only `Set` of flags allowable within the [`NODE_OPTIONS`][]"]
    #[doc = "environment variable."]
    # [ wasm_bindgen ( method , getter , js_name = allowedNodeEnvironmentFlags ) ]
    pub fn allowed_node_environment_flags(this: &Process) -> ReadonlySet;
    # [ wasm_bindgen ( method , setter , js_name = allowedNodeEnvironmentFlags ) ]
    pub fn set_allowed_node_environment_flags(this: &Process, value: &ReadonlySet);
    #[doc = "Only available with `--experimental-report`"]
    #[wasm_bindgen(method, getter)]
    pub fn report(this: &Process) -> Option<ProcessReport>;
    #[wasm_bindgen(method, setter)]
    pub fn set_report(this: &Process, value: Option<&ProcessReport>);
    # [ wasm_bindgen ( method , js_name = resourceUsage ) ]
    pub fn resource_usage(this: &Process) -> ResourceUsage;
    # [ wasm_bindgen ( method , setter , js_name = resourceUsage ) ]
    pub fn set_resource_usage(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Process, event: &JsValue, listener: &BeforeExitListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(
        this: &Process,
        event: &JsValue,
        listener: &DisconnectListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &Process, event: &JsValue, listener: &ExitListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(
        this: &Process,
        event: &JsValue,
        listener: &RejectionHandledListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(
        this: &Process,
        event: &JsValue,
        listener: &UncaughtExceptionListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_6(
        this: &Process,
        event: &JsValue,
        listener: &UnhandledRejectionListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_6(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_7(this: &Process, event: &JsValue, listener: &WarningListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_7(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_8(this: &Process, event: &JsValue, listener: &MessageListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_8(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_9(this: &Process, event: &Signals, listener: &SignalsListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_9(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_10(
        this: &Process,
        event: &JsValue,
        listener: &NewListenerListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_10(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_11(
        this: &Process,
        event: &JsValue,
        listener: &RemoveListenerListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_11(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_12(
        this: &Process,
        event: &JsValue,
        listener: &MultipleResolveListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_12(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Process, event: &JsValue, code: f64) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &Process, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &Process, event: &JsValue, code: f64) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(this: &Process, event: &JsValue, promise: &Promise) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(this: &Process, event: &JsValue, error: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_6(this: &Process, event: &JsValue, reason: &JsValue, promise: &Promise) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_6(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_7(this: &Process, event: &JsValue, warning: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_7(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_8(
        this: &Process,
        event: &JsValue,
        message: &JsValue,
        send_handle: &JsValue,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_8(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_9(this: &Process, event: &Signals, signal: &Signals) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_9(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_10(
        this: &Process,
        event: &JsValue,
        event_name: &JsValue,
        listener: &JsValue,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_10(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_11(
        this: &Process,
        event: &JsValue,
        event_name: &str,
        listener: &JsValue,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_11(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_12(this: &Process, event: &JsValue, listener: &MultipleResolveListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_12(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Process, event: &JsValue, listener: &BeforeExitListener) -> Process;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &Process, event: &JsValue, listener: &DisconnectListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &Process, event: &JsValue, listener: &ExitListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(this: &Process, event: &JsValue, listener: &RejectionHandledListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(this: &Process, event: &JsValue, listener: &UncaughtExceptionListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_6(this: &Process, event: &JsValue, listener: &UnhandledRejectionListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_6(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_7(this: &Process, event: &JsValue, listener: &WarningListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_7(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_8(this: &Process, event: &JsValue, listener: &MessageListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_8(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_9(this: &Process, event: &Signals, listener: &SignalsListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_9(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_10(this: &Process, event: &JsValue, listener: &NewListenerListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_10(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_11(this: &Process, event: &JsValue, listener: &RemoveListenerListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_11(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_12(this: &Process, event: &JsValue, listener: &MultipleResolveListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_12(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Process, event: &JsValue, listener: &BeforeExitListener) -> Process;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &Process, event: &JsValue, listener: &DisconnectListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &Process, event: &JsValue, listener: &ExitListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(this: &Process, event: &JsValue, listener: &RejectionHandledListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(this: &Process, event: &JsValue, listener: &UncaughtExceptionListener)
    -> Process;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_6(
        this: &Process,
        event: &JsValue,
        listener: &UnhandledRejectionListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_6(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_7(this: &Process, event: &JsValue, listener: &WarningListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_7(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_8(this: &Process, event: &JsValue, listener: &MessageListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_8(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_9(this: &Process, event: &Signals, listener: &SignalsListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_9(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_10(this: &Process, event: &JsValue, listener: &NewListenerListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_10(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_11(this: &Process, event: &JsValue, listener: &RemoveListenerListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_11(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_12(this: &Process, event: &JsValue, listener: &MultipleResolveListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_12(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(
        this: &Process,
        event: &JsValue,
        listener: &BeforeExitListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &Process,
        event: &JsValue,
        listener: &DisconnectListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(this: &Process, event: &JsValue, listener: &ExitListener) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(
        this: &Process,
        event: &JsValue,
        listener: &RejectionHandledListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(
        this: &Process,
        event: &JsValue,
        listener: &UncaughtExceptionListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_6(
        this: &Process,
        event: &JsValue,
        listener: &UnhandledRejectionListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_6(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_7(
        this: &Process,
        event: &JsValue,
        listener: &WarningListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_7(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_8(
        this: &Process,
        event: &JsValue,
        listener: &MessageListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_8(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_9(
        this: &Process,
        event: &Signals,
        listener: &SignalsListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_9(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_10(
        this: &Process,
        event: &JsValue,
        listener: &NewListenerListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_10(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_11(
        this: &Process,
        event: &JsValue,
        listener: &RemoveListenerListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_11(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_12(
        this: &Process,
        event: &JsValue,
        listener: &MultipleResolveListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_12(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &Process,
        event: &JsValue,
        listener: &BeforeExitListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &Process,
        event: &JsValue,
        listener: &DisconnectListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &Process,
        event: &JsValue,
        listener: &ExitListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(
        this: &Process,
        event: &JsValue,
        listener: &RejectionHandledListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(
        this: &Process,
        event: &JsValue,
        listener: &UncaughtExceptionListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_6(
        this: &Process,
        event: &JsValue,
        listener: &UnhandledRejectionListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_6(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_7(
        this: &Process,
        event: &JsValue,
        listener: &WarningListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_7(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_8(
        this: &Process,
        event: &JsValue,
        listener: &MessageListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_8(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_9(
        this: &Process,
        event: &Signals,
        listener: &SignalsListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_9(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_10(
        this: &Process,
        event: &JsValue,
        listener: &NewListenerListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_10(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_11(
        this: &Process,
        event: &JsValue,
        listener: &RemoveListenerListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_11(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_12(
        this: &Process,
        event: &JsValue,
        listener: &MultipleResolveListener,
    ) -> Process;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_12(this: &Process, value: &Function);
    #[wasm_bindgen(method)]
    pub fn listeners(this: &Process, event: &JsValue) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_listeners(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = listeners ) ]
    pub fn listeners_2(this: &Process, event: &JsValue) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = listeners ) ]
    pub fn set_listeners_2(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = listeners ) ]
    pub fn listeners_3(this: &Process, event: &JsValue) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = listeners ) ]
    pub fn set_listeners_3(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = listeners ) ]
    pub fn listeners_4(this: &Process, event: &JsValue) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = listeners ) ]
    pub fn set_listeners_4(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = listeners ) ]
    pub fn listeners_5(this: &Process, event: &JsValue) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = listeners ) ]
    pub fn set_listeners_5(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = listeners ) ]
    pub fn listeners_6(this: &Process, event: &JsValue) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = listeners ) ]
    pub fn set_listeners_6(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = listeners ) ]
    pub fn listeners_7(this: &Process, event: &JsValue) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = listeners ) ]
    pub fn set_listeners_7(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = listeners ) ]
    pub fn listeners_8(this: &Process, event: &JsValue) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = listeners ) ]
    pub fn set_listeners_8(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = listeners ) ]
    pub fn listeners_9(this: &Process, event: &Signals) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = listeners ) ]
    pub fn set_listeners_9(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = listeners ) ]
    pub fn listeners_10(this: &Process, event: &JsValue) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = listeners ) ]
    pub fn set_listeners_10(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = listeners ) ]
    pub fn listeners_11(this: &Process, event: &JsValue) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = listeners ) ]
    pub fn set_listeners_11(this: &Process, value: &Function);
    # [ wasm_bindgen ( method , js_name = listeners ) ]
    pub fn listeners_12(this: &Process, event: &JsValue) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = listeners ) ]
    pub fn set_listeners_12(this: &Process, value: &Function);
    pub type Global;
    # [ wasm_bindgen ( method , getter , js_name = Array ) ]
    pub fn array(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Array ) ]
    pub fn set_array(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = ArrayBuffer ) ]
    pub fn array_buffer(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = ArrayBuffer ) ]
    pub fn set_array_buffer(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Boolean ) ]
    pub fn boolean(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Boolean ) ]
    pub fn set_boolean(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Buffer ) ]
    pub fn buffer(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Buffer ) ]
    pub fn set_buffer(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = DataView ) ]
    pub fn data_view(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = DataView ) ]
    pub fn set_data_view(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Date ) ]
    pub fn date(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Date ) ]
    pub fn set_date(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Error ) ]
    pub fn error(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Error ) ]
    pub fn set_error(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = EvalError ) ]
    pub fn eval_error(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = EvalError ) ]
    pub fn set_eval_error(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Float32Array ) ]
    pub fn float32_array(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Float32Array ) ]
    pub fn set_float32_array(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Float64Array ) ]
    pub fn float64_array(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Float64Array ) ]
    pub fn set_float64_array(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Function ) ]
    pub fn function(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Function ) ]
    pub fn set_function(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = GLOBAL ) ]
    pub fn global(this: &Global) -> Global;
    # [ wasm_bindgen ( method , setter , js_name = GLOBAL ) ]
    pub fn set_global(this: &Global, value: &Global);
    # [ wasm_bindgen ( method , getter , js_name = Infinity ) ]
    pub fn infinity(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Infinity ) ]
    pub fn set_infinity(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Int16Array ) ]
    pub fn int16_array(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Int16Array ) ]
    pub fn set_int16_array(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Int32Array ) ]
    pub fn int32_array(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Int32Array ) ]
    pub fn set_int32_array(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Int8Array ) ]
    pub fn int8_array(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Int8Array ) ]
    pub fn set_int8_array(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Intl ) ]
    pub fn intl(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Intl ) ]
    pub fn set_intl(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = JSON ) ]
    pub fn json(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = JSON ) ]
    pub fn set_json(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Map ) ]
    pub fn map(this: &Global) -> MapConstructor;
    # [ wasm_bindgen ( method , setter , js_name = Map ) ]
    pub fn set_map(this: &Global, value: &MapConstructor);
    # [ wasm_bindgen ( method , getter , js_name = Math ) ]
    pub fn math(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Math ) ]
    pub fn set_math(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = NaN ) ]
    pub fn na_n(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = NaN ) ]
    pub fn set_na_n(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Number ) ]
    pub fn number(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Number ) ]
    pub fn set_number(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Object ) ]
    pub fn object(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Object ) ]
    pub fn set_object(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Promise ) ]
    pub fn promise(this: &Global) -> Function;
    # [ wasm_bindgen ( method , setter , js_name = Promise ) ]
    pub fn set_promise(this: &Global, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = RangeError ) ]
    pub fn range_error(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = RangeError ) ]
    pub fn set_range_error(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = ReferenceError ) ]
    pub fn reference_error(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = ReferenceError ) ]
    pub fn set_reference_error(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = RegExp ) ]
    pub fn reg_exp(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = RegExp ) ]
    pub fn set_reg_exp(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Set ) ]
    pub fn set(this: &Global) -> SetConstructor;
    # [ wasm_bindgen ( method , setter , js_name = Set ) ]
    pub fn set_set(this: &Global, value: &SetConstructor);
    # [ wasm_bindgen ( method , getter , js_name = String ) ]
    pub fn string(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = String ) ]
    pub fn set_string(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Symbol ) ]
    pub fn symbol(this: &Global) -> Function;
    # [ wasm_bindgen ( method , setter , js_name = Symbol ) ]
    pub fn set_symbol(this: &Global, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = SyntaxError ) ]
    pub fn syntax_error(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = SyntaxError ) ]
    pub fn set_syntax_error(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = TypeError ) ]
    pub fn type_error(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = TypeError ) ]
    pub fn set_type_error(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = URIError ) ]
    pub fn uri_error(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = URIError ) ]
    pub fn set_uri_error(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Uint16Array ) ]
    pub fn uint16_array(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Uint16Array ) ]
    pub fn set_uint16_array(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Uint32Array ) ]
    pub fn uint32_array(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Uint32Array ) ]
    pub fn set_uint32_array(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Uint8Array ) ]
    pub fn uint8_array(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Uint8Array ) ]
    pub fn set_uint8_array(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = Uint8ClampedArray ) ]
    pub fn uint8_clamped_array(this: &Global) -> Function;
    # [ wasm_bindgen ( method , setter , js_name = Uint8ClampedArray ) ]
    pub fn set_uint8_clamped_array(this: &Global, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = WeakMap ) ]
    pub fn weak_map(this: &Global) -> WeakMapConstructor;
    # [ wasm_bindgen ( method , setter , js_name = WeakMap ) ]
    pub fn set_weak_map(this: &Global, value: &WeakMapConstructor);
    # [ wasm_bindgen ( method , getter , js_name = WeakSet ) ]
    pub fn weak_set(this: &Global) -> WeakSetConstructor;
    # [ wasm_bindgen ( method , setter , js_name = WeakSet ) ]
    pub fn set_weak_set(this: &Global, value: &WeakSetConstructor);
    # [ wasm_bindgen ( method , getter , js_name = clearImmediate ) ]
    pub fn clear_immediate(this: &Global) -> Function;
    # [ wasm_bindgen ( method , setter , js_name = clearImmediate ) ]
    pub fn set_clear_immediate(this: &Global, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = clearInterval ) ]
    pub fn clear_interval(this: &Global) -> Function;
    # [ wasm_bindgen ( method , setter , js_name = clearInterval ) ]
    pub fn set_clear_interval(this: &Global, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = clearTimeout ) ]
    pub fn clear_timeout(this: &Global) -> Function;
    # [ wasm_bindgen ( method , setter , js_name = clearTimeout ) ]
    pub fn set_clear_timeout(this: &Global, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn console(this: &Global) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_console(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = decodeURI ) ]
    pub fn decode_uri(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = decodeURI ) ]
    pub fn set_decode_uri(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = decodeURIComponent ) ]
    pub fn decode_uri_component(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = decodeURIComponent ) ]
    pub fn set_decode_uri_component(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = encodeURI ) ]
    pub fn encode_uri(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = encodeURI ) ]
    pub fn set_encode_uri(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = encodeURIComponent ) ]
    pub fn encode_uri_component(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = encodeURIComponent ) ]
    pub fn set_encode_uri_component(this: &Global, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn escape(this: &Global) -> Function;
    #[wasm_bindgen(method, setter)]
    pub fn set_escape(this: &Global, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn eval(this: &Global) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_eval(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = global ) ]
    pub fn global_2(this: &Global) -> Global;
    # [ wasm_bindgen ( method , setter , js_name = global ) ]
    pub fn set_global_2(this: &Global, value: &Global);
    # [ wasm_bindgen ( method , getter , js_name = isFinite ) ]
    pub fn is_finite(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = isFinite ) ]
    pub fn set_is_finite(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = isNaN ) ]
    pub fn is_na_n(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = isNaN ) ]
    pub fn set_is_na_n(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = parseFloat ) ]
    pub fn parse_float(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = parseFloat ) ]
    pub fn set_parse_float(this: &Global, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = parseInt ) ]
    pub fn parse_int(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = parseInt ) ]
    pub fn set_parse_int(this: &Global, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn process(this: &Global) -> Process;
    #[wasm_bindgen(method, setter)]
    pub fn set_process(this: &Global, value: &Process);
    #[wasm_bindgen(method, getter)]
    pub fn root(this: &Global) -> Global;
    #[wasm_bindgen(method, setter)]
    pub fn set_root(this: &Global, value: &Global);
    # [ wasm_bindgen ( method , getter , js_name = setImmediate ) ]
    pub fn set_immediate(this: &Global) -> Function;
    # [ wasm_bindgen ( method , setter , js_name = setImmediate ) ]
    pub fn set_set_immediate(this: &Global, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = setInterval ) ]
    pub fn set_interval(this: &Global) -> Function;
    # [ wasm_bindgen ( method , setter , js_name = setInterval ) ]
    pub fn set_set_interval(this: &Global, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = setTimeout ) ]
    pub fn set_timeout(this: &Global) -> Function;
    # [ wasm_bindgen ( method , setter , js_name = setTimeout ) ]
    pub fn set_set_timeout(this: &Global, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = queueMicrotask ) ]
    pub fn queue_microtask(this: &Global) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = queueMicrotask ) ]
    pub fn set_queue_microtask(this: &Global, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn undefined(this: &Global) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_undefined(this: &Global, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn unescape(this: &Global) -> Function;
    #[wasm_bindgen(method, setter)]
    pub fn set_unescape(this: &Global, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn gc(this: &Global) -> Function;
    #[wasm_bindgen(method, setter)]
    pub fn set_gc(this: &Global, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn v8debug(this: &Global) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_v8debug(this: &Global, value: &JsValue);
    pub type Timer;
    # [ wasm_bindgen ( method , js_name = hasRef ) ]
    pub fn has_ref(this: &Timer) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = hasRef ) ]
    pub fn set_has_ref(this: &Timer, value: &Function);
    # [ wasm_bindgen ( method , js_name = ref ) ]
    pub fn ref_(this: &Timer) -> Timer;
    # [ wasm_bindgen ( method , setter , js_name = ref ) ]
    pub fn set_ref_(this: &Timer, value: &Function);
    #[wasm_bindgen(method)]
    pub fn refresh(this: &Timer) -> Timer;
    #[wasm_bindgen(method, setter)]
    pub fn set_refresh(this: &Timer, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unref(this: &Timer) -> Timer;
    #[wasm_bindgen(method, setter)]
    pub fn set_unref(this: &Timer, value: &Function);
    pub type Immediate;
    # [ wasm_bindgen ( method , js_name = hasRef ) ]
    pub fn has_ref(this: &Immediate) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = hasRef ) ]
    pub fn set_has_ref(this: &Immediate, value: &Function);
    # [ wasm_bindgen ( method , js_name = ref ) ]
    pub fn ref_(this: &Immediate) -> Immediate;
    # [ wasm_bindgen ( method , setter , js_name = ref ) ]
    pub fn set_ref_(this: &Immediate, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unref(this: &Immediate) -> Immediate;
    #[wasm_bindgen(method, setter)]
    pub fn set_unref(this: &Immediate, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = _onImmediate ) ]
    pub fn on_immediate(this: &Immediate) -> Function;
    # [ wasm_bindgen ( method , setter , js_name = _onImmediate ) ]
    pub fn set_on_immediate(this: &Immediate, value: &Function);
    pub type Timeout;
    # [ wasm_bindgen ( method , js_name = hasRef ) ]
    pub fn has_ref(this: &Timeout) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = hasRef ) ]
    pub fn set_has_ref(this: &Timeout, value: &Function);
    # [ wasm_bindgen ( method , js_name = ref ) ]
    pub fn ref_(this: &Timeout) -> Timeout;
    # [ wasm_bindgen ( method , setter , js_name = ref ) ]
    pub fn set_ref_(this: &Timeout, value: &Function);
    #[wasm_bindgen(method)]
    pub fn refresh(this: &Timeout) -> Timeout;
    #[wasm_bindgen(method, setter)]
    pub fn set_refresh(this: &Timeout, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unref(this: &Timeout) -> Timeout;
    #[wasm_bindgen(method, setter)]
    pub fn set_unref(this: &Timeout, value: &Function);
    pub type Module;
    # [ wasm_bindgen ( method , js_name = runMain ) ]
    pub fn run_main(this: &Module);
    # [ wasm_bindgen ( method , setter , js_name = runMain ) ]
    pub fn set_run_main(this: &Module, value: &Function);
    #[wasm_bindgen(method)]
    pub fn wrap(this: &Module, code: &str) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_wrap(this: &Module, value: &Function);
    # [ wasm_bindgen ( method , js_name = createRequireFromPath ) ]
    pub fn create_require_from_path(this: &Module, path: &str) -> NodeRequire;
    # [ wasm_bindgen ( method , setter , js_name = createRequireFromPath ) ]
    pub fn set_create_require_from_path(this: &Module, value: &Function);
    # [ wasm_bindgen ( method , js_name = createRequire ) ]
    pub fn create_require(this: &Module, path: &str) -> NodeRequire;
    # [ wasm_bindgen ( method , setter , js_name = createRequire ) ]
    pub fn set_create_require(this: &Module, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = builtinModules ) ]
    pub fn builtin_modules(this: &Module) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = builtinModules ) ]
    pub fn set_builtin_modules(this: &Module, value: &Array);
    # [ wasm_bindgen ( method , getter , js_name = Module ) ]
    pub fn module(this: &Module) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = Module ) ]
    pub fn set_module(this: &Module, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn exports(this: &Module) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_exports(this: &Module, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn require(this: &Module) -> NodeRequireFunction;
    #[wasm_bindgen(method, setter)]
    pub fn set_require(this: &Module, value: &NodeRequireFunction);
    #[wasm_bindgen(method, getter)]
    pub fn id(this: &Module) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_id(this: &Module, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn filename(this: &Module) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_filename(this: &Module, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn loaded(this: &Module) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_loaded(this: &Module, value: bool);
    #[wasm_bindgen(method, getter)]
    pub fn parent(this: &Module) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_parent(this: &Module, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn children(this: &Module) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_children(this: &Module, value: &Array);
    #[wasm_bindgen(method, getter)]
    pub fn paths(this: &Module) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_paths(this: &Module, value: &Array);
    #[wasm_bindgen(constructor)]
    pub fn new_module(id: &str, parent: Option<&Module>) -> Module;
    #[wasm_bindgen(method, getter)]
    pub fn kind(this: &TypedArray) -> i32;
    pub type TypedArray;
    #[wasm_bindgen(method, getter)]
    pub fn kind(this: &ArrayBufferView) -> i32;
    pub type ArrayBufferView;
    pub type PoorMansUnknown;
}
