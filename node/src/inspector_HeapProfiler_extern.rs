// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "HeapProfiler")]
extern "C" {
    #[doc = "Heap snapshot object id."]
    pub type HeapSnapshotObjectId;
    #[doc = "Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes."]
    pub type SamplingHeapProfileNode;
    #[doc = "Function location."]
    # [ wasm_bindgen ( method , getter , js_name = callFrame ) ]
    pub fn call_frame(this: &SamplingHeapProfileNode) -> CallFrame;
    # [ wasm_bindgen ( method , setter , js_name = callFrame ) ]
    pub fn set_call_frame(this: &SamplingHeapProfileNode, value: &CallFrame);
    #[doc = "Allocations size in bytes for the node excluding children."]
    # [ wasm_bindgen ( method , getter , js_name = selfSize ) ]
    pub fn self_size(this: &SamplingHeapProfileNode) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = selfSize ) ]
    pub fn set_self_size(this: &SamplingHeapProfileNode, value: f64);
    #[doc = "Child nodes."]
    #[wasm_bindgen(method, getter)]
    pub fn children(this: &SamplingHeapProfileNode) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_children(this: &SamplingHeapProfileNode, value: &Array);
    #[doc = "Profile."]
    pub type SamplingHeapProfile;
    #[wasm_bindgen(method, getter)]
    pub fn head(this: &SamplingHeapProfile) -> SamplingHeapProfileNode;
    #[wasm_bindgen(method, setter)]
    pub fn set_head(this: &SamplingHeapProfile, value: &SamplingHeapProfileNode);
    pub type StartTrackingHeapObjectsParameterType;
    # [ wasm_bindgen ( method , getter , js_name = trackAllocations ) ]
    pub fn track_allocations(this: &StartTrackingHeapObjectsParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = trackAllocations ) ]
    pub fn set_track_allocations(this: &StartTrackingHeapObjectsParameterType, value: Option<bool>);
    pub type StopTrackingHeapObjectsParameterType;
    #[doc = "If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped."]
    # [ wasm_bindgen ( method , getter , js_name = reportProgress ) ]
    pub fn report_progress(this: &StopTrackingHeapObjectsParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = reportProgress ) ]
    pub fn set_report_progress(this: &StopTrackingHeapObjectsParameterType, value: Option<bool>);
    pub type TakeHeapSnapshotParameterType;
    #[doc = "If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken."]
    # [ wasm_bindgen ( method , getter , js_name = reportProgress ) ]
    pub fn report_progress(this: &TakeHeapSnapshotParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = reportProgress ) ]
    pub fn set_report_progress(this: &TakeHeapSnapshotParameterType, value: Option<bool>);
    pub type GetObjectByHeapObjectIdParameterType;
    # [ wasm_bindgen ( method , getter , js_name = objectId ) ]
    pub fn object_id(this: &GetObjectByHeapObjectIdParameterType) -> HeapSnapshotObjectId;
    # [ wasm_bindgen ( method , setter , js_name = objectId ) ]
    pub fn set_object_id(this: &GetObjectByHeapObjectIdParameterType, value: &HeapSnapshotObjectId);
    #[doc = "Symbolic group name that can be used to release multiple objects."]
    # [ wasm_bindgen ( method , getter , js_name = objectGroup ) ]
    pub fn object_group(this: &GetObjectByHeapObjectIdParameterType) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = objectGroup ) ]
    pub fn set_object_group(this: &GetObjectByHeapObjectIdParameterType, value: Option<&str>);
    pub type AddInspectedHeapObjectParameterType;
    #[doc = "Heap snapshot object id to be accessible by means of $x command line API."]
    # [ wasm_bindgen ( method , getter , js_name = heapObjectId ) ]
    pub fn heap_object_id(this: &AddInspectedHeapObjectParameterType) -> HeapSnapshotObjectId;
    # [ wasm_bindgen ( method , setter , js_name = heapObjectId ) ]
    pub fn set_heap_object_id(
        this: &AddInspectedHeapObjectParameterType,
        value: &HeapSnapshotObjectId,
    );
    pub type GetHeapObjectIdParameterType;
    #[doc = "Identifier of the object to get heap object id for."]
    # [ wasm_bindgen ( method , getter , js_name = objectId ) ]
    pub fn object_id(this: &GetHeapObjectIdParameterType) -> RemoteObjectId;
    # [ wasm_bindgen ( method , setter , js_name = objectId ) ]
    pub fn set_object_id(this: &GetHeapObjectIdParameterType, value: &RemoteObjectId);
    pub type StartSamplingParameterType;
    #[doc = "Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes."]
    # [ wasm_bindgen ( method , getter , js_name = samplingInterval ) ]
    pub fn sampling_interval(this: &StartSamplingParameterType) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = samplingInterval ) ]
    pub fn set_sampling_interval(this: &StartSamplingParameterType, value: Option<f64>);
    pub type GetObjectByHeapObjectIdReturnType;
    #[doc = "Evaluation result."]
    #[wasm_bindgen(method, getter)]
    pub fn result(this: &GetObjectByHeapObjectIdReturnType) -> RemoteObject;
    #[wasm_bindgen(method, setter)]
    pub fn set_result(this: &GetObjectByHeapObjectIdReturnType, value: &RemoteObject);
    pub type GetHeapObjectIdReturnType;
    #[doc = "Id of the heap snapshot object corresponding to the passed remote object id."]
    # [ wasm_bindgen ( method , getter , js_name = heapSnapshotObjectId ) ]
    pub fn heap_snapshot_object_id(this: &GetHeapObjectIdReturnType) -> HeapSnapshotObjectId;
    # [ wasm_bindgen ( method , setter , js_name = heapSnapshotObjectId ) ]
    pub fn set_heap_snapshot_object_id(
        this: &GetHeapObjectIdReturnType,
        value: &HeapSnapshotObjectId,
    );
    pub type StopSamplingReturnType;
    #[doc = "Recorded sampling heap profile."]
    #[wasm_bindgen(method, getter)]
    pub fn profile(this: &StopSamplingReturnType) -> SamplingHeapProfile;
    #[wasm_bindgen(method, setter)]
    pub fn set_profile(this: &StopSamplingReturnType, value: &SamplingHeapProfile);
    pub type GetSamplingProfileReturnType;
    #[doc = "Return the sampling profile being collected."]
    #[wasm_bindgen(method, getter)]
    pub fn profile(this: &GetSamplingProfileReturnType) -> SamplingHeapProfile;
    #[wasm_bindgen(method, setter)]
    pub fn set_profile(this: &GetSamplingProfileReturnType, value: &SamplingHeapProfile);
    pub type AddHeapSnapshotChunkEventDataType;
    #[wasm_bindgen(method, getter)]
    pub fn chunk(this: &AddHeapSnapshotChunkEventDataType) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_chunk(this: &AddHeapSnapshotChunkEventDataType, value: &str);
    pub type ReportHeapSnapshotProgressEventDataType;
    #[wasm_bindgen(method, getter)]
    pub fn done(this: &ReportHeapSnapshotProgressEventDataType) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_done(this: &ReportHeapSnapshotProgressEventDataType, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn total(this: &ReportHeapSnapshotProgressEventDataType) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_total(this: &ReportHeapSnapshotProgressEventDataType, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn finished(this: &ReportHeapSnapshotProgressEventDataType) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_finished(this: &ReportHeapSnapshotProgressEventDataType, value: Option<bool>);
    pub type LastSeenObjectIdEventDataType;
    # [ wasm_bindgen ( method , getter , js_name = lastSeenObjectId ) ]
    pub fn last_seen_object_id(this: &LastSeenObjectIdEventDataType) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = lastSeenObjectId ) ]
    pub fn set_last_seen_object_id(this: &LastSeenObjectIdEventDataType, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn timestamp(this: &LastSeenObjectIdEventDataType) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_timestamp(this: &LastSeenObjectIdEventDataType, value: f64);
    pub type HeapStatsUpdateEventDataType;
    #[doc = "An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment."]
    # [ wasm_bindgen ( method , getter , js_name = statsUpdate ) ]
    pub fn stats_update(this: &HeapStatsUpdateEventDataType) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = statsUpdate ) ]
    pub fn set_stats_update(this: &HeapStatsUpdateEventDataType, value: &Array);
}
