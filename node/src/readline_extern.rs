// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "readline")]
extern "C" {
    pub type Key;
    #[wasm_bindgen(method, getter)]
    pub fn sequence(this: &Key) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_sequence(this: &Key, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn name(this: &Key) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_name(this: &Key, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn ctrl(this: &Key) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_ctrl(this: &Key, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn meta(this: &Key) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_meta(this: &Key, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn shift(this: &Key) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_shift(this: &Key, value: Option<bool>);
    pub type Interface;
    #[wasm_bindgen(method, getter)]
    pub fn terminal(this: &Interface) -> bool;
    #[doc = "The current input data"]
    #[wasm_bindgen(method, getter)]
    pub fn line(this: &Interface) -> String;
    #[doc = "The current cursor position in the input line"]
    #[wasm_bindgen(method, getter)]
    pub fn cursor(this: &Interface) -> f64;
    #[wasm_bindgen(constructor)]
    pub fn new_interface(
        input: &node_js::ReadableStream,
        output: Option<&node_js::WritableStream>,
        completer: &JsValue,
        terminal: Option<bool>,
    ) -> Interface;
    #[wasm_bindgen(constructor)]
    pub fn new_interface_2(options: &ReadLineOptions) -> Interface;
    # [ wasm_bindgen ( method , js_name = setPrompt ) ]
    pub fn set_prompt(this: &Interface, prompt: &str);
    # [ wasm_bindgen ( method , setter , js_name = setPrompt ) ]
    pub fn set_set_prompt(this: &Interface, value: &Function);
    #[wasm_bindgen(method)]
    pub fn prompt(this: &Interface, preserve_cursor: Option<bool>);
    #[wasm_bindgen(method, setter)]
    pub fn set_prompt(this: &Interface, value: &Function);
    #[wasm_bindgen(method)]
    pub fn question(this: &Interface, query: &str, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_question(this: &Interface, value: &Function);
    #[wasm_bindgen(method)]
    pub fn pause(this: &Interface) -> Interface;
    #[wasm_bindgen(method, setter)]
    pub fn set_pause(this: &Interface, value: &Function);
    #[wasm_bindgen(method)]
    pub fn resume(this: &Interface) -> Interface;
    #[wasm_bindgen(method, setter)]
    pub fn set_resume(this: &Interface, value: &Function);
    #[wasm_bindgen(method)]
    pub fn close(this: &Interface);
    #[wasm_bindgen(method, setter)]
    pub fn set_close(this: &Interface, value: &Function);
    #[wasm_bindgen(method)]
    pub fn write(this: &Interface, data: &JsValue, key: Option<&Key>);
    #[wasm_bindgen(method, setter)]
    pub fn set_write(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Interface, event: &str, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_6(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_6(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_7(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_7(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_8(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_8(this: &Interface, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Interface, event: &JsValue, args: &Array) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &Interface, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &Interface, event: &JsValue, input: &str) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(this: &Interface, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(this: &Interface, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_6(this: &Interface, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_6(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_7(this: &Interface, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_7(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_8(this: &Interface, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_8(this: &Interface, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Interface, event: &str, listener: &JsValue) -> Interface;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_6(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_6(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_7(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_7(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_8(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_8(this: &Interface, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Interface, event: &str, listener: &JsValue) -> Interface;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_6(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_6(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_7(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_7(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_8(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_8(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &Interface, event: &str, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_6(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_6(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_7(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_7(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_8(this: &Interface, event: &JsValue, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_8(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &Interface, event: &str, listener: &JsValue) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &Interface,
        event: &JsValue,
        listener: &JsValue,
    ) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &Interface,
        event: &JsValue,
        listener: &JsValue,
    ) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(
        this: &Interface,
        event: &JsValue,
        listener: &JsValue,
    ) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(
        this: &Interface,
        event: &JsValue,
        listener: &JsValue,
    ) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_6(
        this: &Interface,
        event: &JsValue,
        listener: &JsValue,
    ) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_6(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_7(
        this: &Interface,
        event: &JsValue,
        listener: &JsValue,
    ) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_7(this: &Interface, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_8(
        this: &Interface,
        event: &JsValue,
        listener: &JsValue,
    ) -> Interface;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_8(this: &Interface, value: &Function);
    #[wasm_bindgen(method)]
    pub fn computed_property_name(this: &Interface) -> AsyncIterableIterator;
    #[wasm_bindgen(method, setter)]
    pub fn set_computed_property_name(this: &Interface, value: &Function);
    pub type ReadLine;
    pub type CompleterResult;
    pub type ReadLineOptions;
    #[wasm_bindgen(method, getter)]
    pub fn input(this: &ReadLineOptions) -> node_js::ReadableStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_input(this: &ReadLineOptions, value: &node_js::ReadableStream);
    #[wasm_bindgen(method, getter)]
    pub fn output(this: &ReadLineOptions) -> Option<node_js::WritableStream>;
    #[wasm_bindgen(method, setter)]
    pub fn set_output(this: &ReadLineOptions, value: Option<&node_js::WritableStream>);
    #[wasm_bindgen(method, getter)]
    pub fn completer(this: &ReadLineOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_completer(this: &ReadLineOptions, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn terminal(this: &ReadLineOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_terminal(this: &ReadLineOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = historySize ) ]
    pub fn history_size(this: &ReadLineOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = historySize ) ]
    pub fn set_history_size(this: &ReadLineOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn prompt(this: &ReadLineOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_prompt(this: &ReadLineOptions, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = crlfDelay ) ]
    pub fn crlf_delay(this: &ReadLineOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = crlfDelay ) ]
    pub fn set_crlf_delay(this: &ReadLineOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = removeHistoryDuplicates ) ]
    pub fn remove_history_duplicates(this: &ReadLineOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = removeHistoryDuplicates ) ]
    pub fn set_remove_history_duplicates(this: &ReadLineOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = escapeCodeTimeout ) ]
    pub fn escape_code_timeout(this: &ReadLineOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = escapeCodeTimeout ) ]
    pub fn set_escape_code_timeout(this: &ReadLineOptions, value: Option<f64>);
    # [ wasm_bindgen ( js_name = createInterface ) ]
    pub fn create_interface(
        input: &node_js::ReadableStream,
        output: Option<&node_js::WritableStream>,
        completer: &JsValue,
        terminal: Option<bool>,
    ) -> Interface;
    # [ wasm_bindgen ( js_name = createInterface ) ]
    pub fn create_interface_2(options: &ReadLineOptions) -> Interface;
    # [ wasm_bindgen ( js_name = emitKeypressEvents ) ]
    pub fn emit_keypress_events(
        stream: &node_js::ReadableStream,
        readline_interface: Option<&Interface>,
    );
    pub type Direction;
    #[doc = "Clears the current line of this WriteStream in a direction identified by `dir`."]
    # [ wasm_bindgen ( js_name = clearLine ) ]
    pub fn clear_line(
        stream: &node_js::WritableStream,
        dir: &Direction,
        callback: &JsValue,
    ) -> bool;
    #[doc = "Clears this `WriteStream` from the current cursor down."]
    # [ wasm_bindgen ( js_name = clearScreenDown ) ]
    pub fn clear_screen_down(stream: &node_js::WritableStream, callback: &JsValue) -> bool;
    #[doc = "Moves this WriteStream's cursor to the specified position."]
    # [ wasm_bindgen ( js_name = cursorTo ) ]
    pub fn cursor_to(
        stream: &node_js::WritableStream,
        x: f64,
        y: Option<f64>,
        callback: &JsValue,
    ) -> bool;
    #[doc = "Moves this WriteStream's cursor relative to its current position."]
    # [ wasm_bindgen ( js_name = moveCursor ) ]
    pub fn move_cursor(
        stream: &node_js::WritableStream,
        dx: f64,
        dy: f64,
        callback: &JsValue,
    ) -> bool;
}
