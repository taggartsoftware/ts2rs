// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl Agent {
    pub fn new() -> Agent {
        JsCast::unchecked_into(Object::new())
    }
}
impl AgentOptions {
    pub fn new() -> AgentOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Server {
    pub fn new() -> Server {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<crate::http::Agent> for Agent {
    fn as_ref(&self) -> &crate::http::Agent {
        JsCast::unchecked_ref(self)
    }
}
impl From<Agent> for crate::http::Agent {
    fn from(child: Agent) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<CommonConnectionOptions> for AgentOptions {
    fn as_ref(&self) -> &CommonConnectionOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<AgentOptions> for CommonConnectionOptions {
    fn from(child: AgentOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<SecureContextOptions> for AgentOptions {
    fn as_ref(&self) -> &SecureContextOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<AgentOptions> for SecureContextOptions {
    fn from(child: AgentOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::http::AgentOptions> for AgentOptions {
    fn as_ref(&self) -> &crate::http::AgentOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<AgentOptions> for crate::http::AgentOptions {
    fn from(child: AgentOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::tls::ConnectionOptions> for AgentOptions {
    fn as_ref(&self) -> &crate::tls::ConnectionOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<AgentOptions> for crate::tls::ConnectionOptions {
    fn from(child: AgentOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for Server {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<Server> for node_js::EventEmitter {
    fn from(child: Server) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<net::Server> for Server {
    fn as_ref(&self) -> &net::Server {
        JsCast::unchecked_ref(self)
    }
}
impl From<Server> for net::Server {
    fn from(child: Server) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::tls::Server> for Server {
    fn as_ref(&self) -> &crate::tls::Server {
        JsCast::unchecked_ref(self)
    }
}
impl From<Server> for crate::tls::Server {
    fn from(child: Server) -> Self {
        JsCast::unchecked_into(child)
    }
}
