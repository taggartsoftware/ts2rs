// generated by ts2rs 0.2.0
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "inspector")]
extern "C" {
    #[doc = "Unique script identifier."]
    pub type ScriptId;
    #[doc = "Unique object identifier."]
    pub type RemoteObjectId;
    #[doc = "Primitive value which cannot be JSON-stringified."]
    pub type UnserializableValue;
    #[doc = "Mirror object referencing original JavaScript object."]
    pub type RemoteObject;
    #[doc = "Object type."]
    # [ wasm_bindgen ( method , getter , js_name = type ) ]
    pub fn type_(this: &RemoteObject) -> String;
    # [ wasm_bindgen ( method , setter , js_name = type ) ]
    pub fn set_type_(this: &RemoteObject, value: &str);
    #[doc = "Object subtype hint. Specified for <code>object</code> type values only."]
    #[wasm_bindgen(method, getter)]
    pub fn subtype(this: &RemoteObject) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_subtype(this: &RemoteObject, value: Option<&str>);
    #[doc = "Object class (constructor) name. Specified for <code>object</code> type values only."]
    # [ wasm_bindgen ( method , getter , js_name = className ) ]
    pub fn class_name(this: &RemoteObject) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = className ) ]
    pub fn set_class_name(this: &RemoteObject, value: Option<&str>);
    #[doc = "Remote object value in case of primitive values or JSON values (if it was requested)."]
    #[wasm_bindgen(method, getter)]
    pub fn value(this: &RemoteObject) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_value(this: &RemoteObject, value: &JsValue);
    #[doc = "Primitive value which can not be JSON-stringified does not have <code>value</code>, but gets this property."]
    # [ wasm_bindgen ( method , getter , js_name = unserializableValue ) ]
    pub fn unserializable_value(this: &RemoteObject) -> Option<runtime::UnserializableValue>;
    # [ wasm_bindgen ( method , setter , js_name = unserializableValue ) ]
    pub fn set_unserializable_value(
        this: &RemoteObject,
        value: Option<runtime::UnserializableValueRef>,
    );
    #[doc = "String representation of the object."]
    #[wasm_bindgen(method, getter)]
    pub fn description(this: &RemoteObject) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_description(this: &RemoteObject, value: Option<&str>);
    #[doc = "Unique object identifier (for non-primitive values)."]
    # [ wasm_bindgen ( method , getter , js_name = objectId ) ]
    pub fn object_id(this: &RemoteObject) -> Option<runtime::RemoteObjectId>;
    # [ wasm_bindgen ( method , setter , js_name = objectId ) ]
    pub fn set_object_id(this: &RemoteObject, value: Option<runtime::RemoteObjectIdRef>);
    #[doc = "Preview containing abbreviated property values. Specified for <code>object</code> type values only."]
    #[wasm_bindgen(method, getter)]
    pub fn preview(this: &RemoteObject) -> Option<runtime::ObjectPreview>;
    #[wasm_bindgen(method, setter)]
    pub fn set_preview(this: &RemoteObject, value: Option<&runtime::ObjectPreview>);
    # [ wasm_bindgen ( method , getter , js_name = customPreview ) ]
    pub fn custom_preview(this: &RemoteObject) -> Option<runtime::CustomPreview>;
    # [ wasm_bindgen ( method , setter , js_name = customPreview ) ]
    pub fn set_custom_preview(this: &RemoteObject, value: Option<&runtime::CustomPreview>);
    pub type CustomPreview;
    #[wasm_bindgen(method, getter)]
    pub fn header(this: &CustomPreview) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_header(this: &CustomPreview, value: &str);
    # [ wasm_bindgen ( method , getter , js_name = hasBody ) ]
    pub fn has_body(this: &CustomPreview) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = hasBody ) ]
    pub fn set_has_body(this: &CustomPreview, value: bool);
    # [ wasm_bindgen ( method , getter , js_name = formatterObjectId ) ]
    pub fn formatter_object_id(this: &CustomPreview) -> runtime::RemoteObjectId;
    # [ wasm_bindgen ( method , setter , js_name = formatterObjectId ) ]
    pub fn set_formatter_object_id(this: &CustomPreview, value: runtime::RemoteObjectIdRef);
    # [ wasm_bindgen ( method , getter , js_name = bindRemoteObjectFunctionId ) ]
    pub fn bind_remote_object_function_id(this: &CustomPreview) -> runtime::RemoteObjectId;
    # [ wasm_bindgen ( method , setter , js_name = bindRemoteObjectFunctionId ) ]
    pub fn set_bind_remote_object_function_id(
        this: &CustomPreview,
        value: runtime::RemoteObjectIdRef,
    );
    # [ wasm_bindgen ( method , getter , js_name = configObjectId ) ]
    pub fn config_object_id(this: &CustomPreview) -> Option<runtime::RemoteObjectId>;
    # [ wasm_bindgen ( method , setter , js_name = configObjectId ) ]
    pub fn set_config_object_id(this: &CustomPreview, value: Option<runtime::RemoteObjectIdRef>);
    #[doc = "Object containing abbreviated remote object value."]
    pub type ObjectPreview;
    #[doc = "Object type."]
    # [ wasm_bindgen ( method , getter , js_name = type ) ]
    pub fn type_(this: &ObjectPreview) -> String;
    # [ wasm_bindgen ( method , setter , js_name = type ) ]
    pub fn set_type_(this: &ObjectPreview, value: &str);
    #[doc = "Object subtype hint. Specified for <code>object</code> type values only."]
    #[wasm_bindgen(method, getter)]
    pub fn subtype(this: &ObjectPreview) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_subtype(this: &ObjectPreview, value: Option<&str>);
    #[doc = "String representation of the object."]
    #[wasm_bindgen(method, getter)]
    pub fn description(this: &ObjectPreview) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_description(this: &ObjectPreview, value: Option<&str>);
    #[doc = "True iff some of the properties or entries of the original object did not fit."]
    #[wasm_bindgen(method, getter)]
    pub fn overflow(this: &ObjectPreview) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_overflow(this: &ObjectPreview, value: bool);
    #[doc = "List of the properties."]
    #[wasm_bindgen(method, getter)]
    pub fn properties(this: &ObjectPreview) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_properties(this: &ObjectPreview, value: &Array);
    #[doc = "List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only."]
    #[wasm_bindgen(method, getter)]
    pub fn entries(this: &ObjectPreview) -> Option<Array>;
    #[wasm_bindgen(method, setter)]
    pub fn set_entries(this: &ObjectPreview, value: Option<&Array>);
    pub type PropertyPreview;
    #[doc = "Property name."]
    #[wasm_bindgen(method, getter)]
    pub fn name(this: &PropertyPreview) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_name(this: &PropertyPreview, value: &str);
    #[doc = "Object type. Accessor means that the property itself is an accessor property."]
    # [ wasm_bindgen ( method , getter , js_name = type ) ]
    pub fn type_(this: &PropertyPreview) -> String;
    # [ wasm_bindgen ( method , setter , js_name = type ) ]
    pub fn set_type_(this: &PropertyPreview, value: &str);
    #[doc = "User-friendly property value string."]
    #[wasm_bindgen(method, getter)]
    pub fn value(this: &PropertyPreview) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_value(this: &PropertyPreview, value: Option<&str>);
    #[doc = "Nested value preview."]
    # [ wasm_bindgen ( method , getter , js_name = valuePreview ) ]
    pub fn value_preview(this: &PropertyPreview) -> Option<runtime::ObjectPreview>;
    # [ wasm_bindgen ( method , setter , js_name = valuePreview ) ]
    pub fn set_value_preview(this: &PropertyPreview, value: Option<&runtime::ObjectPreview>);
    #[doc = "Object subtype hint. Specified for <code>object</code> type values only."]
    #[wasm_bindgen(method, getter)]
    pub fn subtype(this: &PropertyPreview) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_subtype(this: &PropertyPreview, value: Option<&str>);
    pub type EntryPreview;
    #[doc = "Preview of the key. Specified for map-like collection entries."]
    #[wasm_bindgen(method, getter)]
    pub fn key(this: &EntryPreview) -> Option<runtime::ObjectPreview>;
    #[wasm_bindgen(method, setter)]
    pub fn set_key(this: &EntryPreview, value: Option<&runtime::ObjectPreview>);
    #[doc = "Preview of the value."]
    #[wasm_bindgen(method, getter)]
    pub fn value(this: &EntryPreview) -> runtime::ObjectPreview;
    #[wasm_bindgen(method, setter)]
    pub fn set_value(this: &EntryPreview, value: &runtime::ObjectPreview);
    #[doc = "Object property descriptor."]
    pub type PropertyDescriptor;
    #[doc = "Property name or symbol description."]
    #[wasm_bindgen(method, getter)]
    pub fn name(this: &PropertyDescriptor) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_name(this: &PropertyDescriptor, value: &str);
    #[doc = "The value associated with the property."]
    #[wasm_bindgen(method, getter)]
    pub fn value(this: &PropertyDescriptor) -> Option<runtime::RemoteObject>;
    #[wasm_bindgen(method, setter)]
    pub fn set_value(this: &PropertyDescriptor, value: Option<&runtime::RemoteObject>);
    #[doc = "True if the value associated with the property may be changed (data descriptors only)."]
    #[wasm_bindgen(method, getter)]
    pub fn writable(this: &PropertyDescriptor) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_writable(this: &PropertyDescriptor, value: Option<bool>);
    #[doc = "A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only)."]
    #[wasm_bindgen(method, getter)]
    pub fn get(this: &PropertyDescriptor) -> Option<runtime::RemoteObject>;
    #[wasm_bindgen(method, setter)]
    pub fn set_get(this: &PropertyDescriptor, value: Option<&runtime::RemoteObject>);
    #[doc = "A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only)."]
    #[wasm_bindgen(method, getter)]
    pub fn set(this: &PropertyDescriptor) -> Option<runtime::RemoteObject>;
    #[wasm_bindgen(method, setter)]
    pub fn set_set(this: &PropertyDescriptor, value: Option<&runtime::RemoteObject>);
    #[doc = "True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object."]
    #[wasm_bindgen(method, getter)]
    pub fn configurable(this: &PropertyDescriptor) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_configurable(this: &PropertyDescriptor, value: bool);
    #[doc = "True if this property shows up during enumeration of the properties on the corresponding object."]
    #[wasm_bindgen(method, getter)]
    pub fn enumerable(this: &PropertyDescriptor) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_enumerable(this: &PropertyDescriptor, value: bool);
    #[doc = "True if the result was thrown during the evaluation."]
    # [ wasm_bindgen ( method , getter , js_name = wasThrown ) ]
    pub fn was_thrown(this: &PropertyDescriptor) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = wasThrown ) ]
    pub fn set_was_thrown(this: &PropertyDescriptor, value: Option<bool>);
    #[doc = "True if the property is owned for the object."]
    # [ wasm_bindgen ( method , getter , js_name = isOwn ) ]
    pub fn is_own(this: &PropertyDescriptor) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = isOwn ) ]
    pub fn set_is_own(this: &PropertyDescriptor, value: Option<bool>);
    #[doc = "Property symbol object, if the property is of the <code>symbol</code> type."]
    #[wasm_bindgen(method, getter)]
    pub fn symbol(this: &PropertyDescriptor) -> Option<runtime::RemoteObject>;
    #[wasm_bindgen(method, setter)]
    pub fn set_symbol(this: &PropertyDescriptor, value: Option<&runtime::RemoteObject>);
    #[doc = "Object internal property descriptor. This property isn't normally visible in JavaScript code."]
    pub type InternalPropertyDescriptor;
    #[doc = "Conventional property name."]
    #[wasm_bindgen(method, getter)]
    pub fn name(this: &InternalPropertyDescriptor) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_name(this: &InternalPropertyDescriptor, value: &str);
    #[doc = "The value associated with the property."]
    #[wasm_bindgen(method, getter)]
    pub fn value(this: &InternalPropertyDescriptor) -> Option<runtime::RemoteObject>;
    #[wasm_bindgen(method, setter)]
    pub fn set_value(this: &InternalPropertyDescriptor, value: Option<&runtime::RemoteObject>);
    #[doc = "Represents function call argument. Either remote object id <code>objectId</code>, primitive <code>value</code>, unserializable primitive value or neither of (for undefined) them should be specified."]
    pub type CallArgument;
    #[doc = "Primitive value or serializable javascript object."]
    #[wasm_bindgen(method, getter)]
    pub fn value(this: &CallArgument) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_value(this: &CallArgument, value: &JsValue);
    #[doc = "Primitive value which can not be JSON-stringified."]
    # [ wasm_bindgen ( method , getter , js_name = unserializableValue ) ]
    pub fn unserializable_value(this: &CallArgument) -> Option<runtime::UnserializableValue>;
    # [ wasm_bindgen ( method , setter , js_name = unserializableValue ) ]
    pub fn set_unserializable_value(
        this: &CallArgument,
        value: Option<runtime::UnserializableValueRef>,
    );
    #[doc = "Remote object handle."]
    # [ wasm_bindgen ( method , getter , js_name = objectId ) ]
    pub fn object_id(this: &CallArgument) -> Option<runtime::RemoteObjectId>;
    # [ wasm_bindgen ( method , setter , js_name = objectId ) ]
    pub fn set_object_id(this: &CallArgument, value: Option<runtime::RemoteObjectIdRef>);
    #[doc = "Id of an execution context."]
    pub type ExecutionContextId;
    #[doc = "Description of an isolated world."]
    pub type ExecutionContextDescription;
    #[doc = "Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed."]
    #[wasm_bindgen(method, getter)]
    pub fn id(this: &ExecutionContextDescription) -> runtime::ExecutionContextId;
    #[wasm_bindgen(method, setter)]
    pub fn set_id(this: &ExecutionContextDescription, value: runtime::ExecutionContextIdRef);
    #[doc = "Execution context origin."]
    #[wasm_bindgen(method, getter)]
    pub fn origin(this: &ExecutionContextDescription) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_origin(this: &ExecutionContextDescription, value: &str);
    #[doc = "Human readable name describing given context."]
    #[wasm_bindgen(method, getter)]
    pub fn name(this: &ExecutionContextDescription) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_name(this: &ExecutionContextDescription, value: &str);
    #[doc = "Embedder-specific auxiliary data."]
    # [ wasm_bindgen ( method , getter , js_name = auxData ) ]
    pub fn aux_data(this: &ExecutionContextDescription) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = auxData ) ]
    pub fn set_aux_data(this: &ExecutionContextDescription, value: &JsValue);
    #[doc = "Detailed information about exception (or error) that was thrown during script compilation or execution."]
    pub type ExceptionDetails;
    #[doc = "Exception id."]
    # [ wasm_bindgen ( method , getter , js_name = exceptionId ) ]
    pub fn exception_id(this: &ExceptionDetails) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = exceptionId ) ]
    pub fn set_exception_id(this: &ExceptionDetails, value: f64);
    #[doc = "Exception text, which should be used together with exception object when available."]
    #[wasm_bindgen(method, getter)]
    pub fn text(this: &ExceptionDetails) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_text(this: &ExceptionDetails, value: &str);
    #[doc = "Line number of the exception location (0-based)."]
    # [ wasm_bindgen ( method , getter , js_name = lineNumber ) ]
    pub fn line_number(this: &ExceptionDetails) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = lineNumber ) ]
    pub fn set_line_number(this: &ExceptionDetails, value: f64);
    #[doc = "Column number of the exception location (0-based)."]
    # [ wasm_bindgen ( method , getter , js_name = columnNumber ) ]
    pub fn column_number(this: &ExceptionDetails) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = columnNumber ) ]
    pub fn set_column_number(this: &ExceptionDetails, value: f64);
    #[doc = "Script ID of the exception location."]
    # [ wasm_bindgen ( method , getter , js_name = scriptId ) ]
    pub fn script_id(this: &ExceptionDetails) -> Option<runtime::ScriptId>;
    # [ wasm_bindgen ( method , setter , js_name = scriptId ) ]
    pub fn set_script_id(this: &ExceptionDetails, value: Option<runtime::ScriptIdRef>);
    #[doc = "URL of the exception location, to be used when the script was not reported."]
    #[wasm_bindgen(method, getter)]
    pub fn url(this: &ExceptionDetails) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_url(this: &ExceptionDetails, value: Option<&str>);
    #[doc = "JavaScript stack trace if available."]
    # [ wasm_bindgen ( method , getter , js_name = stackTrace ) ]
    pub fn stack_trace(this: &ExceptionDetails) -> Option<runtime::StackTrace>;
    # [ wasm_bindgen ( method , setter , js_name = stackTrace ) ]
    pub fn set_stack_trace(this: &ExceptionDetails, value: Option<&runtime::StackTrace>);
    #[doc = "Exception object if available."]
    #[wasm_bindgen(method, getter)]
    pub fn exception(this: &ExceptionDetails) -> Option<runtime::RemoteObject>;
    #[wasm_bindgen(method, setter)]
    pub fn set_exception(this: &ExceptionDetails, value: Option<&runtime::RemoteObject>);
    #[doc = "Identifier of the context where exception happened."]
    # [ wasm_bindgen ( method , getter , js_name = executionContextId ) ]
    pub fn execution_context_id(this: &ExceptionDetails) -> Option<runtime::ExecutionContextId>;
    # [ wasm_bindgen ( method , setter , js_name = executionContextId ) ]
    pub fn set_execution_context_id(
        this: &ExceptionDetails,
        value: Option<runtime::ExecutionContextIdRef>,
    );
    #[doc = "Number of milliseconds since epoch."]
    pub type Timestamp;
    #[doc = "Stack entry for runtime errors and assertions."]
    pub type CallFrame;
    #[doc = "JavaScript function name."]
    # [ wasm_bindgen ( method , getter , js_name = functionName ) ]
    pub fn function_name(this: &CallFrame) -> String;
    # [ wasm_bindgen ( method , setter , js_name = functionName ) ]
    pub fn set_function_name(this: &CallFrame, value: &str);
    #[doc = "JavaScript script id."]
    # [ wasm_bindgen ( method , getter , js_name = scriptId ) ]
    pub fn script_id(this: &CallFrame) -> runtime::ScriptId;
    # [ wasm_bindgen ( method , setter , js_name = scriptId ) ]
    pub fn set_script_id(this: &CallFrame, value: runtime::ScriptIdRef);
    #[doc = "JavaScript script name or url."]
    #[wasm_bindgen(method, getter)]
    pub fn url(this: &CallFrame) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_url(this: &CallFrame, value: &str);
    #[doc = "JavaScript script line number (0-based)."]
    # [ wasm_bindgen ( method , getter , js_name = lineNumber ) ]
    pub fn line_number(this: &CallFrame) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = lineNumber ) ]
    pub fn set_line_number(this: &CallFrame, value: f64);
    #[doc = "JavaScript script column number (0-based)."]
    # [ wasm_bindgen ( method , getter , js_name = columnNumber ) ]
    pub fn column_number(this: &CallFrame) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = columnNumber ) ]
    pub fn set_column_number(this: &CallFrame, value: f64);
    #[doc = "Call frames for assertions or error messages."]
    pub type StackTrace;
    #[doc = "String label of this stack trace. For async traces this may be a name of the function that initiated the async call."]
    #[wasm_bindgen(method, getter)]
    pub fn description(this: &StackTrace) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_description(this: &StackTrace, value: Option<&str>);
    #[doc = "JavaScript function name."]
    # [ wasm_bindgen ( method , getter , js_name = callFrames ) ]
    pub fn call_frames(this: &StackTrace) -> Array;
    # [ wasm_bindgen ( method , setter , js_name = callFrames ) ]
    pub fn set_call_frames(this: &StackTrace, value: &Array);
    #[doc = "Asynchronous JavaScript stack trace that preceded this stack, if available."]
    #[wasm_bindgen(method, getter)]
    pub fn parent(this: &StackTrace) -> Option<runtime::StackTrace>;
    #[wasm_bindgen(method, setter)]
    pub fn set_parent(this: &StackTrace, value: Option<&runtime::StackTrace>);
    #[doc = "Asynchronous JavaScript stack trace that preceded this stack, if available."]
    # [ wasm_bindgen ( method , getter , js_name = parentId ) ]
    pub fn parent_id(this: &StackTrace) -> Option<runtime::StackTraceId>;
    # [ wasm_bindgen ( method , setter , js_name = parentId ) ]
    pub fn set_parent_id(this: &StackTrace, value: Option<&runtime::StackTraceId>);
    #[doc = "Unique identifier of current debugger."]
    pub type UniqueDebuggerId;
    #[doc = "If <code>debuggerId</code> is set stack trace comes from another debugger and can be resolved there. This allows to track cross-debugger calls. See <code>Runtime.StackTrace</code> and <code>Debugger.paused</code> for usages."]
    pub type StackTraceId;
    #[wasm_bindgen(method, getter)]
    pub fn id(this: &StackTraceId) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_id(this: &StackTraceId, value: &str);
    # [ wasm_bindgen ( method , getter , js_name = debuggerId ) ]
    pub fn debugger_id(this: &StackTraceId) -> Option<runtime::UniqueDebuggerId>;
    # [ wasm_bindgen ( method , setter , js_name = debuggerId ) ]
    pub fn set_debugger_id(this: &StackTraceId, value: Option<runtime::UniqueDebuggerIdRef>);
    pub type EvaluateParameterType;
    #[doc = "Expression to evaluate."]
    #[wasm_bindgen(method, getter)]
    pub fn expression(this: &EvaluateParameterType) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_expression(this: &EvaluateParameterType, value: &str);
    #[doc = "Symbolic group name that can be used to release multiple objects."]
    # [ wasm_bindgen ( method , getter , js_name = objectGroup ) ]
    pub fn object_group(this: &EvaluateParameterType) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = objectGroup ) ]
    pub fn set_object_group(this: &EvaluateParameterType, value: Option<&str>);
    #[doc = "Determines whether Command Line API should be available during the evaluation."]
    # [ wasm_bindgen ( method , getter , js_name = includeCommandLineAPI ) ]
    pub fn include_command_line_api(this: &EvaluateParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = includeCommandLineAPI ) ]
    pub fn set_include_command_line_api(this: &EvaluateParameterType, value: Option<bool>);
    #[doc = "In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state."]
    #[wasm_bindgen(method, getter)]
    pub fn silent(this: &EvaluateParameterType) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_silent(this: &EvaluateParameterType, value: Option<bool>);
    #[doc = "Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page."]
    # [ wasm_bindgen ( method , getter , js_name = contextId ) ]
    pub fn context_id(this: &EvaluateParameterType) -> Option<runtime::ExecutionContextId>;
    # [ wasm_bindgen ( method , setter , js_name = contextId ) ]
    pub fn set_context_id(
        this: &EvaluateParameterType,
        value: Option<runtime::ExecutionContextIdRef>,
    );
    #[doc = "Whether the result is expected to be a JSON object that should be sent by value."]
    # [ wasm_bindgen ( method , getter , js_name = returnByValue ) ]
    pub fn return_by_value(this: &EvaluateParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = returnByValue ) ]
    pub fn set_return_by_value(this: &EvaluateParameterType, value: Option<bool>);
    #[doc = "Whether preview should be generated for the result."]
    # [ wasm_bindgen ( method , getter , js_name = generatePreview ) ]
    pub fn generate_preview(this: &EvaluateParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = generatePreview ) ]
    pub fn set_generate_preview(this: &EvaluateParameterType, value: Option<bool>);
    #[doc = "Whether execution should be treated as initiated by user in the UI."]
    # [ wasm_bindgen ( method , getter , js_name = userGesture ) ]
    pub fn user_gesture(this: &EvaluateParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = userGesture ) ]
    pub fn set_user_gesture(this: &EvaluateParameterType, value: Option<bool>);
    #[doc = "Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved."]
    # [ wasm_bindgen ( method , getter , js_name = awaitPromise ) ]
    pub fn await_promise(this: &EvaluateParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = awaitPromise ) ]
    pub fn set_await_promise(this: &EvaluateParameterType, value: Option<bool>);
    pub type AwaitPromiseParameterType;
    #[doc = "Identifier of the promise."]
    # [ wasm_bindgen ( method , getter , js_name = promiseObjectId ) ]
    pub fn promise_object_id(this: &AwaitPromiseParameterType) -> runtime::RemoteObjectId;
    # [ wasm_bindgen ( method , setter , js_name = promiseObjectId ) ]
    pub fn set_promise_object_id(
        this: &AwaitPromiseParameterType,
        value: runtime::RemoteObjectIdRef,
    );
    #[doc = "Whether the result is expected to be a JSON object that should be sent by value."]
    # [ wasm_bindgen ( method , getter , js_name = returnByValue ) ]
    pub fn return_by_value(this: &AwaitPromiseParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = returnByValue ) ]
    pub fn set_return_by_value(this: &AwaitPromiseParameterType, value: Option<bool>);
    #[doc = "Whether preview should be generated for the result."]
    # [ wasm_bindgen ( method , getter , js_name = generatePreview ) ]
    pub fn generate_preview(this: &AwaitPromiseParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = generatePreview ) ]
    pub fn set_generate_preview(this: &AwaitPromiseParameterType, value: Option<bool>);
    pub type CallFunctionOnParameterType;
    #[doc = "Declaration of the function to call."]
    # [ wasm_bindgen ( method , getter , js_name = functionDeclaration ) ]
    pub fn function_declaration(this: &CallFunctionOnParameterType) -> String;
    # [ wasm_bindgen ( method , setter , js_name = functionDeclaration ) ]
    pub fn set_function_declaration(this: &CallFunctionOnParameterType, value: &str);
    #[doc = "Identifier of the object to call function on. Either objectId or executionContextId should be specified."]
    # [ wasm_bindgen ( method , getter , js_name = objectId ) ]
    pub fn object_id(this: &CallFunctionOnParameterType) -> Option<runtime::RemoteObjectId>;
    # [ wasm_bindgen ( method , setter , js_name = objectId ) ]
    pub fn set_object_id(
        this: &CallFunctionOnParameterType,
        value: Option<runtime::RemoteObjectIdRef>,
    );
    #[doc = "Call arguments. All call arguments must belong to the same JavaScript world as the target object."]
    #[wasm_bindgen(method, getter)]
    pub fn arguments(this: &CallFunctionOnParameterType) -> Option<Array>;
    #[wasm_bindgen(method, setter)]
    pub fn set_arguments(this: &CallFunctionOnParameterType, value: Option<&Array>);
    #[doc = "In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state."]
    #[wasm_bindgen(method, getter)]
    pub fn silent(this: &CallFunctionOnParameterType) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_silent(this: &CallFunctionOnParameterType, value: Option<bool>);
    #[doc = "Whether the result is expected to be a JSON object which should be sent by value."]
    # [ wasm_bindgen ( method , getter , js_name = returnByValue ) ]
    pub fn return_by_value(this: &CallFunctionOnParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = returnByValue ) ]
    pub fn set_return_by_value(this: &CallFunctionOnParameterType, value: Option<bool>);
    #[doc = "Whether preview should be generated for the result."]
    # [ wasm_bindgen ( method , getter , js_name = generatePreview ) ]
    pub fn generate_preview(this: &CallFunctionOnParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = generatePreview ) ]
    pub fn set_generate_preview(this: &CallFunctionOnParameterType, value: Option<bool>);
    #[doc = "Whether execution should be treated as initiated by user in the UI."]
    # [ wasm_bindgen ( method , getter , js_name = userGesture ) ]
    pub fn user_gesture(this: &CallFunctionOnParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = userGesture ) ]
    pub fn set_user_gesture(this: &CallFunctionOnParameterType, value: Option<bool>);
    #[doc = "Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved."]
    # [ wasm_bindgen ( method , getter , js_name = awaitPromise ) ]
    pub fn await_promise(this: &CallFunctionOnParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = awaitPromise ) ]
    pub fn set_await_promise(this: &CallFunctionOnParameterType, value: Option<bool>);
    #[doc = "Specifies execution context which global object will be used to call function on. Either executionContextId or objectId should be specified."]
    # [ wasm_bindgen ( method , getter , js_name = executionContextId ) ]
    pub fn execution_context_id(
        this: &CallFunctionOnParameterType,
    ) -> Option<runtime::ExecutionContextId>;
    # [ wasm_bindgen ( method , setter , js_name = executionContextId ) ]
    pub fn set_execution_context_id(
        this: &CallFunctionOnParameterType,
        value: Option<runtime::ExecutionContextIdRef>,
    );
    #[doc = "Symbolic group name that can be used to release multiple objects. If objectGroup is not specified and objectId is, objectGroup will be inherited from object."]
    # [ wasm_bindgen ( method , getter , js_name = objectGroup ) ]
    pub fn object_group(this: &CallFunctionOnParameterType) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = objectGroup ) ]
    pub fn set_object_group(this: &CallFunctionOnParameterType, value: Option<&str>);
    pub type GetPropertiesParameterType;
    #[doc = "Identifier of the object to return properties for."]
    # [ wasm_bindgen ( method , getter , js_name = objectId ) ]
    pub fn object_id(this: &GetPropertiesParameterType) -> runtime::RemoteObjectId;
    # [ wasm_bindgen ( method , setter , js_name = objectId ) ]
    pub fn set_object_id(this: &GetPropertiesParameterType, value: runtime::RemoteObjectIdRef);
    #[doc = "If true, returns properties belonging only to the element itself, not to its prototype chain."]
    # [ wasm_bindgen ( method , getter , js_name = ownProperties ) ]
    pub fn own_properties(this: &GetPropertiesParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = ownProperties ) ]
    pub fn set_own_properties(this: &GetPropertiesParameterType, value: Option<bool>);
    #[doc = "If true, returns accessor properties (with getter/setter) only; internal properties are not returned either."]
    # [ wasm_bindgen ( method , getter , js_name = accessorPropertiesOnly ) ]
    pub fn accessor_properties_only(this: &GetPropertiesParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = accessorPropertiesOnly ) ]
    pub fn set_accessor_properties_only(this: &GetPropertiesParameterType, value: Option<bool>);
    #[doc = "Whether preview should be generated for the results."]
    # [ wasm_bindgen ( method , getter , js_name = generatePreview ) ]
    pub fn generate_preview(this: &GetPropertiesParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = generatePreview ) ]
    pub fn set_generate_preview(this: &GetPropertiesParameterType, value: Option<bool>);
    pub type ReleaseObjectParameterType;
    #[doc = "Identifier of the object to release."]
    # [ wasm_bindgen ( method , getter , js_name = objectId ) ]
    pub fn object_id(this: &ReleaseObjectParameterType) -> runtime::RemoteObjectId;
    # [ wasm_bindgen ( method , setter , js_name = objectId ) ]
    pub fn set_object_id(this: &ReleaseObjectParameterType, value: runtime::RemoteObjectIdRef);
    pub type ReleaseObjectGroupParameterType;
    #[doc = "Symbolic object group name."]
    # [ wasm_bindgen ( method , getter , js_name = objectGroup ) ]
    pub fn object_group(this: &ReleaseObjectGroupParameterType) -> String;
    # [ wasm_bindgen ( method , setter , js_name = objectGroup ) ]
    pub fn set_object_group(this: &ReleaseObjectGroupParameterType, value: &str);
    pub type SetCustomObjectFormatterEnabledParameterType;
    #[wasm_bindgen(method, getter)]
    pub fn enabled(this: &SetCustomObjectFormatterEnabledParameterType) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_enabled(this: &SetCustomObjectFormatterEnabledParameterType, value: bool);
    pub type CompileScriptParameterType;
    #[doc = "Expression to compile."]
    #[wasm_bindgen(method, getter)]
    pub fn expression(this: &CompileScriptParameterType) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_expression(this: &CompileScriptParameterType, value: &str);
    #[doc = "Source url to be set for the script."]
    # [ wasm_bindgen ( method , getter , js_name = sourceURL ) ]
    pub fn source_url(this: &CompileScriptParameterType) -> String;
    # [ wasm_bindgen ( method , setter , js_name = sourceURL ) ]
    pub fn set_source_url(this: &CompileScriptParameterType, value: &str);
    #[doc = "Specifies whether the compiled script should be persisted."]
    # [ wasm_bindgen ( method , getter , js_name = persistScript ) ]
    pub fn persist_script(this: &CompileScriptParameterType) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = persistScript ) ]
    pub fn set_persist_script(this: &CompileScriptParameterType, value: bool);
    #[doc = "Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page."]
    # [ wasm_bindgen ( method , getter , js_name = executionContextId ) ]
    pub fn execution_context_id(
        this: &CompileScriptParameterType,
    ) -> Option<runtime::ExecutionContextId>;
    # [ wasm_bindgen ( method , setter , js_name = executionContextId ) ]
    pub fn set_execution_context_id(
        this: &CompileScriptParameterType,
        value: Option<runtime::ExecutionContextIdRef>,
    );
    pub type RunScriptParameterType;
    #[doc = "Id of the script to run."]
    # [ wasm_bindgen ( method , getter , js_name = scriptId ) ]
    pub fn script_id(this: &RunScriptParameterType) -> runtime::ScriptId;
    # [ wasm_bindgen ( method , setter , js_name = scriptId ) ]
    pub fn set_script_id(this: &RunScriptParameterType, value: runtime::ScriptIdRef);
    #[doc = "Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page."]
    # [ wasm_bindgen ( method , getter , js_name = executionContextId ) ]
    pub fn execution_context_id(
        this: &RunScriptParameterType,
    ) -> Option<runtime::ExecutionContextId>;
    # [ wasm_bindgen ( method , setter , js_name = executionContextId ) ]
    pub fn set_execution_context_id(
        this: &RunScriptParameterType,
        value: Option<runtime::ExecutionContextIdRef>,
    );
    #[doc = "Symbolic group name that can be used to release multiple objects."]
    # [ wasm_bindgen ( method , getter , js_name = objectGroup ) ]
    pub fn object_group(this: &RunScriptParameterType) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = objectGroup ) ]
    pub fn set_object_group(this: &RunScriptParameterType, value: Option<&str>);
    #[doc = "In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state."]
    #[wasm_bindgen(method, getter)]
    pub fn silent(this: &RunScriptParameterType) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_silent(this: &RunScriptParameterType, value: Option<bool>);
    #[doc = "Determines whether Command Line API should be available during the evaluation."]
    # [ wasm_bindgen ( method , getter , js_name = includeCommandLineAPI ) ]
    pub fn include_command_line_api(this: &RunScriptParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = includeCommandLineAPI ) ]
    pub fn set_include_command_line_api(this: &RunScriptParameterType, value: Option<bool>);
    #[doc = "Whether the result is expected to be a JSON object which should be sent by value."]
    # [ wasm_bindgen ( method , getter , js_name = returnByValue ) ]
    pub fn return_by_value(this: &RunScriptParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = returnByValue ) ]
    pub fn set_return_by_value(this: &RunScriptParameterType, value: Option<bool>);
    #[doc = "Whether preview should be generated for the result."]
    # [ wasm_bindgen ( method , getter , js_name = generatePreview ) ]
    pub fn generate_preview(this: &RunScriptParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = generatePreview ) ]
    pub fn set_generate_preview(this: &RunScriptParameterType, value: Option<bool>);
    #[doc = "Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved."]
    # [ wasm_bindgen ( method , getter , js_name = awaitPromise ) ]
    pub fn await_promise(this: &RunScriptParameterType) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = awaitPromise ) ]
    pub fn set_await_promise(this: &RunScriptParameterType, value: Option<bool>);
    pub type QueryObjectsParameterType;
    #[doc = "Identifier of the prototype to return objects for."]
    # [ wasm_bindgen ( method , getter , js_name = prototypeObjectId ) ]
    pub fn prototype_object_id(this: &QueryObjectsParameterType) -> runtime::RemoteObjectId;
    # [ wasm_bindgen ( method , setter , js_name = prototypeObjectId ) ]
    pub fn set_prototype_object_id(
        this: &QueryObjectsParameterType,
        value: runtime::RemoteObjectIdRef,
    );
    pub type GlobalLexicalScopeNamesParameterType;
    #[doc = "Specifies in which execution context to lookup global scope variables."]
    # [ wasm_bindgen ( method , getter , js_name = executionContextId ) ]
    pub fn execution_context_id(
        this: &GlobalLexicalScopeNamesParameterType,
    ) -> Option<runtime::ExecutionContextId>;
    # [ wasm_bindgen ( method , setter , js_name = executionContextId ) ]
    pub fn set_execution_context_id(
        this: &GlobalLexicalScopeNamesParameterType,
        value: Option<runtime::ExecutionContextIdRef>,
    );
    pub type EvaluateReturnType;
    #[doc = "Evaluation result."]
    #[wasm_bindgen(method, getter)]
    pub fn result(this: &EvaluateReturnType) -> runtime::RemoteObject;
    #[wasm_bindgen(method, setter)]
    pub fn set_result(this: &EvaluateReturnType, value: &runtime::RemoteObject);
    #[doc = "Exception details."]
    # [ wasm_bindgen ( method , getter , js_name = exceptionDetails ) ]
    pub fn exception_details(this: &EvaluateReturnType) -> Option<runtime::ExceptionDetails>;
    # [ wasm_bindgen ( method , setter , js_name = exceptionDetails ) ]
    pub fn set_exception_details(
        this: &EvaluateReturnType,
        value: Option<&runtime::ExceptionDetails>,
    );
    pub type AwaitPromiseReturnType;
    #[doc = "Promise result. Will contain rejected value if promise was rejected."]
    #[wasm_bindgen(method, getter)]
    pub fn result(this: &AwaitPromiseReturnType) -> runtime::RemoteObject;
    #[wasm_bindgen(method, setter)]
    pub fn set_result(this: &AwaitPromiseReturnType, value: &runtime::RemoteObject);
    #[doc = "Exception details if stack strace is available."]
    # [ wasm_bindgen ( method , getter , js_name = exceptionDetails ) ]
    pub fn exception_details(this: &AwaitPromiseReturnType) -> Option<runtime::ExceptionDetails>;
    # [ wasm_bindgen ( method , setter , js_name = exceptionDetails ) ]
    pub fn set_exception_details(
        this: &AwaitPromiseReturnType,
        value: Option<&runtime::ExceptionDetails>,
    );
    pub type CallFunctionOnReturnType;
    #[doc = "Call result."]
    #[wasm_bindgen(method, getter)]
    pub fn result(this: &CallFunctionOnReturnType) -> runtime::RemoteObject;
    #[wasm_bindgen(method, setter)]
    pub fn set_result(this: &CallFunctionOnReturnType, value: &runtime::RemoteObject);
    #[doc = "Exception details."]
    # [ wasm_bindgen ( method , getter , js_name = exceptionDetails ) ]
    pub fn exception_details(this: &CallFunctionOnReturnType) -> Option<runtime::ExceptionDetails>;
    # [ wasm_bindgen ( method , setter , js_name = exceptionDetails ) ]
    pub fn set_exception_details(
        this: &CallFunctionOnReturnType,
        value: Option<&runtime::ExceptionDetails>,
    );
    pub type GetPropertiesReturnType;
    #[doc = "Object properties."]
    #[wasm_bindgen(method, getter)]
    pub fn result(this: &GetPropertiesReturnType) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_result(this: &GetPropertiesReturnType, value: &Array);
    #[doc = "Internal object properties (only of the element itself)."]
    # [ wasm_bindgen ( method , getter , js_name = internalProperties ) ]
    pub fn internal_properties(this: &GetPropertiesReturnType) -> Option<Array>;
    # [ wasm_bindgen ( method , setter , js_name = internalProperties ) ]
    pub fn set_internal_properties(this: &GetPropertiesReturnType, value: Option<&Array>);
    #[doc = "Exception details."]
    # [ wasm_bindgen ( method , getter , js_name = exceptionDetails ) ]
    pub fn exception_details(this: &GetPropertiesReturnType) -> Option<runtime::ExceptionDetails>;
    # [ wasm_bindgen ( method , setter , js_name = exceptionDetails ) ]
    pub fn set_exception_details(
        this: &GetPropertiesReturnType,
        value: Option<&runtime::ExceptionDetails>,
    );
    pub type CompileScriptReturnType;
    #[doc = "Id of the script."]
    # [ wasm_bindgen ( method , getter , js_name = scriptId ) ]
    pub fn script_id(this: &CompileScriptReturnType) -> Option<runtime::ScriptId>;
    # [ wasm_bindgen ( method , setter , js_name = scriptId ) ]
    pub fn set_script_id(this: &CompileScriptReturnType, value: Option<runtime::ScriptIdRef>);
    #[doc = "Exception details."]
    # [ wasm_bindgen ( method , getter , js_name = exceptionDetails ) ]
    pub fn exception_details(this: &CompileScriptReturnType) -> Option<runtime::ExceptionDetails>;
    # [ wasm_bindgen ( method , setter , js_name = exceptionDetails ) ]
    pub fn set_exception_details(
        this: &CompileScriptReturnType,
        value: Option<&runtime::ExceptionDetails>,
    );
    pub type RunScriptReturnType;
    #[doc = "Run result."]
    #[wasm_bindgen(method, getter)]
    pub fn result(this: &RunScriptReturnType) -> runtime::RemoteObject;
    #[wasm_bindgen(method, setter)]
    pub fn set_result(this: &RunScriptReturnType, value: &runtime::RemoteObject);
    #[doc = "Exception details."]
    # [ wasm_bindgen ( method , getter , js_name = exceptionDetails ) ]
    pub fn exception_details(this: &RunScriptReturnType) -> Option<runtime::ExceptionDetails>;
    # [ wasm_bindgen ( method , setter , js_name = exceptionDetails ) ]
    pub fn set_exception_details(
        this: &RunScriptReturnType,
        value: Option<&runtime::ExceptionDetails>,
    );
    pub type QueryObjectsReturnType;
    #[doc = "Array with objects."]
    #[wasm_bindgen(method, getter)]
    pub fn objects(this: &QueryObjectsReturnType) -> runtime::RemoteObject;
    #[wasm_bindgen(method, setter)]
    pub fn set_objects(this: &QueryObjectsReturnType, value: &runtime::RemoteObject);
    pub type GlobalLexicalScopeNamesReturnType;
    #[wasm_bindgen(method, getter)]
    pub fn names(this: &GlobalLexicalScopeNamesReturnType) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_names(this: &GlobalLexicalScopeNamesReturnType, value: &Array);
    pub type ExecutionContextCreatedEventDataType;
    #[doc = "A newly created execution context."]
    #[wasm_bindgen(method, getter)]
    pub fn context(
        this: &ExecutionContextCreatedEventDataType,
    ) -> runtime::ExecutionContextDescription;
    #[wasm_bindgen(method, setter)]
    pub fn set_context(
        this: &ExecutionContextCreatedEventDataType,
        value: &runtime::ExecutionContextDescription,
    );
    pub type ExecutionContextDestroyedEventDataType;
    #[doc = "Id of the destroyed context"]
    # [ wasm_bindgen ( method , getter , js_name = executionContextId ) ]
    pub fn execution_context_id(
        this: &ExecutionContextDestroyedEventDataType,
    ) -> runtime::ExecutionContextId;
    # [ wasm_bindgen ( method , setter , js_name = executionContextId ) ]
    pub fn set_execution_context_id(
        this: &ExecutionContextDestroyedEventDataType,
        value: runtime::ExecutionContextIdRef,
    );
    pub type ExceptionThrownEventDataType;
    #[doc = "Timestamp of the exception."]
    #[wasm_bindgen(method, getter)]
    pub fn timestamp(this: &ExceptionThrownEventDataType) -> runtime::Timestamp;
    #[wasm_bindgen(method, setter)]
    pub fn set_timestamp(this: &ExceptionThrownEventDataType, value: runtime::TimestampRef);
    # [ wasm_bindgen ( method , getter , js_name = exceptionDetails ) ]
    pub fn exception_details(this: &ExceptionThrownEventDataType) -> runtime::ExceptionDetails;
    # [ wasm_bindgen ( method , setter , js_name = exceptionDetails ) ]
    pub fn set_exception_details(
        this: &ExceptionThrownEventDataType,
        value: &runtime::ExceptionDetails,
    );
    pub type ExceptionRevokedEventDataType;
    #[doc = "Reason describing why exception was revoked."]
    #[wasm_bindgen(method, getter)]
    pub fn reason(this: &ExceptionRevokedEventDataType) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_reason(this: &ExceptionRevokedEventDataType, value: &str);
    #[doc = "The id of revoked exception, as reported in <code>exceptionThrown</code>."]
    # [ wasm_bindgen ( method , getter , js_name = exceptionId ) ]
    pub fn exception_id(this: &ExceptionRevokedEventDataType) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = exceptionId ) ]
    pub fn set_exception_id(this: &ExceptionRevokedEventDataType, value: f64);
    pub type ConsoleAPICalledEventDataType;
    #[doc = "Type of the call."]
    # [ wasm_bindgen ( method , getter , js_name = type ) ]
    pub fn type_(this: &ConsoleAPICalledEventDataType) -> String;
    # [ wasm_bindgen ( method , setter , js_name = type ) ]
    pub fn set_type_(this: &ConsoleAPICalledEventDataType, value: &str);
    #[doc = "Call arguments."]
    #[wasm_bindgen(method, getter)]
    pub fn args(this: &ConsoleAPICalledEventDataType) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_args(this: &ConsoleAPICalledEventDataType, value: &Array);
    #[doc = "Identifier of the context where the call was made."]
    # [ wasm_bindgen ( method , getter , js_name = executionContextId ) ]
    pub fn execution_context_id(
        this: &ConsoleAPICalledEventDataType,
    ) -> runtime::ExecutionContextId;
    # [ wasm_bindgen ( method , setter , js_name = executionContextId ) ]
    pub fn set_execution_context_id(
        this: &ConsoleAPICalledEventDataType,
        value: runtime::ExecutionContextIdRef,
    );
    #[doc = "Call timestamp."]
    #[wasm_bindgen(method, getter)]
    pub fn timestamp(this: &ConsoleAPICalledEventDataType) -> runtime::Timestamp;
    #[wasm_bindgen(method, setter)]
    pub fn set_timestamp(this: &ConsoleAPICalledEventDataType, value: runtime::TimestampRef);
    #[doc = "Stack trace captured when the call was made."]
    # [ wasm_bindgen ( method , getter , js_name = stackTrace ) ]
    pub fn stack_trace(this: &ConsoleAPICalledEventDataType) -> Option<runtime::StackTrace>;
    # [ wasm_bindgen ( method , setter , js_name = stackTrace ) ]
    pub fn set_stack_trace(
        this: &ConsoleAPICalledEventDataType,
        value: Option<&runtime::StackTrace>,
    );
    #[doc = "Console context descriptor for calls on non-default console context (not console.*): 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call on named context."]
    #[wasm_bindgen(method, getter)]
    pub fn context(this: &ConsoleAPICalledEventDataType) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_context(this: &ConsoleAPICalledEventDataType, value: Option<&str>);
    pub type InspectRequestedEventDataType;
    #[wasm_bindgen(method, getter)]
    pub fn object(this: &InspectRequestedEventDataType) -> runtime::RemoteObject;
    #[wasm_bindgen(method, setter)]
    pub fn set_object(this: &InspectRequestedEventDataType, value: &runtime::RemoteObject);
    #[wasm_bindgen(method, getter)]
    pub fn hints(this: &InspectRequestedEventDataType) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_hints(this: &InspectRequestedEventDataType, value: &JsValue);
}
