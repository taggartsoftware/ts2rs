// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl Agent {
    pub fn new() -> Agent {
        JsCast::unchecked_into(Object::new())
    }
}
impl AgentOptions {
    pub fn new() -> AgentOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ClientRequest {
    pub fn new() -> ClientRequest {
        JsCast::unchecked_into(Object::new())
    }
}
impl ClientRequestArgs {
    pub fn new() -> ClientRequestArgs {
        JsCast::unchecked_into(Object::new())
    }
}
impl IncomingHttpHeaders {
    pub fn new() -> IncomingHttpHeaders {
        JsCast::unchecked_into(Object::new())
    }
}
impl IncomingMessage {
    pub fn new() -> IncomingMessage {
        JsCast::unchecked_into(Object::new())
    }
}
impl InformationEvent {
    pub fn new() -> InformationEvent {
        JsCast::unchecked_into(Object::new())
    }
}
impl OutgoingHttpHeaders {
    pub fn new() -> OutgoingHttpHeaders {
        JsCast::unchecked_into(Object::new())
    }
}
impl OutgoingMessage {
    pub fn new() -> OutgoingMessage {
        JsCast::unchecked_into(Object::new())
    }
}
impl RequestOptions {
    pub fn new() -> RequestOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Server {
    pub fn new() -> Server {
        JsCast::unchecked_into(Object::new())
    }
}
impl ServerOptions {
    pub fn new() -> ServerOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ServerResponse {
    pub fn new() -> ServerResponse {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<node_js::EventEmitter> for ClientRequest {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<ClientRequest> for node_js::EventEmitter {
    fn from(child: ClientRequest) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for ClientRequest {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<ClientRequest> for node_js::WritableStream {
    fn from(child: ClientRequest) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<OutgoingMessage> for ClientRequest {
    fn as_ref(&self) -> &OutgoingMessage {
        JsCast::unchecked_ref(self)
    }
}
impl From<ClientRequest> for OutgoingMessage {
    fn from(child: ClientRequest) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for IncomingMessage {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<IncomingMessage> for node_js::EventEmitter {
    fn from(child: IncomingMessage) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::ReadableStream> for IncomingMessage {
    fn as_ref(&self) -> &node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<IncomingMessage> for node_js::ReadableStream {
    fn from(child: IncomingMessage) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for OutgoingMessage {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<OutgoingMessage> for node_js::EventEmitter {
    fn from(child: OutgoingMessage) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for OutgoingMessage {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<OutgoingMessage> for node_js::WritableStream {
    fn from(child: OutgoingMessage) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ClientRequestArgs> for RequestOptions {
    fn as_ref(&self) -> &ClientRequestArgs {
        JsCast::unchecked_ref(self)
    }
}
impl From<RequestOptions> for ClientRequestArgs {
    fn from(child: RequestOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::net::NetServer> for Server {
    fn as_ref(&self) -> &crate::net::NetServer {
        JsCast::unchecked_ref(self)
    }
}
impl From<Server> for crate::net::NetServer {
    fn from(child: Server) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::EventEmitter> for ServerResponse {
    fn as_ref(&self) -> &node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<ServerResponse> for node_js::EventEmitter {
    fn from(child: ServerResponse) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<node_js::WritableStream> for ServerResponse {
    fn as_ref(&self) -> &node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<ServerResponse> for node_js::WritableStream {
    fn from(child: ServerResponse) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<OutgoingMessage> for ServerResponse {
    fn as_ref(&self) -> &OutgoingMessage {
        JsCast::unchecked_ref(self)
    }
}
impl From<ServerResponse> for OutgoingMessage {
    fn from(child: ServerResponse) -> Self {
        JsCast::unchecked_into(child)
    }
}
