// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "fs")]
extern "C" {
    #[doc = "Valid types for path values in \"fs\"."]
    pub type PathLike;
    pub type StatsBase;
    # [ wasm_bindgen ( method , js_name = isFile ) ]
    pub fn is_file(this: &StatsBase) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isFile ) ]
    pub fn set_is_file(this: &StatsBase, value: &Function);
    # [ wasm_bindgen ( method , js_name = isDirectory ) ]
    pub fn is_directory(this: &StatsBase) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isDirectory ) ]
    pub fn set_is_directory(this: &StatsBase, value: &Function);
    # [ wasm_bindgen ( method , js_name = isBlockDevice ) ]
    pub fn is_block_device(this: &StatsBase) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isBlockDevice ) ]
    pub fn set_is_block_device(this: &StatsBase, value: &Function);
    # [ wasm_bindgen ( method , js_name = isCharacterDevice ) ]
    pub fn is_character_device(this: &StatsBase) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isCharacterDevice ) ]
    pub fn set_is_character_device(this: &StatsBase, value: &Function);
    # [ wasm_bindgen ( method , js_name = isSymbolicLink ) ]
    pub fn is_symbolic_link(this: &StatsBase) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isSymbolicLink ) ]
    pub fn set_is_symbolic_link(this: &StatsBase, value: &Function);
    # [ wasm_bindgen ( method , js_name = isFIFO ) ]
    pub fn is_fifo(this: &StatsBase) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isFIFO ) ]
    pub fn set_is_fifo(this: &StatsBase, value: &Function);
    # [ wasm_bindgen ( method , js_name = isSocket ) ]
    pub fn is_socket(this: &StatsBase) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isSocket ) ]
    pub fn set_is_socket(this: &StatsBase, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn dev(this: &StatsBase) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_dev(this: &StatsBase, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn ino(this: &StatsBase) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_ino(this: &StatsBase, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn mode(this: &StatsBase) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_mode(this: &StatsBase, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn nlink(this: &StatsBase) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_nlink(this: &StatsBase, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn uid(this: &StatsBase) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_uid(this: &StatsBase, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn gid(this: &StatsBase) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_gid(this: &StatsBase, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn rdev(this: &StatsBase) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_rdev(this: &StatsBase, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn size(this: &StatsBase) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_size(this: &StatsBase, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn blksize(this: &StatsBase) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_blksize(this: &StatsBase, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn blocks(this: &StatsBase) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_blocks(this: &StatsBase, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = atimeMs ) ]
    pub fn atime_ms(this: &StatsBase) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = atimeMs ) ]
    pub fn set_atime_ms(this: &StatsBase, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = mtimeMs ) ]
    pub fn mtime_ms(this: &StatsBase) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = mtimeMs ) ]
    pub fn set_mtime_ms(this: &StatsBase, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = ctimeMs ) ]
    pub fn ctime_ms(this: &StatsBase) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = ctimeMs ) ]
    pub fn set_ctime_ms(this: &StatsBase, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = birthtimeMs ) ]
    pub fn birthtime_ms(this: &StatsBase) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = birthtimeMs ) ]
    pub fn set_birthtime_ms(this: &StatsBase, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn atime(this: &StatsBase) -> Date;
    #[wasm_bindgen(method, setter)]
    pub fn set_atime(this: &StatsBase, value: &Date);
    #[wasm_bindgen(method, getter)]
    pub fn mtime(this: &StatsBase) -> Date;
    #[wasm_bindgen(method, setter)]
    pub fn set_mtime(this: &StatsBase, value: &Date);
    #[wasm_bindgen(method, getter)]
    pub fn ctime(this: &StatsBase) -> Date;
    #[wasm_bindgen(method, setter)]
    pub fn set_ctime(this: &StatsBase, value: &Date);
    #[wasm_bindgen(method, getter)]
    pub fn birthtime(this: &StatsBase) -> Date;
    #[wasm_bindgen(method, setter)]
    pub fn set_birthtime(this: &StatsBase, value: &Date);
    pub type Stats;
    pub type Dirent;
    # [ wasm_bindgen ( method , js_name = isFile ) ]
    pub fn is_file(this: &Dirent) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isFile ) ]
    pub fn set_is_file(this: &Dirent, value: &Function);
    # [ wasm_bindgen ( method , js_name = isDirectory ) ]
    pub fn is_directory(this: &Dirent) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isDirectory ) ]
    pub fn set_is_directory(this: &Dirent, value: &Function);
    # [ wasm_bindgen ( method , js_name = isBlockDevice ) ]
    pub fn is_block_device(this: &Dirent) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isBlockDevice ) ]
    pub fn set_is_block_device(this: &Dirent, value: &Function);
    # [ wasm_bindgen ( method , js_name = isCharacterDevice ) ]
    pub fn is_character_device(this: &Dirent) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isCharacterDevice ) ]
    pub fn set_is_character_device(this: &Dirent, value: &Function);
    # [ wasm_bindgen ( method , js_name = isSymbolicLink ) ]
    pub fn is_symbolic_link(this: &Dirent) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isSymbolicLink ) ]
    pub fn set_is_symbolic_link(this: &Dirent, value: &Function);
    # [ wasm_bindgen ( method , js_name = isFIFO ) ]
    pub fn is_fifo(this: &Dirent) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isFIFO ) ]
    pub fn set_is_fifo(this: &Dirent, value: &Function);
    # [ wasm_bindgen ( method , js_name = isSocket ) ]
    pub fn is_socket(this: &Dirent) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isSocket ) ]
    pub fn set_is_socket(this: &Dirent, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn name(this: &Dirent) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_name(this: &Dirent, value: &str);
    #[doc = "A class representing a directory stream."]
    pub type Dir;
    #[wasm_bindgen(method, getter)]
    pub fn path(this: &Dir) -> String;
    #[wasm_bindgen(method)]
    pub fn computed_property_name(this: &Dir) -> AsyncIterableIterator;
    #[wasm_bindgen(method, setter)]
    pub fn set_computed_property_name(this: &Dir, value: &Function);
    #[wasm_bindgen(method)]
    pub fn close(this: &Dir) -> Promise;
    #[wasm_bindgen(method, setter)]
    pub fn set_close(this: &Dir, value: &Function);
    # [ wasm_bindgen ( method , js_name = close ) ]
    pub fn close_2(this: &Dir, cb: &NoParamCallback);
    # [ wasm_bindgen ( method , setter , js_name = close ) ]
    pub fn set_close_2(this: &Dir, value: &Function);
    # [ wasm_bindgen ( method , js_name = closeSync ) ]
    pub fn close_sync(this: &Dir);
    # [ wasm_bindgen ( method , setter , js_name = closeSync ) ]
    pub fn set_close_sync(this: &Dir, value: &Function);
    #[wasm_bindgen(method)]
    pub fn read(this: &Dir) -> Promise;
    #[wasm_bindgen(method, setter)]
    pub fn set_read(this: &Dir, value: &Function);
    # [ wasm_bindgen ( method , js_name = read ) ]
    pub fn read_2(this: &Dir, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = read ) ]
    pub fn set_read_2(this: &Dir, value: &Function);
    # [ wasm_bindgen ( method , js_name = readSync ) ]
    pub fn read_sync(this: &Dir) -> Dirent;
    # [ wasm_bindgen ( method , setter , js_name = readSync ) ]
    pub fn set_read_sync(this: &Dir, value: &Function);
    pub type FSWatcher;
    #[wasm_bindgen(method)]
    pub fn close(this: &FSWatcher);
    #[wasm_bindgen(method, setter)]
    pub fn set_close(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &FSWatcher, event: &str, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &FSWatcher, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &FSWatcher, event: &str, listener: &JsValue) -> FSWatcher;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &FSWatcher, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &FSWatcher, event: &str, listener: &JsValue) -> FSWatcher;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &FSWatcher, event: &str, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(this: &FSWatcher, event: &JsValue, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &FSWatcher, event: &str, listener: &JsValue) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &FSWatcher,
        event: &JsValue,
        listener: &JsValue,
    ) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &FSWatcher,
        event: &JsValue,
        listener: &JsValue,
    ) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &FSWatcher, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(
        this: &FSWatcher,
        event: &JsValue,
        listener: &JsValue,
    ) -> FSWatcher;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &FSWatcher, value: &Function);
    pub type ReadStream;
    #[wasm_bindgen(method)]
    pub fn close(this: &ReadStream);
    #[wasm_bindgen(method, setter)]
    pub fn set_close(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = bytesRead ) ]
    pub fn bytes_read(this: &ReadStream) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = bytesRead ) ]
    pub fn set_bytes_read(this: &ReadStream, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn path(this: &ReadStream) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_path(this: &ReadStream, value: &JsValue);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &ReadStream, event: &str, listener: &JsValue) -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(this: &ReadStream, event: &JsValue, listener: &JsValue) -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &ReadStream, event: &JsValue, listener: &JsValue) -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &ReadStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &ReadStream, event: &str, listener: &JsValue) -> ReadStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &ReadStream, event: &JsValue, listener: &JsValue) -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &ReadStream, event: &JsValue, listener: &JsValue) -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &ReadStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &ReadStream, event: &str, listener: &JsValue) -> ReadStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &ReadStream, event: &JsValue, listener: &JsValue) -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &ReadStream, event: &JsValue, listener: &JsValue) -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &ReadStream, event: &str, listener: &JsValue) -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(this: &ReadStream, event: &JsValue, listener: &JsValue)
    -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(this: &ReadStream, event: &JsValue, listener: &JsValue)
    -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &ReadStream, event: &str, listener: &JsValue) -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &ReadStream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &ReadStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &ReadStream,
        event: &JsValue,
        listener: &JsValue,
    ) -> ReadStream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &ReadStream, value: &Function);
    pub type WriteStream;
    #[wasm_bindgen(method)]
    pub fn close(this: &WriteStream);
    #[wasm_bindgen(method, setter)]
    pub fn set_close(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = bytesWritten ) ]
    pub fn bytes_written(this: &WriteStream) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = bytesWritten ) ]
    pub fn set_bytes_written(this: &WriteStream, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn path(this: &WriteStream) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_path(this: &WriteStream, value: &JsValue);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &WriteStream, event: &str, listener: &JsValue) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(this: &WriteStream, event: &JsValue, listener: &JsValue) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &WriteStream, event: &JsValue, listener: &JsValue) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &WriteStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &WriteStream, event: &str, listener: &JsValue) -> WriteStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &WriteStream, event: &JsValue, listener: &JsValue) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &WriteStream, event: &JsValue, listener: &JsValue) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &WriteStream, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &WriteStream, event: &str, listener: &JsValue) -> WriteStream;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &WriteStream, event: &JsValue, listener: &JsValue) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &WriteStream, event: &JsValue, listener: &JsValue) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &WriteStream, event: &str, listener: &JsValue) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &WriteStream,
        event: &JsValue,
        listener: &JsValue,
    ) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(
        this: &WriteStream,
        event: &JsValue,
        listener: &JsValue,
    ) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &WriteStream,
        event: &str,
        listener: &JsValue,
    ) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &WriteStream,
        event: &JsValue,
        listener: &JsValue,
    ) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &WriteStream, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &WriteStream,
        event: &JsValue,
        listener: &JsValue,
    ) -> WriteStream;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &WriteStream, value: &Function);
    #[doc = "Asynchronous rename(2) - Change the name or location of a file or directory."]
    #[wasm_bindgen()]
    pub fn rename(old_path: &PathLike, new_path: &PathLike, callback: &NoParamCallback);
    #[doc = "Synchronous rename(2) - Change the name or location of a file or directory."]
    # [ wasm_bindgen ( js_name = renameSync ) ]
    pub fn rename_sync(old_path: &PathLike, new_path: &PathLike);
    #[doc = "Asynchronous truncate(2) - Truncate a file to a specified length."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous truncate(2) - Truncate a file to a specified length."]
    #[wasm_bindgen()]
    pub fn truncate(path: &PathLike, len: &JsValue, callback: &NoParamCallback);
    #[doc = "Asynchronous truncate(2) - Truncate a file to a specified length."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous truncate(2) - Truncate a file to a specified length."]
    # [ wasm_bindgen ( js_name = truncate ) ]
    pub fn truncate_2(path: &PathLike, callback: &NoParamCallback);
    #[doc = "Synchronous truncate(2) - Truncate a file to a specified length."]
    # [ wasm_bindgen ( js_name = truncateSync ) ]
    pub fn truncate_sync(path: &PathLike, len: &JsValue);
    #[doc = "Asynchronous ftruncate(2) - Truncate a file to a specified length."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous ftruncate(2) - Truncate a file to a specified length."]
    #[wasm_bindgen()]
    pub fn ftruncate(fd: f64, len: &JsValue, callback: &NoParamCallback);
    #[doc = "Asynchronous ftruncate(2) - Truncate a file to a specified length."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous ftruncate(2) - Truncate a file to a specified length."]
    # [ wasm_bindgen ( js_name = ftruncate ) ]
    pub fn ftruncate_2(fd: f64, callback: &NoParamCallback);
    #[doc = "Synchronous ftruncate(2) - Truncate a file to a specified length."]
    # [ wasm_bindgen ( js_name = ftruncateSync ) ]
    pub fn ftruncate_sync(fd: f64, len: &JsValue);
    #[doc = "Asynchronous chown(2) - Change ownership of a file."]
    #[wasm_bindgen()]
    pub fn chown(path: &PathLike, uid: f64, gid: f64, callback: &NoParamCallback);
    #[doc = "Synchronous chown(2) - Change ownership of a file."]
    # [ wasm_bindgen ( js_name = chownSync ) ]
    pub fn chown_sync(path: &PathLike, uid: f64, gid: f64);
    #[doc = "Asynchronous fchown(2) - Change ownership of a file."]
    #[wasm_bindgen()]
    pub fn fchown(fd: f64, uid: f64, gid: f64, callback: &NoParamCallback);
    #[doc = "Synchronous fchown(2) - Change ownership of a file."]
    # [ wasm_bindgen ( js_name = fchownSync ) ]
    pub fn fchown_sync(fd: f64, uid: f64, gid: f64);
    #[doc = "Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links."]
    #[wasm_bindgen()]
    pub fn lchown(path: &PathLike, uid: f64, gid: f64, callback: &NoParamCallback);
    #[doc = "Synchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links."]
    # [ wasm_bindgen ( js_name = lchownSync ) ]
    pub fn lchown_sync(path: &PathLike, uid: f64, gid: f64);
    #[doc = "Asynchronous chmod(2) - Change permissions of a file."]
    #[wasm_bindgen()]
    pub fn chmod(path: &PathLike, mode: &JsValue, callback: &NoParamCallback);
    #[doc = "Synchronous chmod(2) - Change permissions of a file."]
    # [ wasm_bindgen ( js_name = chmodSync ) ]
    pub fn chmod_sync(path: &PathLike, mode: &JsValue);
    #[doc = "Asynchronous fchmod(2) - Change permissions of a file."]
    #[wasm_bindgen()]
    pub fn fchmod(fd: f64, mode: &JsValue, callback: &NoParamCallback);
    #[doc = "Synchronous fchmod(2) - Change permissions of a file."]
    # [ wasm_bindgen ( js_name = fchmodSync ) ]
    pub fn fchmod_sync(fd: f64, mode: &JsValue);
    #[doc = "Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links."]
    #[wasm_bindgen()]
    pub fn lchmod(path: &PathLike, mode: &JsValue, callback: &NoParamCallback);
    #[doc = "Synchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links."]
    # [ wasm_bindgen ( js_name = lchmodSync ) ]
    pub fn lchmod_sync(path: &PathLike, mode: &JsValue);
    #[doc = "Asynchronous stat(2) - Get file status."]
    #[wasm_bindgen()]
    pub fn stat(path: &PathLike, callback: &JsValue);
    #[doc = "Synchronous stat(2) - Get file status."]
    # [ wasm_bindgen ( js_name = statSync ) ]
    pub fn stat_sync(path: &PathLike) -> Stats;
    #[doc = "Asynchronous fstat(2) - Get file status."]
    #[wasm_bindgen()]
    pub fn fstat(fd: f64, callback: &JsValue);
    #[doc = "Synchronous fstat(2) - Get file status."]
    # [ wasm_bindgen ( js_name = fstatSync ) ]
    pub fn fstat_sync(fd: f64) -> Stats;
    #[doc = "Asynchronous lstat(2) - Get file status. Does not dereference symbolic links."]
    #[wasm_bindgen()]
    pub fn lstat(path: &PathLike, callback: &JsValue);
    #[doc = "Synchronous lstat(2) - Get file status. Does not dereference symbolic links."]
    # [ wasm_bindgen ( js_name = lstatSync ) ]
    pub fn lstat_sync(path: &PathLike) -> Stats;
    #[doc = "Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file."]
    #[wasm_bindgen()]
    pub fn link(existing_path: &PathLike, new_path: &PathLike, callback: &NoParamCallback);
    #[doc = "Synchronous link(2) - Create a new link (also known as a hard link) to an existing file."]
    # [ wasm_bindgen ( js_name = linkSync ) ]
    pub fn link_sync(existing_path: &PathLike, new_path: &PathLike);
    #[doc = "Asynchronous symlink(2) - Create a new symbolic link to an existing file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous symlink(2) - Create a new symbolic link to an existing file."]
    #[wasm_bindgen()]
    pub fn symlink(target: &PathLike, path: &PathLike, type_: &JsValue, callback: &NoParamCallback);
    #[doc = "Asynchronous symlink(2) - Create a new symbolic link to an existing file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous symlink(2) - Create a new symbolic link to an existing file."]
    # [ wasm_bindgen ( js_name = symlink ) ]
    pub fn symlink_2(target: &PathLike, path: &PathLike, callback: &NoParamCallback);
    #[doc = "Synchronous symlink(2) - Create a new symbolic link to an existing file."]
    # [ wasm_bindgen ( js_name = symlinkSync ) ]
    pub fn symlink_sync(target: &PathLike, path: &PathLike, type_: &JsValue);
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[wasm_bindgen()]
    pub fn readlink(path: &PathLike, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    # [ wasm_bindgen ( js_name = readlink ) ]
    pub fn readlink_2(path: &PathLike, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    # [ wasm_bindgen ( js_name = readlink ) ]
    pub fn readlink_3(path: &PathLike, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readlink(2) - read value of a symbolic link."]
    # [ wasm_bindgen ( js_name = readlink ) ]
    pub fn readlink_4(path: &PathLike, callback: &JsValue);
    #[doc = "Synchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readlink(2) - read value of a symbolic link."]
    # [ wasm_bindgen ( js_name = readlinkSync ) ]
    pub fn readlink_sync(path: &PathLike, options: &JsValue) -> String;
    #[doc = "Synchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readlink(2) - read value of a symbolic link."]
    # [ wasm_bindgen ( js_name = readlinkSync ) ]
    pub fn readlink_sync_2(path: &PathLike, options: &JsValue) -> Buffer;
    #[doc = "Synchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readlink(2) - read value of a symbolic link."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readlink(2) - read value of a symbolic link."]
    # [ wasm_bindgen ( js_name = readlinkSync ) ]
    pub fn readlink_sync_3(path: &PathLike, options: &JsValue) -> JsValue;
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[wasm_bindgen()]
    pub fn realpath(path: &PathLike, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    # [ wasm_bindgen ( js_name = realpath ) ]
    pub fn realpath_2(path: &PathLike, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    # [ wasm_bindgen ( js_name = realpath ) ]
    pub fn realpath_3(path: &PathLike, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous realpath(3) - return the canonicalized absolute pathname."]
    # [ wasm_bindgen ( js_name = realpath ) ]
    pub fn realpath_4(path: &PathLike, callback: &JsValue);
    #[doc = "Synchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous realpath(3) - return the canonicalized absolute pathname."]
    # [ wasm_bindgen ( js_name = realpathSync ) ]
    pub fn realpath_sync(path: &PathLike, options: &JsValue) -> String;
    #[doc = "Synchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous realpath(3) - return the canonicalized absolute pathname."]
    # [ wasm_bindgen ( js_name = realpathSync ) ]
    pub fn realpath_sync_2(path: &PathLike, options: &JsValue) -> Buffer;
    #[doc = "Synchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous realpath(3) - return the canonicalized absolute pathname."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous realpath(3) - return the canonicalized absolute pathname."]
    # [ wasm_bindgen ( js_name = realpathSync ) ]
    pub fn realpath_sync_3(path: &PathLike, options: &JsValue) -> JsValue;
    #[doc = "Asynchronous unlink(2) - delete a name and possibly the file it refers to."]
    #[wasm_bindgen()]
    pub fn unlink(path: &PathLike, callback: &NoParamCallback);
    #[doc = "Synchronous unlink(2) - delete a name and possibly the file it refers to."]
    # [ wasm_bindgen ( js_name = unlinkSync ) ]
    pub fn unlink_sync(path: &PathLike);
    pub type RmDirOptions;
    #[doc = "If `true`, perform a recursive directory removal. In"]
    #[doc = "recursive mode, errors are not reported if `path` does not exist, and"]
    #[doc = "operations are retried on failure."]
    #[wasm_bindgen(method, getter)]
    pub fn recursive(this: &RmDirOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_recursive(this: &RmDirOptions, value: Option<bool>);
    pub type RmDirAsyncOptions;
    #[doc = "If an `EMFILE` error is encountered, Node.js will"]
    #[doc = "retry the operation with a linear backoff of 1ms longer on each try until the"]
    #[doc = "timeout duration passes this limit. This option is ignored if the `recursive`"]
    #[doc = "option is not `true`."]
    # [ wasm_bindgen ( method , getter , js_name = emfileWait ) ]
    pub fn emfile_wait(this: &RmDirAsyncOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = emfileWait ) ]
    pub fn set_emfile_wait(this: &RmDirAsyncOptions, value: Option<f64>);
    #[doc = "If an `EBUSY`, `ENOTEMPTY`, or `EPERM` error is"]
    #[doc = "encountered, Node.js will retry the operation with a linear backoff wait of"]
    #[doc = "100ms longer on each try. This option represents the number of retries. This"]
    #[doc = "option is ignored if the `recursive` option is not `true`."]
    # [ wasm_bindgen ( method , getter , js_name = maxBusyTries ) ]
    pub fn max_busy_tries(this: &RmDirAsyncOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxBusyTries ) ]
    pub fn set_max_busy_tries(this: &RmDirAsyncOptions, value: Option<f64>);
    #[doc = "Asynchronous rmdir(2) - delete a directory."]
    #[wasm_bindgen()]
    pub fn rmdir(path: &PathLike, callback: &NoParamCallback);
    #[doc = "Asynchronous rmdir(2) - delete a directory."]
    # [ wasm_bindgen ( js_name = rmdir ) ]
    pub fn rmdir_2(path: &PathLike, options: &RmDirAsyncOptions, callback: &NoParamCallback);
    #[doc = "Synchronous rmdir(2) - delete a directory."]
    # [ wasm_bindgen ( js_name = rmdirSync ) ]
    pub fn rmdir_sync(path: &PathLike, options: Option<&RmDirOptions>);
    pub type MakeDirectoryOptions;
    #[doc = "Indicates whether parent folders should be created."]
    #[wasm_bindgen(method, getter)]
    pub fn recursive(this: &MakeDirectoryOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_recursive(this: &MakeDirectoryOptions, value: Option<bool>);
    #[doc = "A file mode. If a string is passed, it is parsed as an octal integer. If not specified"]
    #[wasm_bindgen(method, getter)]
    pub fn mode(this: &MakeDirectoryOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_mode(this: &MakeDirectoryOptions, value: &JsValue);
    #[doc = "Asynchronous mkdir(2) - create a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous mkdir(2) - create a directory with a mode of `0o777`."]
    #[wasm_bindgen()]
    pub fn mkdir(path: &PathLike, options: &JsValue, callback: &NoParamCallback);
    #[doc = "Asynchronous mkdir(2) - create a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous mkdir(2) - create a directory with a mode of `0o777`."]
    # [ wasm_bindgen ( js_name = mkdir ) ]
    pub fn mkdir_2(path: &PathLike, callback: &NoParamCallback);
    #[doc = "Synchronous mkdir(2) - create a directory."]
    # [ wasm_bindgen ( js_name = mkdirSync ) ]
    pub fn mkdir_sync(path: &PathLike, options: &JsValue);
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[wasm_bindgen()]
    pub fn mkdtemp(prefix: &str, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    # [ wasm_bindgen ( js_name = mkdtemp ) ]
    pub fn mkdtemp_2(prefix: &str, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    # [ wasm_bindgen ( js_name = mkdtemp ) ]
    pub fn mkdtemp_3(prefix: &str, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    # [ wasm_bindgen ( js_name = mkdtemp ) ]
    pub fn mkdtemp_4(prefix: &str, callback: &JsValue);
    #[doc = "Synchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    # [ wasm_bindgen ( js_name = mkdtempSync ) ]
    pub fn mkdtemp_sync(prefix: &str, options: &JsValue) -> String;
    #[doc = "Synchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    # [ wasm_bindgen ( js_name = mkdtempSync ) ]
    pub fn mkdtemp_sync_2(prefix: &str, options: &JsValue) -> Buffer;
    #[doc = "Synchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously creates a unique temporary directory."]
    #[doc = "Generates six random characters to be appended behind a required prefix to create a unique temporary directory."]
    # [ wasm_bindgen ( js_name = mkdtempSync ) ]
    pub fn mkdtemp_sync_3(prefix: &str, options: &JsValue) -> JsValue;
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[wasm_bindgen()]
    pub fn readdir(path: &PathLike, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    # [ wasm_bindgen ( js_name = readdir ) ]
    pub fn readdir_2(path: &PathLike, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    # [ wasm_bindgen ( js_name = readdir ) ]
    pub fn readdir_3(path: &PathLike, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    # [ wasm_bindgen ( js_name = readdir ) ]
    pub fn readdir_4(path: &PathLike, callback: &JsValue);
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous readdir(3) - read a directory."]
    # [ wasm_bindgen ( js_name = readdir ) ]
    pub fn readdir_5(path: &PathLike, options: &JsValue, callback: &JsValue);
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    # [ wasm_bindgen ( js_name = readdirSync ) ]
    pub fn readdir_sync(path: &PathLike, options: &JsValue) -> Array;
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    # [ wasm_bindgen ( js_name = readdirSync ) ]
    pub fn readdir_sync_2(path: &PathLike, options: &JsValue) -> Array;
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    # [ wasm_bindgen ( js_name = readdirSync ) ]
    pub fn readdir_sync_3(path: &PathLike, options: &JsValue) -> JsValue;
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronous readdir(3) - read a directory."]
    # [ wasm_bindgen ( js_name = readdirSync ) ]
    pub fn readdir_sync_4(path: &PathLike, options: &JsValue) -> Array;
    #[doc = "Asynchronous close(2) - close a file descriptor."]
    #[wasm_bindgen()]
    pub fn close(fd: f64, callback: &NoParamCallback);
    #[doc = "Synchronous close(2) - close a file descriptor."]
    # [ wasm_bindgen ( js_name = closeSync ) ]
    pub fn close_sync(fd: f64);
    #[doc = "Asynchronous open(2) - open and possibly create a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`."]
    #[wasm_bindgen()]
    pub fn open(path: &PathLike, flags: &JsValue, mode: &JsValue, callback: &JsValue);
    #[doc = "Asynchronous open(2) - open and possibly create a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`."]
    # [ wasm_bindgen ( js_name = open ) ]
    pub fn open_2(path: &PathLike, flags: &JsValue, callback: &JsValue);
    #[doc = "Synchronous open(2) - open and possibly create a file, returning a file descriptor.."]
    # [ wasm_bindgen ( js_name = openSync ) ]
    pub fn open_sync(path: &PathLike, flags: &JsValue, mode: &JsValue) -> f64;
    #[doc = "Asynchronously change file timestamps of the file referenced by the supplied path."]
    #[wasm_bindgen()]
    pub fn utimes(path: &PathLike, atime: &JsValue, mtime: &JsValue, callback: &NoParamCallback);
    #[doc = "Synchronously change file timestamps of the file referenced by the supplied path."]
    # [ wasm_bindgen ( js_name = utimesSync ) ]
    pub fn utimes_sync(path: &PathLike, atime: &JsValue, mtime: &JsValue);
    #[doc = "Asynchronously change file timestamps of the file referenced by the supplied file descriptor."]
    #[wasm_bindgen()]
    pub fn futimes(fd: f64, atime: &JsValue, mtime: &JsValue, callback: &NoParamCallback);
    #[doc = "Synchronously change file timestamps of the file referenced by the supplied file descriptor."]
    # [ wasm_bindgen ( js_name = futimesSync ) ]
    pub fn futimes_sync(fd: f64, atime: &JsValue, mtime: &JsValue);
    #[doc = "Asynchronous fsync(2) - synchronize a file's in-core state with the underlying storage device."]
    #[wasm_bindgen()]
    pub fn fsync(fd: f64, callback: &NoParamCallback);
    #[doc = "Synchronous fsync(2) - synchronize a file's in-core state with the underlying storage device."]
    # [ wasm_bindgen ( js_name = fsyncSync ) ]
    pub fn fsync_sync(fd: f64);
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[wasm_bindgen()]
    pub fn write(
        fd: f64,
        buffer: &JsValue,
        offset: &JsValue,
        length: &JsValue,
        position: &JsValue,
        callback: &JsValue,
    );
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    # [ wasm_bindgen ( js_name = write ) ]
    pub fn write_2(
        fd: f64,
        buffer: &JsValue,
        offset: &JsValue,
        length: &JsValue,
        callback: &JsValue,
    );
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    # [ wasm_bindgen ( js_name = write ) ]
    pub fn write_3(fd: f64, buffer: &JsValue, offset: &JsValue, callback: &JsValue);
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    # [ wasm_bindgen ( js_name = write ) ]
    pub fn write_4(fd: f64, buffer: &JsValue, callback: &JsValue);
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    # [ wasm_bindgen ( js_name = write ) ]
    pub fn write_5(
        fd: f64,
        string: &JsValue,
        position: &JsValue,
        encoding: &JsValue,
        callback: &JsValue,
    );
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    # [ wasm_bindgen ( js_name = write ) ]
    pub fn write_6(fd: f64, string: &JsValue, position: &JsValue, callback: &JsValue);
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `buffer` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes `string` to the file referenced by the supplied file descriptor."]
    # [ wasm_bindgen ( js_name = write ) ]
    pub fn write_7(fd: f64, string: &JsValue, callback: &JsValue);
    #[doc = "Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously writes `string` to the file referenced by the supplied file descriptor, returning the number of bytes written."]
    # [ wasm_bindgen ( js_name = writeSync ) ]
    pub fn write_sync(
        fd: f64,
        buffer: &node_js::ArrayBufferView,
        offset: &JsValue,
        length: &JsValue,
        position: &JsValue,
    ) -> f64;
    #[doc = "Synchronously writes `buffer` to the file referenced by the supplied file descriptor, returning the number of bytes written."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously writes `string` to the file referenced by the supplied file descriptor, returning the number of bytes written."]
    # [ wasm_bindgen ( js_name = writeSync ) ]
    pub fn write_sync_2(fd: f64, string: &JsValue, position: &JsValue, encoding: &JsValue) -> f64;
    #[doc = "Asynchronously reads data from the file referenced by the supplied file descriptor."]
    #[wasm_bindgen()]
    pub fn read(
        fd: f64,
        buffer: &JsValue,
        offset: f64,
        length: f64,
        position: &JsValue,
        callback: &JsValue,
    );
    #[doc = "Synchronously reads data from the file referenced by the supplied file descriptor, returning the number of bytes read."]
    # [ wasm_bindgen ( js_name = readSync ) ]
    pub fn read_sync(
        fd: f64,
        buffer: &node_js::ArrayBufferView,
        offset: f64,
        length: f64,
        position: &JsValue,
    ) -> f64;
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    # [ wasm_bindgen ( js_name = readFile ) ]
    pub fn read_file(path: &JsValue, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    # [ wasm_bindgen ( js_name = readFile ) ]
    pub fn read_file_2(path: &JsValue, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    # [ wasm_bindgen ( js_name = readFile ) ]
    pub fn read_file_3(path: &JsValue, options: &JsValue, callback: &JsValue);
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously reads the entire contents of a file."]
    # [ wasm_bindgen ( js_name = readFile ) ]
    pub fn read_file_4(path: &JsValue, callback: &JsValue);
    #[doc = "Synchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously reads the entire contents of a file."]
    # [ wasm_bindgen ( js_name = readFileSync ) ]
    pub fn read_file_sync(path: &JsValue, options: &JsValue) -> Buffer;
    #[doc = "Synchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously reads the entire contents of a file."]
    # [ wasm_bindgen ( js_name = readFileSync ) ]
    pub fn read_file_sync_2(path: &JsValue, options: &JsValue) -> String;
    #[doc = "Synchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously reads the entire contents of a file."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Synchronously reads the entire contents of a file."]
    # [ wasm_bindgen ( js_name = readFileSync ) ]
    pub fn read_file_sync_3(path: &JsValue, options: &JsValue) -> JsValue;
    pub type WriteFileOptions;
    #[doc = "Asynchronously writes data to a file, replacing the file if it already exists."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes data to a file, replacing the file if it already exists."]
    # [ wasm_bindgen ( js_name = writeFile ) ]
    pub fn write_file(
        path: &JsValue,
        data: &JsValue,
        options: &WriteFileOptions,
        callback: &NoParamCallback,
    );
    #[doc = "Asynchronously writes data to a file, replacing the file if it already exists."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously writes data to a file, replacing the file if it already exists."]
    # [ wasm_bindgen ( js_name = writeFile ) ]
    pub fn write_file_2(path: &JsValue, data: &JsValue, callback: &NoParamCallback);
    #[doc = "Synchronously writes data to a file, replacing the file if it already exists."]
    # [ wasm_bindgen ( js_name = writeFileSync ) ]
    pub fn write_file_sync(path: &JsValue, data: &JsValue, options: Option<&WriteFileOptions>);
    #[doc = "Asynchronously append data to a file, creating the file if it does not exist."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously append data to a file, creating the file if it does not exist."]
    # [ wasm_bindgen ( js_name = appendFile ) ]
    pub fn append_file(
        file: &JsValue,
        data: &JsValue,
        options: &WriteFileOptions,
        callback: &NoParamCallback,
    );
    #[doc = "Asynchronously append data to a file, creating the file if it does not exist."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously append data to a file, creating the file if it does not exist."]
    # [ wasm_bindgen ( js_name = appendFile ) ]
    pub fn append_file_2(file: &JsValue, data: &JsValue, callback: &NoParamCallback);
    #[doc = "Synchronously append data to a file, creating the file if it does not exist."]
    # [ wasm_bindgen ( js_name = appendFileSync ) ]
    pub fn append_file_sync(file: &JsValue, data: &JsValue, options: Option<&WriteFileOptions>);
    #[doc = "Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed."]
    # [ wasm_bindgen ( js_name = watchFile ) ]
    pub fn watch_file(filename: &PathLike, options: &JsValue, listener: &JsValue);
    #[doc = "Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed."]
    # [ wasm_bindgen ( js_name = watchFile ) ]
    pub fn watch_file_2(filename: &PathLike, listener: &JsValue);
    #[doc = "Stop watching for changes on `filename`."]
    # [ wasm_bindgen ( js_name = unwatchFile ) ]
    pub fn unwatch_file(filename: &PathLike, listener: &JsValue);
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[wasm_bindgen()]
    pub fn watch(filename: &PathLike, options: &JsValue, listener: &JsValue) -> FSWatcher;
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    # [ wasm_bindgen ( js_name = watch ) ]
    pub fn watch_2(filename: &PathLike, options: &JsValue, listener: &JsValue) -> FSWatcher;
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    # [ wasm_bindgen ( js_name = watch ) ]
    pub fn watch_3(filename: &PathLike, options: &JsValue, listener: &JsValue) -> FSWatcher;
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`."]
    # [ wasm_bindgen ( js_name = watch ) ]
    pub fn watch_4(filename: &PathLike, listener: &JsValue) -> FSWatcher;
    #[doc = "Asynchronously tests whether or not the given path exists by checking with the file system."]
    #[wasm_bindgen()]
    pub fn exists(path: &PathLike, callback: &JsValue);
    #[doc = "Synchronously tests whether or not the given path exists by checking with the file system."]
    # [ wasm_bindgen ( js_name = existsSync ) ]
    pub fn exists_sync(path: &PathLike) -> bool;
    #[doc = "Asynchronously tests a user's permissions for the file specified by path."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously tests a user's permissions for the file specified by path."]
    #[wasm_bindgen()]
    pub fn access(path: &PathLike, mode: Option<f64>, callback: &NoParamCallback);
    #[doc = "Asynchronously tests a user's permissions for the file specified by path."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously tests a user's permissions for the file specified by path."]
    # [ wasm_bindgen ( js_name = access ) ]
    pub fn access_2(path: &PathLike, callback: &NoParamCallback);
    #[doc = "Synchronously tests a user's permissions for the file specified by path."]
    # [ wasm_bindgen ( js_name = accessSync ) ]
    pub fn access_sync(path: &PathLike, mode: Option<f64>);
    #[doc = "Returns a new `ReadStream` object."]
    # [ wasm_bindgen ( js_name = createReadStream ) ]
    pub fn create_read_stream(path: &PathLike, options: &JsValue) -> ReadStream;
    #[doc = "Returns a new `WriteStream` object."]
    # [ wasm_bindgen ( js_name = createWriteStream ) ]
    pub fn create_write_stream(path: &PathLike, options: &JsValue) -> WriteStream;
    #[doc = "Asynchronous fdatasync(2) - synchronize a file's in-core state with storage device."]
    #[wasm_bindgen()]
    pub fn fdatasync(fd: f64, callback: &NoParamCallback);
    #[doc = "Synchronous fdatasync(2) - synchronize a file's in-core state with storage device."]
    # [ wasm_bindgen ( js_name = fdatasyncSync ) ]
    pub fn fdatasync_sync(fd: f64);
    #[doc = "Asynchronously copies src to dest. By default, dest is overwritten if it already exists."]
    #[doc = "No arguments other than a possible exception are given to the callback function."]
    #[doc = "Node.js makes no guarantees about the atomicity of the copy operation."]
    #[doc = "If an error occurs after the destination file has been opened for writing, Node.js will attempt"]
    #[doc = "to remove the destination."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously copies src to dest. By default, dest is overwritten if it already exists."]
    #[doc = "No arguments other than a possible exception are given to the callback function."]
    #[doc = "Node.js makes no guarantees about the atomicity of the copy operation."]
    #[doc = "If an error occurs after the destination file has been opened for writing, Node.js will attempt"]
    #[doc = "to remove the destination."]
    # [ wasm_bindgen ( js_name = copyFile ) ]
    pub fn copy_file(src: &PathLike, dest: &PathLike, callback: &NoParamCallback);
    #[doc = "Asynchronously copies src to dest. By default, dest is overwritten if it already exists."]
    #[doc = "No arguments other than a possible exception are given to the callback function."]
    #[doc = "Node.js makes no guarantees about the atomicity of the copy operation."]
    #[doc = "If an error occurs after the destination file has been opened for writing, Node.js will attempt"]
    #[doc = "to remove the destination."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Asynchronously copies src to dest. By default, dest is overwritten if it already exists."]
    #[doc = "No arguments other than a possible exception are given to the callback function."]
    #[doc = "Node.js makes no guarantees about the atomicity of the copy operation."]
    #[doc = "If an error occurs after the destination file has been opened for writing, Node.js will attempt"]
    #[doc = "to remove the destination."]
    # [ wasm_bindgen ( js_name = copyFile ) ]
    pub fn copy_file_2(src: &PathLike, dest: &PathLike, flags: f64, callback: &NoParamCallback);
    #[doc = "Synchronously copies src to dest. By default, dest is overwritten if it already exists."]
    #[doc = "Node.js makes no guarantees about the atomicity of the copy operation."]
    #[doc = "If an error occurs after the destination file has been opened for writing, Node.js will attempt"]
    #[doc = "to remove the destination."]
    # [ wasm_bindgen ( js_name = copyFileSync ) ]
    pub fn copy_file_sync(src: &PathLike, dest: &PathLike, flags: Option<f64>);
    #[doc = "Write an array of ArrayBufferViews to the file specified by fd using writev()."]
    #[doc = "position is the offset from the beginning of the file where this data should be written."]
    #[doc = "It is unsafe to use fs.writev() multiple times on the same file without waiting for the callback. For this scenario, use fs.createWriteStream()."]
    #[doc = "On Linux, positional writes don't work when the file is opened in append mode."]
    #[doc = "The kernel ignores the position argument and always appends the data to the end of the file."]
    #[wasm_bindgen()]
    pub fn writev(fd: f64, buffers: &Array, cb: &JsValue);
    #[doc = "Write an array of ArrayBufferViews to the file specified by fd using writev()."]
    #[doc = "position is the offset from the beginning of the file where this data should be written."]
    #[doc = "It is unsafe to use fs.writev() multiple times on the same file without waiting for the callback. For this scenario, use fs.createWriteStream()."]
    #[doc = "On Linux, positional writes don't work when the file is opened in append mode."]
    #[doc = "The kernel ignores the position argument and always appends the data to the end of the file."]
    # [ wasm_bindgen ( js_name = writev ) ]
    pub fn writev_2(fd: f64, buffers: &Array, position: f64, cb: &JsValue);
    pub type WriteVResult;
    # [ wasm_bindgen ( method , getter , js_name = bytesWritten ) ]
    pub fn bytes_written(this: &WriteVResult) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = bytesWritten ) ]
    pub fn set_bytes_written(this: &WriteVResult, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn buffers(this: &WriteVResult) -> Array;
    #[wasm_bindgen(method, setter)]
    pub fn set_buffers(this: &WriteVResult, value: &Array);
    #[doc = "See `writev`."]
    # [ wasm_bindgen ( js_name = writevSync ) ]
    pub fn writev_sync(fd: f64, buffers: &Array, position: Option<f64>) -> f64;
    pub type OpenDirOptions;
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &OpenDirOptions) -> Option<BufferEncoding>;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &OpenDirOptions, value: Option<&BufferEncoding>);
    # [ wasm_bindgen ( js_name = opendirSync ) ]
    pub fn opendir_sync(path: &str, options: Option<&OpenDirOptions>) -> Dir;
    #[wasm_bindgen()]
    pub fn opendir(path: &str, cb: &JsValue);
    # [ wasm_bindgen ( js_name = opendir ) ]
    pub fn opendir_2(path: &str, options: &OpenDirOptions, cb: &JsValue);
    pub type BigIntStats;
    pub type BigIntOptions;
    #[wasm_bindgen(method, getter)]
    pub fn bigint(this: &BigIntOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_bigint(this: &BigIntOptions, value: &JsValue);
    pub type StatOptions;
    #[wasm_bindgen(method, getter)]
    pub fn bigint(this: &StatOptions) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_bigint(this: &StatOptions, value: bool);
    #[doc = "Asynchronous stat(2) - Get file status."]
    # [ wasm_bindgen ( js_name = stat ) ]
    pub fn stat_2(path: &PathLike, options: &BigIntOptions, callback: &JsValue);
    #[doc = "Asynchronous stat(2) - Get file status."]
    # [ wasm_bindgen ( js_name = stat ) ]
    pub fn stat_3(path: &PathLike, options: &StatOptions, callback: &JsValue);
    #[doc = "Synchronous stat(2) - Get file status."]
    # [ wasm_bindgen ( js_name = statSync ) ]
    pub fn stat_sync_2(path: &PathLike, options: &BigIntOptions) -> BigIntStats;
    #[doc = "Synchronous stat(2) - Get file status."]
    # [ wasm_bindgen ( js_name = statSync ) ]
    pub fn stat_sync_3(path: &PathLike, options: &StatOptions) -> JsValue;
}
