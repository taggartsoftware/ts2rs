// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "querystring")]
extern "C" {
    pub type StringifyOptions;
    # [ wasm_bindgen ( method , getter , js_name = encodeURIComponent ) ]
    pub fn encode_uri_component(this: &StringifyOptions) -> Option<Function>;
    # [ wasm_bindgen ( method , setter , js_name = encodeURIComponent ) ]
    pub fn set_encode_uri_component(this: &StringifyOptions, value: Option<&Function>);
    pub type ParseOptions;
    # [ wasm_bindgen ( method , getter , js_name = maxKeys ) ]
    pub fn max_keys(this: &ParseOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = maxKeys ) ]
    pub fn set_max_keys(this: &ParseOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = decodeURIComponent ) ]
    pub fn decode_uri_component(this: &ParseOptions) -> Option<Function>;
    # [ wasm_bindgen ( method , setter , js_name = decodeURIComponent ) ]
    pub fn set_decode_uri_component(this: &ParseOptions, value: Option<&Function>);
    pub type ParsedUrlQuery;
    pub type ParsedUrlQueryInput;
    #[wasm_bindgen()]
    pub fn stringify(
        obj: Option<&crate::querystring::ParsedUrlQueryInput>,
        sep: Option<&str>,
        eq: Option<&str>,
        options: Option<&crate::querystring::StringifyOptions>,
    ) -> String;
    #[wasm_bindgen()]
    pub fn parse(
        str: &str,
        sep: Option<&str>,
        eq: Option<&str>,
        options: Option<&crate::querystring::ParseOptions>,
    ) -> crate::querystring::ParsedUrlQuery;
    #[wasm_bindgen(js_name = "encode")]
    #[doc = "The querystring.encode() function is an alias for querystring.stringify()."]
    pub static ENCODE: String;
    #[wasm_bindgen(js_name = "decode")]
    #[doc = "The querystring.decode() function is an alias for querystring.parse()."]
    pub static DECODE: String;
    #[wasm_bindgen()]
    pub fn escape(str: &str) -> String;
    #[wasm_bindgen()]
    pub fn unescape(str: &str) -> String;
}
