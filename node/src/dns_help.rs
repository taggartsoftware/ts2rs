// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl AnyARecord {
    pub fn new() -> AnyARecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl AnyAaaaRecord {
    pub fn new() -> AnyAaaaRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl AnyCnameRecord {
    pub fn new() -> AnyCnameRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl AnyMxRecord {
    pub fn new() -> AnyMxRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl AnyNaptrRecord {
    pub fn new() -> AnyNaptrRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl AnyNsRecord {
    pub fn new() -> AnyNsRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl AnyPtrRecord {
    pub fn new() -> AnyPtrRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl AnySoaRecord {
    pub fn new() -> AnySoaRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl AnySrvRecord {
    pub fn new() -> AnySrvRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl AnyTxtRecord {
    pub fn new() -> AnyTxtRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl LookupAddress {
    pub fn new() -> LookupAddress {
        JsCast::unchecked_into(Object::new())
    }
}
impl LookupAllOptions {
    pub fn new() -> LookupAllOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl LookupOneOptions {
    pub fn new() -> LookupOneOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl LookupOptions {
    pub fn new() -> LookupOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl MxRecord {
    pub fn new() -> MxRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl NaptrRecord {
    pub fn new() -> NaptrRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl RecordWithTtl {
    pub fn new() -> RecordWithTtl {
        JsCast::unchecked_into(Object::new())
    }
}
impl ResolveOptions {
    pub fn new() -> ResolveOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ResolveWithTtlOptions {
    pub fn new() -> ResolveWithTtlOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Resolver {
    pub fn new() -> Resolver {
        JsCast::unchecked_into(Object::new())
    }
}
impl SoaRecord {
    pub fn new() -> SoaRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl SrvRecord {
    pub fn new() -> SrvRecord {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<crate::dns::RecordWithTtl> for crate::dns::AnyARecord {
    fn as_ref(&self) -> &crate::dns::RecordWithTtl {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::dns::AnyARecord> for crate::dns::RecordWithTtl {
    fn from(child: crate::dns::AnyARecord) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::dns::RecordWithTtl> for crate::dns::AnyAaaaRecord {
    fn as_ref(&self) -> &crate::dns::RecordWithTtl {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::dns::AnyAaaaRecord> for crate::dns::RecordWithTtl {
    fn from(child: crate::dns::AnyAaaaRecord) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::dns::MxRecord> for crate::dns::AnyMxRecord {
    fn as_ref(&self) -> &crate::dns::MxRecord {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::dns::AnyMxRecord> for crate::dns::MxRecord {
    fn from(child: crate::dns::AnyMxRecord) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::dns::NaptrRecord> for crate::dns::AnyNaptrRecord {
    fn as_ref(&self) -> &crate::dns::NaptrRecord {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::dns::AnyNaptrRecord> for crate::dns::NaptrRecord {
    fn from(child: crate::dns::AnyNaptrRecord) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::dns::SoaRecord> for crate::dns::AnySoaRecord {
    fn as_ref(&self) -> &crate::dns::SoaRecord {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::dns::AnySoaRecord> for crate::dns::SoaRecord {
    fn from(child: crate::dns::AnySoaRecord) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::dns::SrvRecord> for crate::dns::AnySrvRecord {
    fn as_ref(&self) -> &crate::dns::SrvRecord {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::dns::AnySrvRecord> for crate::dns::SrvRecord {
    fn from(child: crate::dns::AnySrvRecord) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::dns::LookupOptions> for crate::dns::LookupAllOptions {
    fn as_ref(&self) -> &crate::dns::LookupOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::dns::LookupAllOptions> for crate::dns::LookupOptions {
    fn from(child: crate::dns::LookupAllOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::dns::LookupOptions> for crate::dns::LookupOneOptions {
    fn as_ref(&self) -> &crate::dns::LookupOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::dns::LookupOneOptions> for crate::dns::LookupOptions {
    fn from(child: crate::dns::LookupOneOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::dns::ResolveOptions> for crate::dns::ResolveWithTtlOptions {
    fn as_ref(&self) -> &crate::dns::ResolveOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::dns::ResolveWithTtlOptions> for crate::dns::ResolveOptions {
    fn from(child: crate::dns::ResolveWithTtlOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
