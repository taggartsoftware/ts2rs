// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "util")]
extern "C" {
    # [ wasm_bindgen ( js_name = isAnyArrayBuffer ) ]
    pub fn is_any_array_buffer(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isArgumentsObject ) ]
    pub fn is_arguments_object(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isArrayBuffer ) ]
    pub fn is_array_buffer(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isArrayBufferView ) ]
    pub fn is_array_buffer_view(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isAsyncFunction ) ]
    pub fn is_async_function(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isBooleanObject ) ]
    pub fn is_boolean_object(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isBoxedPrimitive ) ]
    pub fn is_boxed_primitive(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isDataView ) ]
    pub fn is_data_view(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isDate ) ]
    pub fn is_date(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isExternal ) ]
    pub fn is_external(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isFloat32Array ) ]
    pub fn is_float32_array(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isFloat64Array ) ]
    pub fn is_float64_array(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isGeneratorFunction ) ]
    pub fn is_generator_function(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isGeneratorObject ) ]
    pub fn is_generator_object(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isInt8Array ) ]
    pub fn is_int8_array(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isInt16Array ) ]
    pub fn is_int16_array(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isInt32Array ) ]
    pub fn is_int32_array(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isMap ) ]
    pub fn is_map(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isMapIterator ) ]
    pub fn is_map_iterator(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isModuleNamespaceObject ) ]
    pub fn is_module_namespace_object(value: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isNativeError ) ]
    pub fn is_native_error(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isNumberObject ) ]
    pub fn is_number_object(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isPromise ) ]
    pub fn is_promise(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isProxy ) ]
    pub fn is_proxy(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isRegExp ) ]
    pub fn is_reg_exp(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isSet ) ]
    pub fn is_set(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isSetIterator ) ]
    pub fn is_set_iterator(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isSharedArrayBuffer ) ]
    pub fn is_shared_array_buffer(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isStringObject ) ]
    pub fn is_string_object(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isSymbolObject ) ]
    pub fn is_symbol_object(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isTypedArray ) ]
    pub fn is_typed_array(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isUint8Array ) ]
    pub fn is_uint8_array(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isUint8ClampedArray ) ]
    pub fn is_uint8_clamped_array(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isUint16Array ) ]
    pub fn is_uint16_array(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isUint32Array ) ]
    pub fn is_uint32_array(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isWeakMap ) ]
    pub fn is_weak_map(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isWeakSet ) ]
    pub fn is_weak_set(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isWebAssemblyCompiledModule ) ]
    pub fn is_web_assembly_compiled_module(object: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isBigInt64Array ) ]
    pub fn is_big_int64_array(value: &JsValue) -> bool;
    # [ wasm_bindgen ( js_name = isBigUint64Array ) ]
    pub fn is_big_uint64_array(value: &JsValue) -> bool;
}
