// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "worker_threads")]
extern "C" {
    #[wasm_bindgen(js_name = "isMainThread")]
    pub static IS_MAIN_THREAD: bool;
    #[wasm_bindgen(js_name = "parentPort")]
    pub static PARENT_PORT: JsValue;
    pub static SHARE_ENV: JsValue;
    #[wasm_bindgen(js_name = "threadId")]
    pub static THREAD_ID: f64;
    #[wasm_bindgen(js_name = "workerData")]
    pub static WORKER_DATA: JsValue;
    pub type MessageChannel;
    #[wasm_bindgen(method, getter)]
    pub fn port1(this: &MessageChannel) -> MessagePort;
    #[wasm_bindgen(method, getter)]
    pub fn port2(this: &MessageChannel) -> MessagePort;
    pub type MessagePort;
    #[wasm_bindgen(method)]
    pub fn close(this: &MessagePort);
    #[wasm_bindgen(method, setter)]
    pub fn set_close(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = postMessage ) ]
    pub fn post_message(this: &MessagePort, value: &JsValue, transfer_list: Option<&Array>);
    # [ wasm_bindgen ( method , setter , js_name = postMessage ) ]
    pub fn set_post_message(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = ref ) ]
    pub fn ref_(this: &MessagePort);
    # [ wasm_bindgen ( method , setter , js_name = ref ) ]
    pub fn set_ref_(this: &MessagePort, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unref(this: &MessagePort);
    #[wasm_bindgen(method, setter)]
    pub fn set_unref(this: &MessagePort, value: &Function);
    #[wasm_bindgen(method)]
    pub fn start(this: &MessagePort);
    #[wasm_bindgen(method, setter)]
    pub fn set_start(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &MessagePort, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &MessagePort, event: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &MessagePort, event: &JsValue, value: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &MessagePort, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &MessagePort, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &MessagePort, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &MessagePort, event: &JsValue, listener: &JsValue)
    -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(
        this: &MessagePort,
        event: &JsValue,
        listener: &JsValue,
    ) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(
        this: &MessagePort,
        event: &JsValue,
        listener: &JsValue,
    ) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(
        this: &MessagePort,
        event: &JsValue,
        listener: &JsValue,
    ) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(
        this: &MessagePort,
        event: &JsValue,
        listener: &JsValue,
    ) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(
        this: &MessagePort,
        event: &JsValue,
        listener: &JsValue,
    ) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener_2(
        this: &MessagePort,
        event: &JsValue,
        listener: &JsValue,
    ) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener_2(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener_3(
        this: &MessagePort,
        event: &JsValue,
        listener: &JsValue,
    ) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener_3(this: &MessagePort, value: &Function);
    #[wasm_bindgen(method)]
    pub fn off(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    #[wasm_bindgen(method, setter)]
    pub fn set_off(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = off ) ]
    pub fn off_2(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = off ) ]
    pub fn set_off_2(this: &MessagePort, value: &Function);
    # [ wasm_bindgen ( method , js_name = off ) ]
    pub fn off_3(this: &MessagePort, event: &JsValue, listener: &JsValue) -> MessagePort;
    # [ wasm_bindgen ( method , setter , js_name = off ) ]
    pub fn set_off_3(this: &MessagePort, value: &Function);
    pub type WorkerOptions;
    #[wasm_bindgen(method, getter)]
    pub fn eval(this: &WorkerOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_eval(this: &WorkerOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn env(this: &WorkerOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_env(this: &WorkerOptions, value: &JsValue);
    # [ wasm_bindgen ( method , getter , js_name = workerData ) ]
    pub fn worker_data(this: &WorkerOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = workerData ) ]
    pub fn set_worker_data(this: &WorkerOptions, value: &JsValue);
    #[wasm_bindgen(method, getter)]
    pub fn stdin(this: &WorkerOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdin(this: &WorkerOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn stdout(this: &WorkerOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stdout(this: &WorkerOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn stderr(this: &WorkerOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_stderr(this: &WorkerOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = execArgv ) ]
    pub fn exec_argv(this: &WorkerOptions) -> Option<Array>;
    # [ wasm_bindgen ( method , setter , js_name = execArgv ) ]
    pub fn set_exec_argv(this: &WorkerOptions, value: Option<&Array>);
    pub type Worker;
    #[wasm_bindgen(method, getter)]
    pub fn stdin(this: &Worker) -> JsValue;
    #[wasm_bindgen(method, getter)]
    pub fn stdout(this: &Worker) -> crate::stream::Readable;
    #[wasm_bindgen(method, getter)]
    pub fn stderr(this: &Worker) -> crate::stream::Readable;
    # [ wasm_bindgen ( method , getter , js_name = threadId ) ]
    pub fn thread_id(this: &Worker) -> f64;
    #[wasm_bindgen(constructor)]
    pub fn new_worker(filename: &str, options: Option<&WorkerOptions>) -> Worker;
    # [ wasm_bindgen ( method , js_name = postMessage ) ]
    pub fn post_message(this: &Worker, value: &JsValue, transfer_list: Option<&Array>);
    # [ wasm_bindgen ( method , setter , js_name = postMessage ) ]
    pub fn set_post_message(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = ref ) ]
    pub fn ref_(this: &Worker);
    # [ wasm_bindgen ( method , setter , js_name = ref ) ]
    pub fn set_ref_(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unref(this: &Worker);
    #[wasm_bindgen(method, setter)]
    pub fn set_unref(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn terminate(this: &Worker) -> Promise;
    #[wasm_bindgen(method, setter)]
    pub fn set_terminate(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Worker, event: &JsValue, err: &Error) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &Worker, event: &JsValue, exit_code: f64) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &Worker, event: &JsValue, value: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(this: &Worker, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(this: &Worker, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener_2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener_2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener_3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener_3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener_4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener_4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener_5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener_5(this: &Worker, value: &Function);
    #[wasm_bindgen(method)]
    pub fn off(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    #[wasm_bindgen(method, setter)]
    pub fn set_off(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = off ) ]
    pub fn off_2(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = off ) ]
    pub fn set_off_2(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = off ) ]
    pub fn off_3(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = off ) ]
    pub fn set_off_3(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = off ) ]
    pub fn off_4(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = off ) ]
    pub fn set_off_4(this: &Worker, value: &Function);
    # [ wasm_bindgen ( method , js_name = off ) ]
    pub fn off_5(this: &Worker, event: &JsValue, listener: &JsValue) -> Worker;
    # [ wasm_bindgen ( method , setter , js_name = off ) ]
    pub fn set_off_5(this: &Worker, value: &Function);
    #[doc = "Transfer a `MessagePort` to a different `vm` Context. The original `port`"]
    #[doc = "object will be rendered unusable, and the returned `MessagePort` instance will"]
    #[doc = "take its place."]
    #[doc = ""]
    #[doc = "The returned `MessagePort` will be an object in the target context, and will"]
    #[doc = "inherit from its global `Object` class. Objects passed to the"]
    #[doc = "`port.onmessage()` listener will also be created in the target context"]
    #[doc = "and inherit from its global `Object` class."]
    #[doc = ""]
    #[doc = "However, the created `MessagePort` will no longer inherit from"]
    #[doc = "`EventEmitter`, and only `port.onmessage()` can be used to receive"]
    #[doc = "events using it."]
    # [ wasm_bindgen ( js_name = moveMessagePortToContext ) ]
    pub fn move_message_port_to_context(
        port: &MessagePort,
        context: &crate::vm::Context,
    ) -> MessagePort;
    #[doc = "Receive a single message from a given `MessagePort`. If no message is available,"]
    #[doc = "`undefined` is returned, otherwise an object with a single `message` property"]
    #[doc = "that contains the message payload, corresponding to the oldest message in the"]
    #[doc = "`MessagePort`’s queue."]
    # [ wasm_bindgen ( js_name = receiveMessageOnPort ) ]
    pub fn receive_message_on_port(port: &MessagePort) -> JsValue;
}
