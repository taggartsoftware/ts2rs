// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "repl")]
extern "C" {
    pub type ReplOptions;
    #[doc = "The input prompt to display."]
    #[doc = "Default: `\"> \"`"]
    #[wasm_bindgen(method, getter)]
    pub fn prompt(this: &ReplOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_prompt(this: &ReplOptions, value: Option<&str>);
    #[doc = "The `Readable` stream from which REPL input will be read."]
    #[doc = "Default: `process.stdin`"]
    #[wasm_bindgen(method, getter)]
    pub fn input(this: &ReplOptions) -> Option<node_js::ReadableStream>;
    #[wasm_bindgen(method, setter)]
    pub fn set_input(this: &ReplOptions, value: Option<&node_js::ReadableStream>);
    #[doc = "The `Writable` stream to which REPL output will be written."]
    #[doc = "Default: `process.stdout`"]
    #[wasm_bindgen(method, getter)]
    pub fn output(this: &ReplOptions) -> Option<node_js::WritableStream>;
    #[wasm_bindgen(method, setter)]
    pub fn set_output(this: &ReplOptions, value: Option<&node_js::WritableStream>);
    #[doc = "If `true`, specifies that the output should be treated as a TTY terminal, and have"]
    #[doc = "ANSI/VT100 escape codes written to it."]
    #[doc = "Default: checking the value of the `isTTY` property on the output stream upon"]
    #[doc = "instantiation."]
    #[wasm_bindgen(method, getter)]
    pub fn terminal(this: &ReplOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_terminal(this: &ReplOptions, value: Option<bool>);
    #[doc = "The function to be used when evaluating each given line of input."]
    #[doc = "Default: an async wrapper for the JavaScript `eval()` function. An `eval` function can"]
    #[doc = "error with `repl.Recoverable` to indicate the input was incomplete and prompt for"]
    #[doc = "additional lines."]
    #[wasm_bindgen(method, getter)]
    pub fn eval(this: &ReplOptions) -> Option<REPLEval>;
    #[wasm_bindgen(method, setter)]
    pub fn set_eval(this: &ReplOptions, value: Option<&REPLEval>);
    #[doc = "If `true`, specifies that the default `writer` function should include ANSI color"]
    #[doc = "styling to REPL output. If a custom `writer` function is provided then this has no"]
    #[doc = "effect."]
    #[doc = "Default: the REPL instance's `terminal` value."]
    # [ wasm_bindgen ( method , getter , js_name = useColors ) ]
    pub fn use_colors(this: &ReplOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = useColors ) ]
    pub fn set_use_colors(this: &ReplOptions, value: Option<bool>);
    #[doc = "If `true`, specifies that the default evaluation function will use the JavaScript"]
    #[doc = "`global` as the context as opposed to creating a new separate context for the REPL"]
    #[doc = "instance. The node CLI REPL sets this value to `true`."]
    #[doc = "Default: `false`."]
    # [ wasm_bindgen ( method , getter , js_name = useGlobal ) ]
    pub fn use_global(this: &ReplOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = useGlobal ) ]
    pub fn set_use_global(this: &ReplOptions, value: Option<bool>);
    #[doc = "If `true`, specifies that the default writer will not output the return value of a"]
    #[doc = "command if it evaluates to `undefined`."]
    #[doc = "Default: `false`."]
    # [ wasm_bindgen ( method , getter , js_name = ignoreUndefined ) ]
    pub fn ignore_undefined(this: &ReplOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = ignoreUndefined ) ]
    pub fn set_ignore_undefined(this: &ReplOptions, value: Option<bool>);
    #[doc = "The function to invoke to format the output of each command before writing to `output`."]
    #[doc = "Default: a wrapper for `util.inspect`."]
    #[wasm_bindgen(method, getter)]
    pub fn writer(this: &ReplOptions) -> Option<REPLWriter>;
    #[wasm_bindgen(method, setter)]
    pub fn set_writer(this: &ReplOptions, value: Option<&REPLWriter>);
    #[doc = "An optional function used for custom Tab auto completion."]
    #[wasm_bindgen(method, getter)]
    pub fn completer(this: &ReplOptions) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_completer(this: &ReplOptions, value: &JsValue);
    #[doc = "A flag that specifies whether the default evaluator executes all JavaScript commands in"]
    #[doc = "strict mode or default (sloppy) mode."]
    #[doc = "Accepted values are:"]
    #[doc = "- `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode."]
    #[doc = "- `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to"]
    #[doc = "   prefacing every repl statement with `'use strict'`."]
    # [ wasm_bindgen ( method , getter , js_name = replMode ) ]
    pub fn repl_mode(this: &ReplOptions) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = replMode ) ]
    pub fn set_repl_mode(this: &ReplOptions, value: &JsValue);
    #[doc = "Stop evaluating the current piece of code when `SIGINT` is received, i.e. `Ctrl+C` is"]
    #[doc = "pressed. This cannot be used together with a custom `eval` function."]
    #[doc = "Default: `false`."]
    # [ wasm_bindgen ( method , getter , js_name = breakEvalOnSigint ) ]
    pub fn break_eval_on_sigint(this: &ReplOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = breakEvalOnSigint ) ]
    pub fn set_break_eval_on_sigint(this: &ReplOptions, value: Option<bool>);
    pub type REPLEval;
    pub type REPLWriter;
    #[wasm_bindgen(js_name = "writer")]
    #[doc = "This is the default \"writer\" value, if none is passed in the REPL options,"]
    #[doc = "and it can be overridden by custom print functions."]
    pub static WRITER: String;
    pub type REPLCommandAction;
    pub type REPLCommand;
    #[doc = "Help text to be displayed when `.help` is entered."]
    #[wasm_bindgen(method, getter)]
    pub fn help(this: &REPLCommand) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_help(this: &REPLCommand, value: Option<&str>);
    #[doc = "The function to execute, optionally accepting a single string argument."]
    #[wasm_bindgen(method, getter)]
    pub fn action(this: &REPLCommand) -> REPLCommandAction;
    #[wasm_bindgen(method, setter)]
    pub fn set_action(this: &REPLCommand, value: &REPLCommandAction);
    #[doc = "Provides a customizable Read-Eval-Print-Loop (REPL)."]
    #[doc = ""]
    #[doc = "Instances of `repl.REPLServer` will accept individual lines of user input, evaluate those"]
    #[doc = "according to a user-defined evaluation function, then output the result. Input and output"]
    #[doc = "may be from `stdin` and `stdout`, respectively, or may be connected to any Node.js `stream`."]
    #[doc = ""]
    #[doc = "Instances of `repl.REPLServer` support automatic completion of inputs, simplistic Emacs-style"]
    #[doc = "line editing, multi-line inputs, ANSI-styled output, saving and restoring current REPL session"]
    #[doc = "state, error recovery, and customizable evaluation functions."]
    #[doc = ""]
    #[doc = "Instances of `repl.REPLServer` are created using the `repl.start()` method and _should not_"]
    #[doc = "be created directly using the JavaScript `new` keyword."]
    pub type REPLServer;
    #[doc = "The `vm.Context` provided to the `eval` function to be used for JavaScript"]
    #[doc = "evaluation."]
    #[wasm_bindgen(method, getter)]
    pub fn context(this: &REPLServer) -> crate::vm::Context;
    #[doc = "The `Readable` stream from which REPL input will be read."]
    # [ wasm_bindgen ( method , getter , js_name = inputStream ) ]
    pub fn input_stream(this: &REPLServer) -> node_js::ReadableStream;
    #[doc = "The `Writable` stream to which REPL output will be written."]
    # [ wasm_bindgen ( method , getter , js_name = outputStream ) ]
    pub fn output_stream(this: &REPLServer) -> node_js::WritableStream;
    #[doc = "The commands registered via `replServer.defineCommand()`."]
    #[wasm_bindgen(method, getter)]
    pub fn commands(this: &REPLServer) -> JsValue;
    #[doc = "A value indicating whether the REPL is currently in \"editor mode\"."]
    # [ wasm_bindgen ( method , getter , js_name = editorMode ) ]
    pub fn editor_mode(this: &REPLServer) -> bool;
    #[doc = "A value indicating whether the `_` variable has been assigned."]
    # [ wasm_bindgen ( method , getter , js_name = underscoreAssigned ) ]
    pub fn underscore_assigned(this: &REPLServer) -> bool;
    #[doc = "The last evaluation result from the REPL (assigned to the `_` variable inside of the REPL)."]
    #[wasm_bindgen(method, getter)]
    pub fn last(this: &REPLServer) -> JsValue;
    #[doc = "A value indicating whether the `_error` variable has been assigned."]
    # [ wasm_bindgen ( method , getter , js_name = underscoreErrAssigned ) ]
    pub fn underscore_err_assigned(this: &REPLServer) -> bool;
    #[doc = "The last error raised inside the REPL (assigned to the `_error` variable inside of the REPL)."]
    # [ wasm_bindgen ( method , getter , js_name = lastError ) ]
    pub fn last_error(this: &REPLServer) -> JsValue;
    #[doc = "Specified in the REPL options, this is the function to be used when evaluating each"]
    #[doc = "given line of input. If not specified in the REPL options, this is an async wrapper"]
    #[doc = "for the JavaScript `eval()` function."]
    #[wasm_bindgen(method, getter)]
    pub fn eval(this: &REPLServer) -> REPLEval;
    #[doc = "Specified in the REPL options, this is a value indicating whether the default"]
    #[doc = "`writer` function should include ANSI color styling to REPL output."]
    # [ wasm_bindgen ( method , getter , js_name = useColors ) ]
    pub fn use_colors(this: &REPLServer) -> bool;
    #[doc = "Specified in the REPL options, this is a value indicating whether the default `eval`"]
    #[doc = "function will use the JavaScript `global` as the context as opposed to creating a new"]
    #[doc = "separate context for the REPL instance."]
    # [ wasm_bindgen ( method , getter , js_name = useGlobal ) ]
    pub fn use_global(this: &REPLServer) -> bool;
    #[doc = "Specified in the REPL options, this is a value indicating whether the default `writer`"]
    #[doc = "function should output the result of a command if it evaluates to `undefined`."]
    # [ wasm_bindgen ( method , getter , js_name = ignoreUndefined ) ]
    pub fn ignore_undefined(this: &REPLServer) -> bool;
    #[doc = "Specified in the REPL options, this is the function to invoke to format the output of"]
    #[doc = "each command before writing to `outputStream`. If not specified in the REPL options,"]
    #[doc = "this will be a wrapper for `util.inspect`."]
    #[wasm_bindgen(method, getter)]
    pub fn writer(this: &REPLServer) -> REPLWriter;
    #[doc = "Specified in the REPL options, this is the function to use for custom Tab auto-completion."]
    #[wasm_bindgen(method, getter)]
    pub fn completer(this: &REPLServer) -> JsValue;
    #[doc = "Specified in the REPL options, this is a flag that specifies whether the default `eval`"]
    #[doc = "function should execute all JavaScript commands in strict mode or default (sloppy) mode."]
    #[doc = "Possible values are:"]
    #[doc = "- `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode."]
    #[doc = "- `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to"]
    #[doc = "    prefacing every repl statement with `'use strict'`."]
    # [ wasm_bindgen ( method , getter , js_name = replMode ) ]
    pub fn repl_mode(this: &REPLServer) -> JsValue;
    #[wasm_bindgen(constructor)]
    pub fn new_repl_server() -> REPLServer;
    #[doc = "Used to add new `.`-prefixed commands to the REPL instance. Such commands are invoked"]
    #[doc = "by typing a `.` followed by the `keyword`."]
    # [ wasm_bindgen ( method , js_name = defineCommand ) ]
    pub fn define_command(this: &REPLServer, keyword: &str, cmd: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = defineCommand ) ]
    pub fn set_define_command(this: &REPLServer, value: &Function);
    #[doc = "Readies the REPL instance for input from the user, printing the configured `prompt` to a"]
    #[doc = "new line in the `output` and resuming the `input` to accept new input."]
    #[doc = ""]
    #[doc = "When multi-line input is being entered, an ellipsis is printed rather than the 'prompt'."]
    #[doc = ""]
    #[doc = "This method is primarily intended to be called from within the action function for"]
    #[doc = "commands registered using the `replServer.defineCommand()` method."]
    # [ wasm_bindgen ( method , js_name = displayPrompt ) ]
    pub fn display_prompt(this: &REPLServer, preserve_cursor: Option<bool>);
    # [ wasm_bindgen ( method , setter , js_name = displayPrompt ) ]
    pub fn set_display_prompt(this: &REPLServer, value: &Function);
    #[doc = "Clears any command that has been buffered but not yet executed."]
    #[doc = ""]
    #[doc = "This method is primarily intended to be called from within the action function for"]
    #[doc = "commands registered using the `replServer.defineCommand()` method."]
    # [ wasm_bindgen ( method , js_name = clearBufferedCommand ) ]
    pub fn clear_buffered_command(this: &REPLServer);
    # [ wasm_bindgen ( method , setter , js_name = clearBufferedCommand ) ]
    pub fn set_clear_buffered_command(this: &REPLServer, value: &Function);
    #[doc = "Initializes a history log file for the REPL instance. When executing the"]
    #[doc = "Node.js binary and using the command line REPL, a history file is initialized"]
    #[doc = "by default. However, this is not the case when creating a REPL"]
    #[doc = "programmatically. Use this method to initialize a history log file when working"]
    #[doc = "with REPL instances programmatically."]
    # [ wasm_bindgen ( method , js_name = setupHistory ) ]
    pub fn setup_history(this: &REPLServer, path: &str, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = setupHistory ) ]
    pub fn set_setup_history(this: &REPLServer, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close - inherited from `readline.Interface`"]
    #[doc = "2. line - inherited from `readline.Interface`"]
    #[doc = "3. pause - inherited from `readline.Interface`"]
    #[doc = "4. resume - inherited from `readline.Interface`"]
    #[doc = "5. SIGCONT - inherited from `readline.Interface`"]
    #[doc = "6. SIGINT - inherited from `readline.Interface`"]
    #[doc = "7. SIGTSTP - inherited from `readline.Interface`"]
    #[doc = "8. exit"]
    #[doc = "9. reset"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &REPLServer, event: &str, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &REPLServer, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close - inherited from `readline.Interface`"]
    #[doc = "2. line - inherited from `readline.Interface`"]
    #[doc = "3. pause - inherited from `readline.Interface`"]
    #[doc = "4. resume - inherited from `readline.Interface`"]
    #[doc = "5. SIGCONT - inherited from `readline.Interface`"]
    #[doc = "6. SIGINT - inherited from `readline.Interface`"]
    #[doc = "7. SIGTSTP - inherited from `readline.Interface`"]
    #[doc = "8. exit"]
    #[doc = "9. reset"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener2(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener2(this: &REPLServer, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close - inherited from `readline.Interface`"]
    #[doc = "2. line - inherited from `readline.Interface`"]
    #[doc = "3. pause - inherited from `readline.Interface`"]
    #[doc = "4. resume - inherited from `readline.Interface`"]
    #[doc = "5. SIGCONT - inherited from `readline.Interface`"]
    #[doc = "6. SIGINT - inherited from `readline.Interface`"]
    #[doc = "7. SIGTSTP - inherited from `readline.Interface`"]
    #[doc = "8. exit"]
    #[doc = "9. reset"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener3(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener3(this: &REPLServer, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close - inherited from `readline.Interface`"]
    #[doc = "2. line - inherited from `readline.Interface`"]
    #[doc = "3. pause - inherited from `readline.Interface`"]
    #[doc = "4. resume - inherited from `readline.Interface`"]
    #[doc = "5. SIGCONT - inherited from `readline.Interface`"]
    #[doc = "6. SIGINT - inherited from `readline.Interface`"]
    #[doc = "7. SIGTSTP - inherited from `readline.Interface`"]
    #[doc = "8. exit"]
    #[doc = "9. reset"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener4(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener4(this: &REPLServer, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close - inherited from `readline.Interface`"]
    #[doc = "2. line - inherited from `readline.Interface`"]
    #[doc = "3. pause - inherited from `readline.Interface`"]
    #[doc = "4. resume - inherited from `readline.Interface`"]
    #[doc = "5. SIGCONT - inherited from `readline.Interface`"]
    #[doc = "6. SIGINT - inherited from `readline.Interface`"]
    #[doc = "7. SIGTSTP - inherited from `readline.Interface`"]
    #[doc = "8. exit"]
    #[doc = "9. reset"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener5(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener5(this: &REPLServer, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close - inherited from `readline.Interface`"]
    #[doc = "2. line - inherited from `readline.Interface`"]
    #[doc = "3. pause - inherited from `readline.Interface`"]
    #[doc = "4. resume - inherited from `readline.Interface`"]
    #[doc = "5. SIGCONT - inherited from `readline.Interface`"]
    #[doc = "6. SIGINT - inherited from `readline.Interface`"]
    #[doc = "7. SIGTSTP - inherited from `readline.Interface`"]
    #[doc = "8. exit"]
    #[doc = "9. reset"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener6(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener6(this: &REPLServer, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close - inherited from `readline.Interface`"]
    #[doc = "2. line - inherited from `readline.Interface`"]
    #[doc = "3. pause - inherited from `readline.Interface`"]
    #[doc = "4. resume - inherited from `readline.Interface`"]
    #[doc = "5. SIGCONT - inherited from `readline.Interface`"]
    #[doc = "6. SIGINT - inherited from `readline.Interface`"]
    #[doc = "7. SIGTSTP - inherited from `readline.Interface`"]
    #[doc = "8. exit"]
    #[doc = "9. reset"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener7(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener7(this: &REPLServer, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close - inherited from `readline.Interface`"]
    #[doc = "2. line - inherited from `readline.Interface`"]
    #[doc = "3. pause - inherited from `readline.Interface`"]
    #[doc = "4. resume - inherited from `readline.Interface`"]
    #[doc = "5. SIGCONT - inherited from `readline.Interface`"]
    #[doc = "6. SIGINT - inherited from `readline.Interface`"]
    #[doc = "7. SIGTSTP - inherited from `readline.Interface`"]
    #[doc = "8. exit"]
    #[doc = "9. reset"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener8(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener8(this: &REPLServer, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close - inherited from `readline.Interface`"]
    #[doc = "2. line - inherited from `readline.Interface`"]
    #[doc = "3. pause - inherited from `readline.Interface`"]
    #[doc = "4. resume - inherited from `readline.Interface`"]
    #[doc = "5. SIGCONT - inherited from `readline.Interface`"]
    #[doc = "6. SIGINT - inherited from `readline.Interface`"]
    #[doc = "7. SIGTSTP - inherited from `readline.Interface`"]
    #[doc = "8. exit"]
    #[doc = "9. reset"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener9(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener9(this: &REPLServer, value: &Function);
    #[doc = "events.EventEmitter"]
    #[doc = "1. close - inherited from `readline.Interface`"]
    #[doc = "2. line - inherited from `readline.Interface`"]
    #[doc = "3. pause - inherited from `readline.Interface`"]
    #[doc = "4. resume - inherited from `readline.Interface`"]
    #[doc = "5. SIGCONT - inherited from `readline.Interface`"]
    #[doc = "6. SIGINT - inherited from `readline.Interface`"]
    #[doc = "7. SIGTSTP - inherited from `readline.Interface`"]
    #[doc = "8. exit"]
    #[doc = "9. reset"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener10(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener10(this: &REPLServer, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &REPLServer, event: &JsValue, args: &Array) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit2(this: &REPLServer, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit2(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit3(this: &REPLServer, event: &JsValue, input: &str) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit3(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit4(this: &REPLServer, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit4(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit5(this: &REPLServer, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit5(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit6(this: &REPLServer, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit6(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit7(this: &REPLServer, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit7(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit8(this: &REPLServer, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit8(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit9(this: &REPLServer, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit9(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit10(this: &REPLServer, event: &JsValue, context: &crate::vm::Context) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit10(this: &REPLServer, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &REPLServer, event: &str, listener: &JsValue) -> REPLServer;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on2(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on2(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on3(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on3(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on4(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on4(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on5(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on5(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on6(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on6(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on7(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on7(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on8(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on8(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on9(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on9(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on10(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on10(this: &REPLServer, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &REPLServer, event: &str, listener: &JsValue) -> REPLServer;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once2(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once2(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once3(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once3(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once4(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once4(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once5(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once5(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once6(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once6(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once7(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once7(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once8(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once8(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once9(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once9(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once10(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once10(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &REPLServer, event: &str, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener2(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener2(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener3(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener3(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener4(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener4(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener5(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener5(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener6(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener6(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener7(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener7(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener8(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener8(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener9(this: &REPLServer, event: &JsValue, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener9(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener10(this: &REPLServer, event: &JsValue, listener: &JsValue)
    -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener10(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &REPLServer, event: &str, listener: &JsValue) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener2(
        this: &REPLServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener2(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener3(
        this: &REPLServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener3(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener4(
        this: &REPLServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener4(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener5(
        this: &REPLServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener5(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener6(
        this: &REPLServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener6(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener7(
        this: &REPLServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener7(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener8(
        this: &REPLServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener8(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener9(
        this: &REPLServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener9(this: &REPLServer, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener10(
        this: &REPLServer,
        event: &JsValue,
        listener: &JsValue,
    ) -> REPLServer;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener10(this: &REPLServer, value: &Function);
    #[doc = "A flag passed in the REPL options. Evaluates expressions in sloppy mode."]
    pub static REPL_MODE_SLOPPY: String;
    #[doc = "A flag passed in the REPL options. Evaluates expressions in strict mode."]
    #[doc = "This is equivalent to prefacing every repl statement with `'use strict'`."]
    pub static REPL_MODE_STRICT: String;
    #[doc = "Creates and starts a `repl.REPLServer` instance."]
    #[wasm_bindgen()]
    pub fn start(options: &JsValue) -> REPLServer;
    #[doc = "Indicates a recoverable error that a `REPLServer` can use to support multi-line input."]
    pub type Recoverable;
    #[wasm_bindgen(method, getter)]
    pub fn err(this: &Recoverable) -> Error;
    #[wasm_bindgen(method, setter)]
    pub fn set_err(this: &Recoverable, value: &Error);
    #[wasm_bindgen(constructor)]
    pub fn new_recoverable(err: &Error) -> Recoverable;
}
