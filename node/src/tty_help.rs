// generated by ts2rs 0.2.0
// https://ts2rs.ctaggart.com/

impl ReadStream {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl WriteStream {
    pub fn new() -> Self {
        Object::new().unchecked_into()
    }
}
impl AsRef<node_js::EventEmitter> for ReadStream {
    fn as_ref(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl From<ReadStream> for node_js::EventEmitter {
    fn from(child: ReadStream) -> Self {
        child.unchecked_into()
    }
}
impl ReadStream {
    pub fn to_node_js_event_emitter(self) -> node_js::EventEmitter {
        self.unchecked_into()
    }
    pub fn as_node_js_event_emitter(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::ReadableStream> for ReadStream {
    fn as_ref(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl From<ReadStream> for node_js::ReadableStream {
    fn from(child: ReadStream) -> Self {
        child.unchecked_into()
    }
}
impl ReadStream {
    pub fn to_node_js_readable_stream(self) -> node_js::ReadableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_readable_stream(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::WritableStream> for ReadStream {
    fn as_ref(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
impl From<ReadStream> for node_js::WritableStream {
    fn from(child: ReadStream) -> Self {
        child.unchecked_into()
    }
}
impl ReadStream {
    pub fn to_node_js_writable_stream(self) -> node_js::WritableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_writable_stream(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
impl AsRef<crate::net::Socket> for ReadStream {
    fn as_ref(&self) -> &crate::net::Socket {
        self.unchecked_ref()
    }
}
impl From<ReadStream> for crate::net::Socket {
    fn from(child: ReadStream) -> Self {
        child.unchecked_into()
    }
}
impl ReadStream {
    pub fn to_net_socket(self) -> crate::net::Socket {
        self.unchecked_into()
    }
    pub fn as_net_socket(&self) -> &crate::net::Socket {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::EventEmitter> for WriteStream {
    fn as_ref(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl From<WriteStream> for node_js::EventEmitter {
    fn from(child: WriteStream) -> Self {
        child.unchecked_into()
    }
}
impl WriteStream {
    pub fn to_node_js_event_emitter(self) -> node_js::EventEmitter {
        self.unchecked_into()
    }
    pub fn as_node_js_event_emitter(&self) -> &node_js::EventEmitter {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::ReadableStream> for WriteStream {
    fn as_ref(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl From<WriteStream> for node_js::ReadableStream {
    fn from(child: WriteStream) -> Self {
        child.unchecked_into()
    }
}
impl WriteStream {
    pub fn to_node_js_readable_stream(self) -> node_js::ReadableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_readable_stream(&self) -> &node_js::ReadableStream {
        self.unchecked_ref()
    }
}
impl AsRef<node_js::WritableStream> for WriteStream {
    fn as_ref(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
impl From<WriteStream> for node_js::WritableStream {
    fn from(child: WriteStream) -> Self {
        child.unchecked_into()
    }
}
impl WriteStream {
    pub fn to_node_js_writable_stream(self) -> node_js::WritableStream {
        self.unchecked_into()
    }
    pub fn as_node_js_writable_stream(&self) -> &node_js::WritableStream {
        self.unchecked_ref()
    }
}
impl AsRef<crate::net::Socket> for WriteStream {
    fn as_ref(&self) -> &crate::net::Socket {
        self.unchecked_ref()
    }
}
impl From<WriteStream> for crate::net::Socket {
    fn from(child: WriteStream) -> Self {
        child.unchecked_into()
    }
}
impl WriteStream {
    pub fn to_net_socket(self) -> crate::net::Socket {
        self.unchecked_into()
    }
    pub fn as_net_socket(&self) -> &crate::net::Socket {
        self.unchecked_ref()
    }
}
