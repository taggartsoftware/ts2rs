// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl BigIntOptions {
    pub fn new() -> BigIntOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl BigIntStats {
    pub fn new() -> BigIntStats {
        JsCast::unchecked_into(Object::new())
    }
}
impl Dir {
    pub fn new() -> Dir {
        JsCast::unchecked_into(Object::new())
    }
}
impl Dirent {
    pub fn new() -> Dirent {
        JsCast::unchecked_into(Object::new())
    }
}
impl FSWatcher {
    pub fn new() -> FSWatcher {
        JsCast::unchecked_into(Object::new())
    }
}
impl MakeDirectoryOptions {
    pub fn new() -> MakeDirectoryOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl OpenDirOptions {
    pub fn new() -> OpenDirOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl ReadStream {
    pub fn new() -> ReadStream {
        JsCast::unchecked_into(Object::new())
    }
}
impl RmDirAsyncOptions {
    pub fn new() -> RmDirAsyncOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl RmDirOptions {
    pub fn new() -> RmDirOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl StatOptions {
    pub fn new() -> StatOptions {
        JsCast::unchecked_into(Object::new())
    }
}
impl Stats {
    pub fn new() -> Stats {
        JsCast::unchecked_into(Object::new())
    }
}
impl StatsBase {
    pub fn new() -> StatsBase {
        JsCast::unchecked_into(Object::new())
    }
}
impl WriteStream {
    pub fn new() -> WriteStream {
        JsCast::unchecked_into(Object::new())
    }
}
impl WriteVResult {
    pub fn new() -> WriteVResult {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<crate::fs::StatsBase> for crate::fs::BigIntStats {
    fn as_ref(&self) -> &crate::fs::StatsBase {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::fs::BigIntStats> for crate::fs::StatsBase {
    fn from(child: crate::fs::BigIntStats) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::fs::FSWatcher {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::fs::FSWatcher> for crate::node_js::EventEmitter {
    fn from(child: crate::fs::FSWatcher) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::fs::ReadStream {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::fs::ReadStream> for crate::node_js::EventEmitter {
    fn from(child: crate::fs::ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::ReadableStream> for crate::fs::ReadStream {
    fn as_ref(&self) -> &crate::node_js::ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::fs::ReadStream> for crate::node_js::ReadableStream {
    fn from(child: crate::fs::ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::fs::RmDirOptions> for crate::fs::RmDirAsyncOptions {
    fn as_ref(&self) -> &crate::fs::RmDirOptions {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::fs::RmDirAsyncOptions> for crate::fs::RmDirOptions {
    fn from(child: crate::fs::RmDirAsyncOptions) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::fs::StatsBase> for crate::fs::Stats {
    fn as_ref(&self) -> &crate::fs::StatsBase {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::fs::Stats> for crate::fs::StatsBase {
    fn from(child: crate::fs::Stats) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::EventEmitter> for crate::fs::WriteStream {
    fn as_ref(&self) -> &crate::node_js::EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::fs::WriteStream> for crate::node_js::EventEmitter {
    fn from(child: crate::fs::WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<crate::node_js::WritableStream> for crate::fs::WriteStream {
    fn as_ref(&self) -> &crate::node_js::WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<crate::fs::WriteStream> for crate::node_js::WritableStream {
    fn from(child: crate::fs::WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
