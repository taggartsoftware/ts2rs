// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

impl ReadStream {
    pub fn new() -> ReadStream {
        JsCast::unchecked_into(Object::new())
    }
}
impl WriteStream {
    pub fn new() -> WriteStream {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<Duplex> for ReadStream {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadStream> for Duplex {
    fn from(child: ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for ReadStream {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadStream> for EventEmitter {
    fn from(child: ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadStream> for ReadStream {
    fn as_ref(&self) -> &ReadStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadStream> for ReadStream {
    fn from(child: ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for ReadStream {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadStream> for Readable {
    fn from(child: ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableStream> for ReadStream {
    fn as_ref(&self) -> &ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadStream> for ReadableStream {
    fn from(child: ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Socket> for ReadStream {
    fn as_ref(&self) -> &Socket {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadStream> for Socket {
    fn from(child: ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for ReadStream {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadStream> for Stream {
    fn from(child: ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for ReadStream {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadStream> for Writable {
    fn from(child: ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableStream> for ReadStream {
    fn as_ref(&self) -> &WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadStream> for WritableStream {
    fn from(child: ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<internal> for ReadStream {
    fn as_ref(&self) -> &internal {
        JsCast::unchecked_ref(self)
    }
}
impl From<ReadStream> for internal {
    fn from(child: ReadStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Duplex> for WriteStream {
    fn as_ref(&self) -> &Duplex {
        JsCast::unchecked_ref(self)
    }
}
impl From<WriteStream> for Duplex {
    fn from(child: WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<EventEmitter> for WriteStream {
    fn as_ref(&self) -> &EventEmitter {
        JsCast::unchecked_ref(self)
    }
}
impl From<WriteStream> for EventEmitter {
    fn from(child: WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Readable> for WriteStream {
    fn as_ref(&self) -> &Readable {
        JsCast::unchecked_ref(self)
    }
}
impl From<WriteStream> for Readable {
    fn from(child: WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<ReadableStream> for WriteStream {
    fn as_ref(&self) -> &ReadableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<WriteStream> for ReadableStream {
    fn from(child: WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Socket> for WriteStream {
    fn as_ref(&self) -> &Socket {
        JsCast::unchecked_ref(self)
    }
}
impl From<WriteStream> for Socket {
    fn from(child: WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Stream> for WriteStream {
    fn as_ref(&self) -> &Stream {
        JsCast::unchecked_ref(self)
    }
}
impl From<WriteStream> for Stream {
    fn from(child: WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<Writable> for WriteStream {
    fn as_ref(&self) -> &Writable {
        JsCast::unchecked_ref(self)
    }
}
impl From<WriteStream> for Writable {
    fn from(child: WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WritableStream> for WriteStream {
    fn as_ref(&self) -> &WritableStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<WriteStream> for WritableStream {
    fn from(child: WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<WriteStream> for WriteStream {
    fn as_ref(&self) -> &WriteStream {
        JsCast::unchecked_ref(self)
    }
}
impl From<WriteStream> for WriteStream {
    fn from(child: WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<internal> for WriteStream {
    fn as_ref(&self) -> &internal {
        JsCast::unchecked_ref(self)
    }
}
impl From<WriteStream> for internal {
    fn from(child: WriteStream) -> Self {
        JsCast::unchecked_into(child)
    }
}
