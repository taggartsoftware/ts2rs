// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "internal")]
extern "C" {
    pub type Stream;
    pub type ReadableOptions;
    # [ wasm_bindgen ( method , getter , js_name = highWaterMark ) ]
    pub fn high_water_mark(this: &ReadableOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = highWaterMark ) ]
    pub fn set_high_water_mark(this: &ReadableOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn encoding(this: &ReadableOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_encoding(this: &ReadableOptions, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = objectMode ) ]
    pub fn object_mode(this: &ReadableOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = objectMode ) ]
    pub fn set_object_mode(this: &ReadableOptions, value: Option<bool>);
    #[wasm_bindgen(method)]
    pub fn read(this: &ReadableOptions, this: &Readable, size: f64);
    #[wasm_bindgen(method, setter)]
    pub fn set_read(this: &ReadableOptions, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn destroy(this: &ReadableOptions, this: &Readable, error: &JsValue, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_destroy(this: &ReadableOptions, value: Option<&Function>);
    # [ wasm_bindgen ( method , getter , js_name = autoDestroy ) ]
    pub fn auto_destroy(this: &ReadableOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = autoDestroy ) ]
    pub fn set_auto_destroy(this: &ReadableOptions, value: Option<bool>);
    pub type Readable;
    #[doc = "A utility method for creating Readable Streams out of iterators."]
    #[wasm_bindgen(method)]
    pub fn from(this: &Readable, iterable: &JsValue, options: Option<&ReadableOptions>)
    -> Readable;
    #[wasm_bindgen(method, setter)]
    pub fn set_from(this: &Readable, value: &Function);
    #[wasm_bindgen(method, getter)]
    pub fn readable(this: &Readable) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_readable(this: &Readable, value: bool);
    # [ wasm_bindgen ( method , getter , js_name = readableHighWaterMark ) ]
    pub fn readable_high_water_mark(this: &Readable) -> f64;
    # [ wasm_bindgen ( method , getter , js_name = readableLength ) ]
    pub fn readable_length(this: &Readable) -> f64;
    # [ wasm_bindgen ( method , getter , js_name = readableObjectMode ) ]
    pub fn readable_object_mode(this: &Readable) -> bool;
    #[wasm_bindgen(method, getter)]
    pub fn destroyed(this: &Readable) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_destroyed(this: &Readable, value: bool);
    #[wasm_bindgen(constructor)]
    pub fn new_readable(opts: Option<&ReadableOptions>) -> Readable;
    # [ wasm_bindgen ( method , js_name = _read ) ]
    pub fn read(this: &Readable, size: f64);
    # [ wasm_bindgen ( method , setter , js_name = _read ) ]
    pub fn set_read(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = read ) ]
    pub fn read2(this: &Readable, size: Option<f64>) -> JsValue;
    # [ wasm_bindgen ( method , setter , js_name = read ) ]
    pub fn set_read2(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = setEncoding ) ]
    pub fn set_encoding(this: &Readable, encoding: &str) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = setEncoding ) ]
    pub fn set_set_encoding(this: &Readable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn pause(this: &Readable) -> Readable;
    #[wasm_bindgen(method, setter)]
    pub fn set_pause(this: &Readable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn resume(this: &Readable) -> Readable;
    #[wasm_bindgen(method, setter)]
    pub fn set_resume(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = isPaused ) ]
    pub fn is_paused(this: &Readable) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = isPaused ) ]
    pub fn set_is_paused(this: &Readable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unpipe(this: &Readable, destination: Option<&WritableStream>) -> Readable;
    #[wasm_bindgen(method, setter)]
    pub fn set_unpipe(this: &Readable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unshift(this: &Readable, chunk: &JsValue, encoding: Option<&BufferEncoding>);
    #[wasm_bindgen(method, setter)]
    pub fn set_unshift(this: &Readable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn wrap(this: &Readable, old_stream: &ReadableStream) -> Readable;
    #[wasm_bindgen(method, setter)]
    pub fn set_wrap(this: &Readable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn push(this: &Readable, chunk: &JsValue, encoding: Option<&str>) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_push(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = _destroy ) ]
    pub fn destroy(this: &Readable, error: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = _destroy ) ]
    pub fn set_destroy(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = destroy ) ]
    pub fn destroy2(this: &Readable, error: Option<&Error>);
    # [ wasm_bindgen ( method , setter , js_name = destroy ) ]
    pub fn set_destroy2(this: &Readable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. data"]
    #[doc = "3. end"]
    #[doc = "4. readable"]
    #[doc = "5. error"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Readable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. data"]
    #[doc = "3. end"]
    #[doc = "4. readable"]
    #[doc = "5. error"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener2(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener2(this: &Readable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. data"]
    #[doc = "3. end"]
    #[doc = "4. readable"]
    #[doc = "5. error"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener3(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener3(this: &Readable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. data"]
    #[doc = "3. end"]
    #[doc = "4. readable"]
    #[doc = "5. error"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener4(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener4(this: &Readable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. data"]
    #[doc = "3. end"]
    #[doc = "4. readable"]
    #[doc = "5. error"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener5(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener5(this: &Readable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. data"]
    #[doc = "3. end"]
    #[doc = "4. readable"]
    #[doc = "5. error"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener6(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener6(this: &Readable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Readable, event: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit2(this: &Readable, event: &JsValue, chunk: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit2(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit3(this: &Readable, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit3(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit4(this: &Readable, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit4(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit5(this: &Readable, event: &JsValue, err: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit5(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit6(this: &Readable, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit6(this: &Readable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on2(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on2(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on3(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on3(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on4(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on4(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on5(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on5(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on6(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on6(this: &Readable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once2(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once2(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once3(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once3(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once4(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once4(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once5(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once5(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once6(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once6(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener2(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener2(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener3(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener3(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener4(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener4(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener5(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener5(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener6(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener6(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener2(this: &Readable, event: &JsValue, listener: &JsValue)
    -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener2(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener3(this: &Readable, event: &JsValue, listener: &JsValue)
    -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener3(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener4(this: &Readable, event: &JsValue, listener: &JsValue)
    -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener4(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener5(this: &Readable, event: &JsValue, listener: &JsValue)
    -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener5(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener6(this: &Readable, event: &JsValue, listener: &JsValue)
    -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener6(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener2(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener2(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener3(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener3(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener4(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener4(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener5(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener5(this: &Readable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener6(this: &Readable, event: &JsValue, listener: &JsValue) -> Readable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener6(this: &Readable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn computed_property_name(this: &Readable) -> AsyncIterableIterator;
    #[wasm_bindgen(method, setter)]
    pub fn set_computed_property_name(this: &Readable, value: &Function);
    pub type WritableOptions;
    # [ wasm_bindgen ( method , getter , js_name = highWaterMark ) ]
    pub fn high_water_mark(this: &WritableOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = highWaterMark ) ]
    pub fn set_high_water_mark(this: &WritableOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = decodeStrings ) ]
    pub fn decode_strings(this: &WritableOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = decodeStrings ) ]
    pub fn set_decode_strings(this: &WritableOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = defaultEncoding ) ]
    pub fn default_encoding(this: &WritableOptions) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = defaultEncoding ) ]
    pub fn set_default_encoding(this: &WritableOptions, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = objectMode ) ]
    pub fn object_mode(this: &WritableOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = objectMode ) ]
    pub fn set_object_mode(this: &WritableOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = emitClose ) ]
    pub fn emit_close(this: &WritableOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = emitClose ) ]
    pub fn set_emit_close(this: &WritableOptions, value: Option<bool>);
    #[wasm_bindgen(method)]
    pub fn write(
        this: &WritableOptions,
        this: &Writable,
        chunk: &JsValue,
        encoding: &str,
        callback: &JsValue,
    );
    #[wasm_bindgen(method, setter)]
    pub fn set_write(this: &WritableOptions, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn writev(this: &WritableOptions, this: &Writable, chunks: &Array, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_writev(this: &WritableOptions, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn destroy(this: &WritableOptions, this: &Writable, error: &JsValue, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_destroy(this: &WritableOptions, value: Option<&Function>);
    # [ wasm_bindgen ( method , js_name = final ) ]
    pub fn final_(this: &WritableOptions, this: &Writable, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = final ) ]
    pub fn set_final_(this: &WritableOptions, value: Option<&Function>);
    # [ wasm_bindgen ( method , getter , js_name = autoDestroy ) ]
    pub fn auto_destroy(this: &WritableOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = autoDestroy ) ]
    pub fn set_auto_destroy(this: &WritableOptions, value: Option<bool>);
    pub type Writable;
    #[wasm_bindgen(method, getter)]
    pub fn writable(this: &Writable) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = writableEnded ) ]
    pub fn writable_ended(this: &Writable) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = writableFinished ) ]
    pub fn writable_finished(this: &Writable) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = writableHighWaterMark ) ]
    pub fn writable_high_water_mark(this: &Writable) -> f64;
    # [ wasm_bindgen ( method , getter , js_name = writableLength ) ]
    pub fn writable_length(this: &Writable) -> f64;
    # [ wasm_bindgen ( method , getter , js_name = writableObjectMode ) ]
    pub fn writable_object_mode(this: &Writable) -> bool;
    #[wasm_bindgen(method, getter)]
    pub fn destroyed(this: &Writable) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_destroyed(this: &Writable, value: bool);
    #[wasm_bindgen(constructor)]
    pub fn new_writable(opts: Option<&WritableOptions>) -> Writable;
    # [ wasm_bindgen ( method , js_name = _write ) ]
    pub fn write(this: &Writable, chunk: &JsValue, encoding: &str, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = _write ) ]
    pub fn set_write(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = _writev ) ]
    pub fn writev(this: &Writable, chunks: &Array, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = _writev ) ]
    pub fn set_writev(this: &Writable, value: Option<&Function>);
    # [ wasm_bindgen ( method , js_name = _destroy ) ]
    pub fn destroy(this: &Writable, error: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = _destroy ) ]
    pub fn set_destroy(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = _final ) ]
    pub fn final_(this: &Writable, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = _final ) ]
    pub fn set_final_(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = write ) ]
    pub fn write2(this: &Writable, chunk: &JsValue, cb: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = write ) ]
    pub fn set_write2(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = write ) ]
    pub fn write3(this: &Writable, chunk: &JsValue, encoding: &str, cb: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = write ) ]
    pub fn set_write3(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = setDefaultEncoding ) ]
    pub fn set_default_encoding(this: &Writable, encoding: &str) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = setDefaultEncoding ) ]
    pub fn set_set_default_encoding(this: &Writable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn end(this: &Writable, cb: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_end(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = end ) ]
    pub fn end2(this: &Writable, chunk: &JsValue, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = end ) ]
    pub fn set_end2(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = end ) ]
    pub fn end3(this: &Writable, chunk: &JsValue, encoding: &str, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = end ) ]
    pub fn set_end3(this: &Writable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn cork(this: &Writable);
    #[wasm_bindgen(method, setter)]
    pub fn set_cork(this: &Writable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn uncork(this: &Writable);
    #[wasm_bindgen(method, setter)]
    pub fn set_uncork(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = destroy ) ]
    pub fn destroy2(this: &Writable, error: Option<&Error>);
    # [ wasm_bindgen ( method , setter , js_name = destroy ) ]
    pub fn set_destroy2(this: &Writable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. drain"]
    #[doc = "3. error"]
    #[doc = "4. finish"]
    #[doc = "5. pipe"]
    #[doc = "6. unpipe"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Writable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. drain"]
    #[doc = "3. error"]
    #[doc = "4. finish"]
    #[doc = "5. pipe"]
    #[doc = "6. unpipe"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener2(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener2(this: &Writable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. drain"]
    #[doc = "3. error"]
    #[doc = "4. finish"]
    #[doc = "5. pipe"]
    #[doc = "6. unpipe"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener3(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener3(this: &Writable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. drain"]
    #[doc = "3. error"]
    #[doc = "4. finish"]
    #[doc = "5. pipe"]
    #[doc = "6. unpipe"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener4(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener4(this: &Writable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. drain"]
    #[doc = "3. error"]
    #[doc = "4. finish"]
    #[doc = "5. pipe"]
    #[doc = "6. unpipe"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener5(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener5(this: &Writable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. drain"]
    #[doc = "3. error"]
    #[doc = "4. finish"]
    #[doc = "5. pipe"]
    #[doc = "6. unpipe"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener6(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener6(this: &Writable, value: &Function);
    #[doc = "Event emitter"]
    #[doc = "The defined events on documents including:"]
    #[doc = "1. close"]
    #[doc = "2. drain"]
    #[doc = "3. error"]
    #[doc = "4. finish"]
    #[doc = "5. pipe"]
    #[doc = "6. unpipe"]
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener7(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener7(this: &Writable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Writable, event: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit2(this: &Writable, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit2(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit3(this: &Writable, event: &JsValue, err: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit3(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit4(this: &Writable, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit4(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit5(this: &Writable, event: &JsValue, src: &Readable) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit5(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit6(this: &Writable, event: &JsValue, src: &Readable) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit6(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit7(this: &Writable, event: &JsValue, args: &Array) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit7(this: &Writable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on2(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on2(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on3(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on3(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on4(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on4(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on5(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on5(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on6(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on6(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on7(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on7(this: &Writable, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once2(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once2(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once3(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once3(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once4(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once4(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once5(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once5(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once6(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once6(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once7(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once7(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener2(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener2(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener3(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener3(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener4(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener4(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener5(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener5(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener6(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener6(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener7(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener7(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener2(this: &Writable, event: &JsValue, listener: &JsValue)
    -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener2(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener3(this: &Writable, event: &JsValue, listener: &JsValue)
    -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener3(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener4(this: &Writable, event: &JsValue, listener: &JsValue)
    -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener4(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener5(this: &Writable, event: &JsValue, listener: &JsValue)
    -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener5(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener6(this: &Writable, event: &JsValue, listener: &JsValue)
    -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener6(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener7(this: &Writable, event: &JsValue, listener: &JsValue)
    -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener7(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener2(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener2(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener3(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener3(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener4(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener4(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener5(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener5(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener6(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener6(this: &Writable, value: &Function);
    # [ wasm_bindgen ( method , js_name = removeListener ) ]
    pub fn remove_listener7(this: &Writable, event: &JsValue, listener: &JsValue) -> Writable;
    # [ wasm_bindgen ( method , setter , js_name = removeListener ) ]
    pub fn set_remove_listener7(this: &Writable, value: &Function);
    pub type DuplexOptions;
    # [ wasm_bindgen ( method , getter , js_name = allowHalfOpen ) ]
    pub fn allow_half_open(this: &DuplexOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = allowHalfOpen ) ]
    pub fn set_allow_half_open(this: &DuplexOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = readableObjectMode ) ]
    pub fn readable_object_mode(this: &DuplexOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = readableObjectMode ) ]
    pub fn set_readable_object_mode(this: &DuplexOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = writableObjectMode ) ]
    pub fn writable_object_mode(this: &DuplexOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = writableObjectMode ) ]
    pub fn set_writable_object_mode(this: &DuplexOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = readableHighWaterMark ) ]
    pub fn readable_high_water_mark(this: &DuplexOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = readableHighWaterMark ) ]
    pub fn set_readable_high_water_mark(this: &DuplexOptions, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = writableHighWaterMark ) ]
    pub fn writable_high_water_mark(this: &DuplexOptions) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = writableHighWaterMark ) ]
    pub fn set_writable_high_water_mark(this: &DuplexOptions, value: Option<f64>);
    #[wasm_bindgen(method)]
    pub fn read(this: &DuplexOptions, this: &Duplex, size: f64);
    #[wasm_bindgen(method, setter)]
    pub fn set_read(this: &DuplexOptions, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn write(
        this: &DuplexOptions,
        this: &Duplex,
        chunk: &JsValue,
        encoding: &str,
        callback: &JsValue,
    );
    #[wasm_bindgen(method, setter)]
    pub fn set_write(this: &DuplexOptions, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn writev(this: &DuplexOptions, this: &Duplex, chunks: &Array, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_writev(this: &DuplexOptions, value: Option<&Function>);
    # [ wasm_bindgen ( method , js_name = final ) ]
    pub fn final_(this: &DuplexOptions, this: &Duplex, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = final ) ]
    pub fn set_final_(this: &DuplexOptions, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn destroy(this: &DuplexOptions, this: &Duplex, error: &JsValue, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_destroy(this: &DuplexOptions, value: Option<&Function>);
    pub type Duplex;
    #[wasm_bindgen(method, getter)]
    pub fn writable(this: &Duplex) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = writableEnded ) ]
    pub fn writable_ended(this: &Duplex) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = writableFinished ) ]
    pub fn writable_finished(this: &Duplex) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = writableHighWaterMark ) ]
    pub fn writable_high_water_mark(this: &Duplex) -> f64;
    # [ wasm_bindgen ( method , getter , js_name = writableLength ) ]
    pub fn writable_length(this: &Duplex) -> f64;
    # [ wasm_bindgen ( method , getter , js_name = writableObjectMode ) ]
    pub fn writable_object_mode(this: &Duplex) -> bool;
    #[wasm_bindgen(constructor)]
    pub fn new_duplex(opts: Option<&DuplexOptions>) -> Duplex;
    # [ wasm_bindgen ( method , js_name = _write ) ]
    pub fn write(this: &Duplex, chunk: &JsValue, encoding: &str, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = _write ) ]
    pub fn set_write(this: &Duplex, value: &Function);
    # [ wasm_bindgen ( method , js_name = _writev ) ]
    pub fn writev(this: &Duplex, chunks: &Array, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = _writev ) ]
    pub fn set_writev(this: &Duplex, value: Option<&Function>);
    # [ wasm_bindgen ( method , js_name = _destroy ) ]
    pub fn destroy(this: &Duplex, error: &JsValue, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = _destroy ) ]
    pub fn set_destroy(this: &Duplex, value: &Function);
    # [ wasm_bindgen ( method , js_name = _final ) ]
    pub fn final_(this: &Duplex, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = _final ) ]
    pub fn set_final_(this: &Duplex, value: &Function);
    # [ wasm_bindgen ( method , js_name = write ) ]
    pub fn write2(this: &Duplex, chunk: &JsValue, encoding: Option<&str>, cb: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = write ) ]
    pub fn set_write2(this: &Duplex, value: &Function);
    # [ wasm_bindgen ( method , js_name = write ) ]
    pub fn write3(this: &Duplex, chunk: &JsValue, cb: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = write ) ]
    pub fn set_write3(this: &Duplex, value: &Function);
    # [ wasm_bindgen ( method , js_name = setDefaultEncoding ) ]
    pub fn set_default_encoding(this: &Duplex, encoding: &str) -> Duplex;
    # [ wasm_bindgen ( method , setter , js_name = setDefaultEncoding ) ]
    pub fn set_set_default_encoding(this: &Duplex, value: &Function);
    #[wasm_bindgen(method)]
    pub fn end(this: &Duplex, cb: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_end(this: &Duplex, value: &Function);
    # [ wasm_bindgen ( method , js_name = end ) ]
    pub fn end2(this: &Duplex, chunk: &JsValue, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = end ) ]
    pub fn set_end2(this: &Duplex, value: &Function);
    # [ wasm_bindgen ( method , js_name = end ) ]
    pub fn end3(this: &Duplex, chunk: &JsValue, encoding: Option<&str>, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = end ) ]
    pub fn set_end3(this: &Duplex, value: &Function);
    #[wasm_bindgen(method)]
    pub fn cork(this: &Duplex);
    #[wasm_bindgen(method, setter)]
    pub fn set_cork(this: &Duplex, value: &Function);
    #[wasm_bindgen(method)]
    pub fn uncork(this: &Duplex);
    #[wasm_bindgen(method, setter)]
    pub fn set_uncork(this: &Duplex, value: &Function);
    pub type TransformCallback;
    pub type TransformOptions;
    #[wasm_bindgen(method)]
    pub fn read(this: &TransformOptions, this: &Transform, size: f64);
    #[wasm_bindgen(method, setter)]
    pub fn set_read(this: &TransformOptions, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn write(
        this: &TransformOptions,
        this: &Transform,
        chunk: &JsValue,
        encoding: &str,
        callback: &JsValue,
    );
    #[wasm_bindgen(method, setter)]
    pub fn set_write(this: &TransformOptions, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn writev(this: &TransformOptions, this: &Transform, chunks: &Array, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_writev(this: &TransformOptions, value: Option<&Function>);
    # [ wasm_bindgen ( method , js_name = final ) ]
    pub fn final_(this: &TransformOptions, this: &Transform, callback: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = final ) ]
    pub fn set_final_(this: &TransformOptions, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn destroy(this: &TransformOptions, this: &Transform, error: &JsValue, callback: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_destroy(this: &TransformOptions, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn transform(
        this: &TransformOptions,
        this: &Transform,
        chunk: &JsValue,
        encoding: &str,
        callback: &TransformCallback,
    );
    #[wasm_bindgen(method, setter)]
    pub fn set_transform(this: &TransformOptions, value: Option<&Function>);
    #[wasm_bindgen(method)]
    pub fn flush(this: &TransformOptions, this: &Transform, callback: &TransformCallback);
    #[wasm_bindgen(method, setter)]
    pub fn set_flush(this: &TransformOptions, value: Option<&Function>);
    pub type Transform;
    #[wasm_bindgen(constructor)]
    pub fn new_transform(opts: Option<&TransformOptions>) -> Transform;
    # [ wasm_bindgen ( method , js_name = _transform ) ]
    pub fn transform(
        this: &Transform,
        chunk: &JsValue,
        encoding: &str,
        callback: &TransformCallback,
    );
    # [ wasm_bindgen ( method , setter , js_name = _transform ) ]
    pub fn set_transform(this: &Transform, value: &Function);
    # [ wasm_bindgen ( method , js_name = _flush ) ]
    pub fn flush(this: &Transform, callback: &TransformCallback);
    # [ wasm_bindgen ( method , setter , js_name = _flush ) ]
    pub fn set_flush(this: &Transform, value: &Function);
    pub type PassThrough;
    pub type FinishedOptions;
    #[wasm_bindgen(method, getter)]
    pub fn error(this: &FinishedOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_error(this: &FinishedOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn readable(this: &FinishedOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_readable(this: &FinishedOptions, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn writable(this: &FinishedOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_writable(this: &FinishedOptions, value: Option<bool>);
    #[wasm_bindgen()]
    pub fn finished(stream: &JsValue, options: &FinishedOptions, callback: &JsValue) -> Function;
    # [ wasm_bindgen ( js_name = finished ) ]
    pub fn finished2(stream: &JsValue, callback: &JsValue) -> Function;
    #[wasm_bindgen()]
    pub fn pipeline(stream1: &ReadableStream, stream2: &JsValue, callback: &JsValue) -> JsValue;
    # [ wasm_bindgen ( js_name = pipeline ) ]
    pub fn pipeline2(
        stream1: &ReadableStream,
        stream2: &ReadWriteStream,
        stream3: &JsValue,
        callback: &JsValue,
    ) -> JsValue;
    # [ wasm_bindgen ( js_name = pipeline ) ]
    pub fn pipeline3(
        stream1: &ReadableStream,
        stream2: &ReadWriteStream,
        stream3: &ReadWriteStream,
        stream4: &JsValue,
        callback: &JsValue,
    ) -> JsValue;
    # [ wasm_bindgen ( js_name = pipeline ) ]
    pub fn pipeline4(
        stream1: &ReadableStream,
        stream2: &ReadWriteStream,
        stream3: &ReadWriteStream,
        stream4: &ReadWriteStream,
        stream5: &JsValue,
        callback: &JsValue,
    ) -> JsValue;
    # [ wasm_bindgen ( js_name = pipeline ) ]
    pub fn pipeline5(streams: &Array, callback: &JsValue) -> WritableStream;
    # [ wasm_bindgen ( js_name = pipeline ) ]
    pub fn pipeline6(
        stream1: &ReadableStream,
        stream2: &JsValue,
        streams: &Array,
    ) -> WritableStream;
    pub type Pipe;
    #[wasm_bindgen(method)]
    pub fn close(this: &Pipe);
    #[wasm_bindgen(method, setter)]
    pub fn set_close(this: &Pipe, value: &Function);
    # [ wasm_bindgen ( method , js_name = hasRef ) ]
    pub fn has_ref(this: &Pipe) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = hasRef ) ]
    pub fn set_has_ref(this: &Pipe, value: &Function);
    # [ wasm_bindgen ( method , js_name = ref ) ]
    pub fn ref_(this: &Pipe);
    # [ wasm_bindgen ( method , setter , js_name = ref ) ]
    pub fn set_ref_(this: &Pipe, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unref(this: &Pipe);
    #[wasm_bindgen(method, setter)]
    pub fn set_unref(this: &Pipe, value: &Function);
}
