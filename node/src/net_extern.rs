// generated by ts2rs 0.1.4
// https://ts2rs.ctaggart.com/

#[wasm_bindgen(module = "net")]
extern "C" {
    pub type AddressInfo;
    #[wasm_bindgen(method, getter)]
    pub fn address(this: &AddressInfo) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_address(this: &AddressInfo, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn family(this: &AddressInfo) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_family(this: &AddressInfo, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn port(this: &AddressInfo) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_port(this: &AddressInfo, value: f64);
    pub type SocketConstructorOpts;
    #[wasm_bindgen(method, getter)]
    pub fn fd(this: &SocketConstructorOpts) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_fd(this: &SocketConstructorOpts, value: Option<f64>);
    # [ wasm_bindgen ( method , getter , js_name = allowHalfOpen ) ]
    pub fn allow_half_open(this: &SocketConstructorOpts) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = allowHalfOpen ) ]
    pub fn set_allow_half_open(this: &SocketConstructorOpts, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn readable(this: &SocketConstructorOpts) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_readable(this: &SocketConstructorOpts, value: Option<bool>);
    #[wasm_bindgen(method, getter)]
    pub fn writable(this: &SocketConstructorOpts) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_writable(this: &SocketConstructorOpts, value: Option<bool>);
    pub type OnReadOpts;
    #[wasm_bindgen(method, getter)]
    pub fn buffer(this: &OnReadOpts) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_buffer(this: &OnReadOpts, value: &JsValue);
    #[wasm_bindgen(method)]
    pub fn callback(this: &OnReadOpts, bytes_written: f64, buf: &Uint8Array) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_callback(this: &OnReadOpts, value: &Function);
    pub type ConnectOpts;
    #[doc = "If specified, incoming data is stored in a single buffer and passed to the supplied callback when data arrives on the socket."]
    #[doc = "Note: this will cause the streaming functionality to not provide any data, however events like 'error', 'end', and 'close' will"]
    #[doc = "still be emitted as normal and methods like pause() and resume() will also behave as expected."]
    #[wasm_bindgen(method, getter)]
    pub fn onread(this: &ConnectOpts) -> Option<OnReadOpts>;
    #[wasm_bindgen(method, setter)]
    pub fn set_onread(this: &ConnectOpts, value: Option<&OnReadOpts>);
    pub type TcpSocketConnectOpts;
    #[wasm_bindgen(method, getter)]
    pub fn port(this: &TcpSocketConnectOpts) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_port(this: &TcpSocketConnectOpts, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn host(this: &TcpSocketConnectOpts) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_host(this: &TcpSocketConnectOpts, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = localAddress ) ]
    pub fn local_address(this: &TcpSocketConnectOpts) -> Option<String>;
    # [ wasm_bindgen ( method , setter , js_name = localAddress ) ]
    pub fn set_local_address(this: &TcpSocketConnectOpts, value: Option<&str>);
    # [ wasm_bindgen ( method , getter , js_name = localPort ) ]
    pub fn local_port(this: &TcpSocketConnectOpts) -> Option<f64>;
    # [ wasm_bindgen ( method , setter , js_name = localPort ) ]
    pub fn set_local_port(this: &TcpSocketConnectOpts, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn hints(this: &TcpSocketConnectOpts) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_hints(this: &TcpSocketConnectOpts, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn family(this: &TcpSocketConnectOpts) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_family(this: &TcpSocketConnectOpts, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn lookup(this: &TcpSocketConnectOpts) -> LookupFunction;
    #[wasm_bindgen(method, setter)]
    pub fn set_lookup(this: &TcpSocketConnectOpts, value: &LookupFunction);
    pub type IpcSocketConnectOpts;
    #[wasm_bindgen(method, getter)]
    pub fn path(this: &IpcSocketConnectOpts) -> String;
    #[wasm_bindgen(method, setter)]
    pub fn set_path(this: &IpcSocketConnectOpts, value: &str);
    #[wasm_bindgen(method, getter)]
    pub fn kind(this: &SocketConnectOpts) -> i32;
    pub type SocketConnectOpts;
    pub type Socket;
    #[wasm_bindgen(constructor)]
    pub fn new_socket(options: Option<&SocketConstructorOpts>) -> Socket;
    #[wasm_bindgen(method)]
    pub fn write(this: &Socket, buffer: &JsValue, cb: &JsValue) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_write(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = write ) ]
    pub fn write_2(this: &Socket, str: &JsValue, encoding: Option<&str>, cb: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = write ) ]
    pub fn set_write_2(this: &Socket, value: &Function);
    #[wasm_bindgen(method)]
    pub fn connect(
        this: &Socket,
        options: &SocketConnectOpts,
        connection_listener: &JsValue,
    ) -> Socket;
    #[wasm_bindgen(method, setter)]
    pub fn set_connect(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = connect ) ]
    pub fn connect_2(this: &Socket, port: f64, host: &str, connection_listener: &JsValue)
    -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = connect ) ]
    pub fn set_connect_2(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = connect ) ]
    pub fn connect_3(this: &Socket, port: f64, connection_listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = connect ) ]
    pub fn set_connect_3(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = connect ) ]
    pub fn connect_4(this: &Socket, path: &str, connection_listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = connect ) ]
    pub fn set_connect_4(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = setEncoding ) ]
    pub fn set_encoding(this: &Socket, encoding: Option<&str>) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = setEncoding ) ]
    pub fn set_set_encoding(this: &Socket, value: &Function);
    #[wasm_bindgen(method)]
    pub fn pause(this: &Socket) -> Socket;
    #[wasm_bindgen(method, setter)]
    pub fn set_pause(this: &Socket, value: &Function);
    #[wasm_bindgen(method)]
    pub fn resume(this: &Socket) -> Socket;
    #[wasm_bindgen(method, setter)]
    pub fn set_resume(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = setTimeout ) ]
    pub fn set_timeout(this: &Socket, timeout: f64, callback: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = setTimeout ) ]
    pub fn set_set_timeout(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = setNoDelay ) ]
    pub fn set_no_delay(this: &Socket, no_delay: Option<bool>) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = setNoDelay ) ]
    pub fn set_set_no_delay(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = setKeepAlive ) ]
    pub fn set_keep_alive(
        this: &Socket,
        enable: Option<bool>,
        initial_delay: Option<f64>,
    ) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = setKeepAlive ) ]
    pub fn set_set_keep_alive(this: &Socket, value: &Function);
    #[wasm_bindgen(method)]
    pub fn address(this: &Socket) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_address(this: &Socket, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unref(this: &Socket);
    #[wasm_bindgen(method, setter)]
    pub fn set_unref(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = ref ) ]
    pub fn ref_(this: &Socket);
    # [ wasm_bindgen ( method , setter , js_name = ref ) ]
    pub fn set_ref_(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = bufferSize ) ]
    pub fn buffer_size(this: &Socket) -> f64;
    # [ wasm_bindgen ( method , getter , js_name = bytesRead ) ]
    pub fn bytes_read(this: &Socket) -> f64;
    # [ wasm_bindgen ( method , getter , js_name = bytesWritten ) ]
    pub fn bytes_written(this: &Socket) -> f64;
    #[wasm_bindgen(method, getter)]
    pub fn connecting(this: &Socket) -> bool;
    #[wasm_bindgen(method, getter)]
    pub fn destroyed(this: &Socket) -> bool;
    # [ wasm_bindgen ( method , getter , js_name = localAddress ) ]
    pub fn local_address(this: &Socket) -> String;
    # [ wasm_bindgen ( method , getter , js_name = localPort ) ]
    pub fn local_port(this: &Socket) -> f64;
    # [ wasm_bindgen ( method , getter , js_name = remoteAddress ) ]
    pub fn remote_address(this: &Socket) -> Option<String>;
    # [ wasm_bindgen ( method , getter , js_name = remoteFamily ) ]
    pub fn remote_family(this: &Socket) -> Option<String>;
    # [ wasm_bindgen ( method , getter , js_name = remotePort ) ]
    pub fn remote_port(this: &Socket) -> Option<f64>;
    #[wasm_bindgen(method)]
    pub fn end(this: &Socket, cb: &JsValue);
    #[wasm_bindgen(method, setter)]
    pub fn set_end(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = end ) ]
    pub fn end_2(this: &Socket, buffer: &JsValue, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = end ) ]
    pub fn set_end_2(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = end ) ]
    pub fn end_3(this: &Socket, str: &JsValue, encoding: Option<&str>, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = end ) ]
    pub fn set_end_3(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Socket, event: &str, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_6(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_6(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_7(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_7(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_8(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_8(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_9(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_9(this: &Socket, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Socket, event: &JsValue, args: &Array) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &Socket, event: &JsValue, had_error: bool) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &Socket, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(this: &Socket, event: &JsValue, data: &Buffer) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(this: &Socket, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_6(this: &Socket, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_6(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_7(this: &Socket, event: &JsValue, err: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_7(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_8(
        this: &Socket,
        event: &JsValue,
        err: &Error,
        address: &str,
        family: &JsValue,
        host: &str,
    ) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_8(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_9(this: &Socket, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_9(this: &Socket, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Socket, event: &str, listener: &JsValue) -> Socket;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_6(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_6(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_7(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_7(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_8(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_8(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_9(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_9(this: &Socket, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Socket, event: &str, listener: &JsValue) -> Socket;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_6(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_6(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_7(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_7(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_8(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_8(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_9(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_9(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &Socket, event: &str, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_6(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_6(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_7(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_7(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_8(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_8(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_9(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_9(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &Socket, event: &str, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_6(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_6(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_7(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_7(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_8(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_8(this: &Socket, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_9(this: &Socket, event: &JsValue, listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_9(this: &Socket, value: &Function);
    pub type ListenOptions;
    #[wasm_bindgen(method, getter)]
    pub fn port(this: &ListenOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_port(this: &ListenOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn host(this: &ListenOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_host(this: &ListenOptions, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn backlog(this: &ListenOptions) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_backlog(this: &ListenOptions, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn path(this: &ListenOptions) -> Option<String>;
    #[wasm_bindgen(method, setter)]
    pub fn set_path(this: &ListenOptions, value: Option<&str>);
    #[wasm_bindgen(method, getter)]
    pub fn exclusive(this: &ListenOptions) -> Option<bool>;
    #[wasm_bindgen(method, setter)]
    pub fn set_exclusive(this: &ListenOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = readableAll ) ]
    pub fn readable_all(this: &ListenOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = readableAll ) ]
    pub fn set_readable_all(this: &ListenOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = writableAll ) ]
    pub fn writable_all(this: &ListenOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = writableAll ) ]
    pub fn set_writable_all(this: &ListenOptions, value: Option<bool>);
    # [ wasm_bindgen ( method , getter , js_name = ipv6Only ) ]
    pub fn ipv6_only(this: &ListenOptions) -> Option<bool>;
    # [ wasm_bindgen ( method , setter , js_name = ipv6Only ) ]
    pub fn set_ipv6_only(this: &ListenOptions, value: Option<bool>);
    pub type Server;
    #[wasm_bindgen(constructor)]
    pub fn new_server(connection_listener: &JsValue) -> Server;
    #[wasm_bindgen(constructor)]
    pub fn new_server_2(options: &JsValue, connection_listener: &JsValue) -> Server;
    #[wasm_bindgen(method)]
    pub fn listen(
        this: &Server,
        port: Option<f64>,
        hostname: Option<&str>,
        backlog: Option<f64>,
        listening_listener: &JsValue,
    ) -> Server;
    #[wasm_bindgen(method, setter)]
    pub fn set_listen(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = listen ) ]
    pub fn listen_2(
        this: &Server,
        port: Option<f64>,
        hostname: Option<&str>,
        listening_listener: &JsValue,
    ) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = listen ) ]
    pub fn set_listen_2(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = listen ) ]
    pub fn listen_3(
        this: &Server,
        port: Option<f64>,
        backlog: Option<f64>,
        listening_listener: &JsValue,
    ) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = listen ) ]
    pub fn set_listen_3(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = listen ) ]
    pub fn listen_4(this: &Server, port: Option<f64>, listening_listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = listen ) ]
    pub fn set_listen_4(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = listen ) ]
    pub fn listen_5(
        this: &Server,
        path: &str,
        backlog: Option<f64>,
        listening_listener: &JsValue,
    ) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = listen ) ]
    pub fn set_listen_5(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = listen ) ]
    pub fn listen_6(this: &Server, path: &str, listening_listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = listen ) ]
    pub fn set_listen_6(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = listen ) ]
    pub fn listen_7(this: &Server, options: &ListenOptions, listening_listener: &JsValue)
    -> Server;
    # [ wasm_bindgen ( method , setter , js_name = listen ) ]
    pub fn set_listen_7(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = listen ) ]
    pub fn listen_8(
        this: &Server,
        handle: &JsValue,
        backlog: Option<f64>,
        listening_listener: &JsValue,
    ) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = listen ) ]
    pub fn set_listen_8(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = listen ) ]
    pub fn listen_9(this: &Server, handle: &JsValue, listening_listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = listen ) ]
    pub fn set_listen_9(this: &Server, value: &Function);
    #[wasm_bindgen(method)]
    pub fn close(this: &Server, callback: &JsValue) -> Server;
    #[wasm_bindgen(method, setter)]
    pub fn set_close(this: &Server, value: &Function);
    #[wasm_bindgen(method)]
    pub fn address(this: &Server) -> JsValue;
    #[wasm_bindgen(method, setter)]
    pub fn set_address(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = getConnections ) ]
    pub fn get_connections(this: &Server, cb: &JsValue);
    # [ wasm_bindgen ( method , setter , js_name = getConnections ) ]
    pub fn set_get_connections(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = ref ) ]
    pub fn ref_(this: &Server) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = ref ) ]
    pub fn set_ref_(this: &Server, value: &Function);
    #[wasm_bindgen(method)]
    pub fn unref(this: &Server) -> Server;
    #[wasm_bindgen(method, setter)]
    pub fn set_unref(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , getter , js_name = maxConnections ) ]
    pub fn max_connections(this: &Server) -> f64;
    # [ wasm_bindgen ( method , setter , js_name = maxConnections ) ]
    pub fn set_max_connections(this: &Server, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn connections(this: &Server) -> f64;
    #[wasm_bindgen(method, setter)]
    pub fn set_connections(this: &Server, value: f64);
    #[wasm_bindgen(method, getter)]
    pub fn listening(this: &Server) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_listening(this: &Server, value: bool);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener(this: &Server, event: &str, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_2(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_2(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_3(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_3(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_4(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_4(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = addListener ) ]
    pub fn add_listener_5(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = addListener ) ]
    pub fn set_add_listener_5(this: &Server, value: &Function);
    #[wasm_bindgen(method)]
    pub fn emit(this: &Server, event: &JsValue, args: &Array) -> bool;
    #[wasm_bindgen(method, setter)]
    pub fn set_emit(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_2(this: &Server, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_2(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_3(this: &Server, event: &JsValue, socket: &Socket) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_3(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_4(this: &Server, event: &JsValue, err: &Error) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_4(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = emit ) ]
    pub fn emit_5(this: &Server, event: &JsValue) -> bool;
    # [ wasm_bindgen ( method , setter , js_name = emit ) ]
    pub fn set_emit_5(this: &Server, value: &Function);
    #[wasm_bindgen(method)]
    pub fn on(this: &Server, event: &str, listener: &JsValue) -> Server;
    #[wasm_bindgen(method, setter)]
    pub fn set_on(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_2(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_2(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_3(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_3(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_4(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_4(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = on ) ]
    pub fn on_5(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = on ) ]
    pub fn set_on_5(this: &Server, value: &Function);
    #[wasm_bindgen(method)]
    pub fn once(this: &Server, event: &str, listener: &JsValue) -> Server;
    #[wasm_bindgen(method, setter)]
    pub fn set_once(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_2(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_2(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_3(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_3(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_4(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_4(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = once ) ]
    pub fn once_5(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = once ) ]
    pub fn set_once_5(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener(this: &Server, event: &str, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_2(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_2(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_3(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_3(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_4(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_4(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependListener ) ]
    pub fn prepend_listener_5(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = prependListener ) ]
    pub fn set_prepend_listener_5(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener(this: &Server, event: &str, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_2(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_2(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_3(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_3(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_4(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_4(this: &Server, value: &Function);
    # [ wasm_bindgen ( method , js_name = prependOnceListener ) ]
    pub fn prepend_once_listener_5(this: &Server, event: &JsValue, listener: &JsValue) -> Server;
    # [ wasm_bindgen ( method , setter , js_name = prependOnceListener ) ]
    pub fn set_prepend_once_listener_5(this: &Server, value: &Function);
    pub type TcpNetConnectOpts;
    #[wasm_bindgen(method, getter)]
    pub fn timeout(this: &TcpNetConnectOpts) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_timeout(this: &TcpNetConnectOpts, value: Option<f64>);
    pub type IpcNetConnectOpts;
    #[wasm_bindgen(method, getter)]
    pub fn timeout(this: &IpcNetConnectOpts) -> Option<f64>;
    #[wasm_bindgen(method, setter)]
    pub fn set_timeout(this: &IpcNetConnectOpts, value: Option<f64>);
    #[wasm_bindgen(method, getter)]
    pub fn kind(this: &NetConnectOpts) -> i32;
    pub type NetConnectOpts;
    # [ wasm_bindgen ( js_name = createServer ) ]
    pub fn create_server(connection_listener: &JsValue) -> Server;
    # [ wasm_bindgen ( js_name = createServer ) ]
    pub fn create_server_2(options: &JsValue, connection_listener: &JsValue) -> Server;
    #[wasm_bindgen()]
    pub fn connect(options: &NetConnectOpts, connection_listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( js_name = connect ) ]
    pub fn connect_2(port: f64, host: Option<&str>, connection_listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( js_name = connect ) ]
    pub fn connect_3(path: &str, connection_listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( js_name = createConnection ) ]
    pub fn create_connection(options: &NetConnectOpts, connection_listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( js_name = createConnection ) ]
    pub fn create_connection_2(
        port: f64,
        host: Option<&str>,
        connection_listener: &JsValue,
    ) -> Socket;
    # [ wasm_bindgen ( js_name = createConnection ) ]
    pub fn create_connection_3(path: &str, connection_listener: &JsValue) -> Socket;
    # [ wasm_bindgen ( js_name = isIP ) ]
    pub fn is_ip(input: &str) -> f64;
    # [ wasm_bindgen ( js_name = isIPv4 ) ]
    pub fn is_i_pv4(input: &str) -> bool;
    # [ wasm_bindgen ( js_name = isIPv6 ) ]
    pub fn is_i_pv6(input: &str) -> bool;
}
