// generated by ts2rs 0.1.2
// https://ts2rs.ctaggart.com/

pub type MarkerTag = i32;
pub type MarkerTagRef = i32;
#[derive(Debug, PartialEq, Eq)]
pub struct MarkerTagConst(pub i32);
impl MarkerTagConst {
    pub const UNNECESSARY: MarkerTagConst = MarkerTagConst(1);
    pub const DEPRECATED: MarkerTagConst = MarkerTagConst(2);
}
pub type MarkerSeverity = i32;
pub type MarkerSeverityRef = i32;
#[derive(Debug, PartialEq, Eq)]
pub struct MarkerSeverityConst(pub i32);
impl MarkerSeverityConst {
    pub const HINT: MarkerSeverityConst = MarkerSeverityConst(1);
    pub const INFO: MarkerSeverityConst = MarkerSeverityConst(2);
    pub const WARNING: MarkerSeverityConst = MarkerSeverityConst(4);
    pub const ERROR: MarkerSeverityConst = MarkerSeverityConst(8);
}
pub type KeyCode = i32;
pub type KeyCodeRef = i32;
#[derive(Debug, PartialEq, Eq)]
pub struct KeyCodeConst(pub i32);
impl KeyCodeConst {
    pub const UNKNOWN: KeyCodeConst = KeyCodeConst(0);
    pub const BACKSPACE: KeyCodeConst = KeyCodeConst(1);
    pub const TAB: KeyCodeConst = KeyCodeConst(2);
    pub const ENTER: KeyCodeConst = KeyCodeConst(3);
    pub const SHIFT: KeyCodeConst = KeyCodeConst(4);
    pub const CTRL: KeyCodeConst = KeyCodeConst(5);
    pub const ALT: KeyCodeConst = KeyCodeConst(6);
    pub const PAUSE_BREAK: KeyCodeConst = KeyCodeConst(7);
    pub const CAPS_LOCK: KeyCodeConst = KeyCodeConst(8);
    pub const ESCAPE: KeyCodeConst = KeyCodeConst(9);
    pub const SPACE: KeyCodeConst = KeyCodeConst(10);
    pub const PAGE_UP: KeyCodeConst = KeyCodeConst(11);
    pub const PAGE_DOWN: KeyCodeConst = KeyCodeConst(12);
    pub const END: KeyCodeConst = KeyCodeConst(13);
    pub const HOME: KeyCodeConst = KeyCodeConst(14);
    pub const LEFT_ARROW: KeyCodeConst = KeyCodeConst(15);
    pub const UP_ARROW: KeyCodeConst = KeyCodeConst(16);
    pub const RIGHT_ARROW: KeyCodeConst = KeyCodeConst(17);
    pub const DOWN_ARROW: KeyCodeConst = KeyCodeConst(18);
    pub const INSERT: KeyCodeConst = KeyCodeConst(19);
    pub const DELETE: KeyCodeConst = KeyCodeConst(20);
    pub const KEY_0: KeyCodeConst = KeyCodeConst(21);
    pub const KEY_1: KeyCodeConst = KeyCodeConst(22);
    pub const KEY_2: KeyCodeConst = KeyCodeConst(23);
    pub const KEY_3: KeyCodeConst = KeyCodeConst(24);
    pub const KEY_4: KeyCodeConst = KeyCodeConst(25);
    pub const KEY_5: KeyCodeConst = KeyCodeConst(26);
    pub const KEY_6: KeyCodeConst = KeyCodeConst(27);
    pub const KEY_7: KeyCodeConst = KeyCodeConst(28);
    pub const KEY_8: KeyCodeConst = KeyCodeConst(29);
    pub const KEY_9: KeyCodeConst = KeyCodeConst(30);
    pub const KEY_A: KeyCodeConst = KeyCodeConst(31);
    pub const KEY_B: KeyCodeConst = KeyCodeConst(32);
    pub const KEY_C: KeyCodeConst = KeyCodeConst(33);
    pub const KEY_D: KeyCodeConst = KeyCodeConst(34);
    pub const KEY_E: KeyCodeConst = KeyCodeConst(35);
    pub const KEY_F: KeyCodeConst = KeyCodeConst(36);
    pub const KEY_G: KeyCodeConst = KeyCodeConst(37);
    pub const KEY_H: KeyCodeConst = KeyCodeConst(38);
    pub const KEY_I: KeyCodeConst = KeyCodeConst(39);
    pub const KEY_J: KeyCodeConst = KeyCodeConst(40);
    pub const KEY_K: KeyCodeConst = KeyCodeConst(41);
    pub const KEY_L: KeyCodeConst = KeyCodeConst(42);
    pub const KEY_M: KeyCodeConst = KeyCodeConst(43);
    pub const KEY_N: KeyCodeConst = KeyCodeConst(44);
    pub const KEY_O: KeyCodeConst = KeyCodeConst(45);
    pub const KEY_P: KeyCodeConst = KeyCodeConst(46);
    pub const KEY_Q: KeyCodeConst = KeyCodeConst(47);
    pub const KEY_R: KeyCodeConst = KeyCodeConst(48);
    pub const KEY_S: KeyCodeConst = KeyCodeConst(49);
    pub const KEY_T: KeyCodeConst = KeyCodeConst(50);
    pub const KEY_U: KeyCodeConst = KeyCodeConst(51);
    pub const KEY_V: KeyCodeConst = KeyCodeConst(52);
    pub const KEY_W: KeyCodeConst = KeyCodeConst(53);
    pub const KEY_X: KeyCodeConst = KeyCodeConst(54);
    pub const KEY_Y: KeyCodeConst = KeyCodeConst(55);
    pub const KEY_Z: KeyCodeConst = KeyCodeConst(56);
    pub const META: KeyCodeConst = KeyCodeConst(57);
    pub const CONTEXT_MENU: KeyCodeConst = KeyCodeConst(58);
    pub const F1: KeyCodeConst = KeyCodeConst(59);
    pub const F2: KeyCodeConst = KeyCodeConst(60);
    pub const F3: KeyCodeConst = KeyCodeConst(61);
    pub const F4: KeyCodeConst = KeyCodeConst(62);
    pub const F5: KeyCodeConst = KeyCodeConst(63);
    pub const F6: KeyCodeConst = KeyCodeConst(64);
    pub const F7: KeyCodeConst = KeyCodeConst(65);
    pub const F8: KeyCodeConst = KeyCodeConst(66);
    pub const F9: KeyCodeConst = KeyCodeConst(67);
    pub const F10: KeyCodeConst = KeyCodeConst(68);
    pub const F11: KeyCodeConst = KeyCodeConst(69);
    pub const F12: KeyCodeConst = KeyCodeConst(70);
    pub const F13: KeyCodeConst = KeyCodeConst(71);
    pub const F14: KeyCodeConst = KeyCodeConst(72);
    pub const F15: KeyCodeConst = KeyCodeConst(73);
    pub const F16: KeyCodeConst = KeyCodeConst(74);
    pub const F17: KeyCodeConst = KeyCodeConst(75);
    pub const F18: KeyCodeConst = KeyCodeConst(76);
    pub const F19: KeyCodeConst = KeyCodeConst(77);
    pub const NUM_LOCK: KeyCodeConst = KeyCodeConst(78);
    pub const SCROLL_LOCK: KeyCodeConst = KeyCodeConst(79);
    pub const US_SEMICOLON: KeyCodeConst = KeyCodeConst(80);
    pub const US_EQUAL: KeyCodeConst = KeyCodeConst(81);
    pub const US_COMMA: KeyCodeConst = KeyCodeConst(82);
    pub const US_MINUS: KeyCodeConst = KeyCodeConst(83);
    pub const US_DOT: KeyCodeConst = KeyCodeConst(84);
    pub const US_SLASH: KeyCodeConst = KeyCodeConst(85);
    pub const US_BACKTICK: KeyCodeConst = KeyCodeConst(86);
    pub const US_OPEN_SQUARE_BRACKET: KeyCodeConst = KeyCodeConst(87);
    pub const US_BACKSLASH: KeyCodeConst = KeyCodeConst(88);
    pub const US_CLOSE_SQUARE_BRACKET: KeyCodeConst = KeyCodeConst(89);
    pub const US_QUOTE: KeyCodeConst = KeyCodeConst(90);
    pub const OEM_8: KeyCodeConst = KeyCodeConst(91);
    pub const OEM_102: KeyCodeConst = KeyCodeConst(92);
    pub const NUMPAD_0: KeyCodeConst = KeyCodeConst(93);
    pub const NUMPAD_1: KeyCodeConst = KeyCodeConst(94);
    pub const NUMPAD_2: KeyCodeConst = KeyCodeConst(95);
    pub const NUMPAD_3: KeyCodeConst = KeyCodeConst(96);
    pub const NUMPAD_4: KeyCodeConst = KeyCodeConst(97);
    pub const NUMPAD_5: KeyCodeConst = KeyCodeConst(98);
    pub const NUMPAD_6: KeyCodeConst = KeyCodeConst(99);
    pub const NUMPAD_7: KeyCodeConst = KeyCodeConst(100);
    pub const NUMPAD_8: KeyCodeConst = KeyCodeConst(101);
    pub const NUMPAD_9: KeyCodeConst = KeyCodeConst(102);
    pub const NUMPAD_MULTIPLY: KeyCodeConst = KeyCodeConst(103);
    pub const NUMPAD_ADD: KeyCodeConst = KeyCodeConst(104);
    pub const NUMPAD_SEPARATOR: KeyCodeConst = KeyCodeConst(105);
    pub const NUMPAD_SUBTRACT: KeyCodeConst = KeyCodeConst(106);
    pub const NUMPAD_DECIMAL: KeyCodeConst = KeyCodeConst(107);
    pub const NUMPAD_DIVIDE: KeyCodeConst = KeyCodeConst(108);
    pub const KEY_IN_COMPOSITION: KeyCodeConst = KeyCodeConst(109);
    pub const ABNT_C1: KeyCodeConst = KeyCodeConst(110);
    pub const ABNT_C2: KeyCodeConst = KeyCodeConst(111);
    pub const MAX_VALUE: KeyCodeConst = KeyCodeConst(112);
}
pub type SelectionDirection = i32;
pub type SelectionDirectionRef = i32;
#[derive(Debug, PartialEq, Eq)]
pub struct SelectionDirectionConst(pub i32);
impl SelectionDirectionConst {
    pub const LTR: SelectionDirectionConst = SelectionDirectionConst(0);
    pub const RTL: SelectionDirectionConst = SelectionDirectionConst(1);
}
impl CancellationToken {
    pub fn new() -> CancellationToken {
        JsCast::unchecked_into(Object::new())
    }
}
impl CancellationTokenSource {
    pub fn new() -> CancellationTokenSource {
        JsCast::unchecked_into(Object::new())
    }
}
impl Emitter {
    pub fn new() -> Emitter {
        JsCast::unchecked_into(Object::new())
    }
}
impl Environment {
    pub fn new() -> Environment {
        JsCast::unchecked_into(Object::new())
    }
}
impl IDisposable {
    pub fn new() -> IDisposable {
        JsCast::unchecked_into(Object::new())
    }
}
impl IEvent {
    pub fn new() -> IEvent {
        JsCast::unchecked_into(Object::new())
    }
}
impl IKeyboardEvent {
    pub fn new() -> IKeyboardEvent {
        JsCast::unchecked_into(Object::new())
    }
}
impl IMarkdownString {
    pub fn new() -> IMarkdownString {
        JsCast::unchecked_into(Object::new())
    }
}
impl IMouseEvent {
    pub fn new() -> IMouseEvent {
        JsCast::unchecked_into(Object::new())
    }
}
impl IPosition {
    pub fn new() -> IPosition {
        JsCast::unchecked_into(Object::new())
    }
}
impl IRange {
    pub fn new() -> IRange {
        JsCast::unchecked_into(Object::new())
    }
}
impl IScrollEvent {
    pub fn new() -> IScrollEvent {
        JsCast::unchecked_into(Object::new())
    }
}
impl ISelection {
    pub fn new() -> ISelection {
        JsCast::unchecked_into(Object::new())
    }
}
impl KeyMod {
    pub fn new() -> KeyMod {
        JsCast::unchecked_into(Object::new())
    }
}
impl Position {
    pub fn new() -> Position {
        JsCast::unchecked_into(Object::new())
    }
}
impl Range {
    pub fn new() -> Range {
        JsCast::unchecked_into(Object::new())
    }
}
impl Selection {
    pub fn new() -> Selection {
        JsCast::unchecked_into(Object::new())
    }
}
impl Token {
    pub fn new() -> Token {
        JsCast::unchecked_into(Object::new())
    }
}
impl Uri {
    pub fn new() -> Uri {
        JsCast::unchecked_into(Object::new())
    }
}
impl UriComponents {
    pub fn new() -> UriComponents {
        JsCast::unchecked_into(Object::new())
    }
}
impl AsRef<Range> for Selection {
    fn as_ref(&self) -> &Range {
        JsCast::unchecked_ref(self)
    }
}
impl From<Selection> for Range {
    fn from(child: Selection) -> Self {
        JsCast::unchecked_into(child)
    }
}
impl AsRef<UriComponents> for Uri {
    fn as_ref(&self) -> &UriComponents {
        JsCast::unchecked_ref(self)
    }
}
impl From<Uri> for UriComponents {
    fn from(child: Uri) -> Self {
        JsCast::unchecked_into(child)
    }
}
